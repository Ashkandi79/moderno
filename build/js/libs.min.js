!function(t,e){"use strict";"object"==typeof module&&"object"==typeof module.exports?module.exports=t.document?e(t,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return e(t)}:e(t)}("undefined"!=typeof window?window:this,function(_,t){"use strict";function m(t){return null!=t&&t===t.window}var e=[],S=_.document,o=Object.getPrototypeOf,a=e.slice,g=e.concat,l=e.push,n=e.indexOf,i={},s=i.toString,v=i.hasOwnProperty,r=v.toString,c=r.call(Object),y={},b=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType},d={type:!0,src:!0,nonce:!0,noModule:!0};function x(t,e,i){var o,n,s=(i=i||S).createElement("script");if(s.text=t,e)for(o in d)(n=e[o]||e.getAttribute&&e.getAttribute(o))&&s.setAttribute(o,n);i.head.appendChild(s).parentNode.removeChild(s)}function w(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?i[s.call(t)]||"object":typeof t}var u="3.4.1",T=function(t,e){return new T.fn.init(t,e)},h=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function p(t){var e=!!t&&"length"in t&&t.length,i=w(t);return!b(t)&&!m(t)&&("array"===i||0===e||"number"==typeof e&&0<e&&e-1 in t)}T.fn=T.prototype={jquery:u,constructor:T,length:0,toArray:function(){return a.call(this)},get:function(t){return null==t?a.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=T.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return T.each(this,t)},map:function(i){return this.pushStack(T.map(this,function(t,e){return i.call(t,e,t)}))},slice:function(){return this.pushStack(a.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(t){var e=this.length,i=+t+(t<0?e:0);return this.pushStack(0<=i&&i<e?[this[i]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:e.sort,splice:e.splice},T.extend=T.fn.extend=function(){var t,e,i,o,n,s,r=arguments[0]||{},a=1,l=arguments.length,c=!1;for("boolean"==typeof r&&(c=r,r=arguments[a]||{},a++),"object"==typeof r||b(r)||(r={}),a===l&&(r=this,a--);a<l;a++)if(null!=(t=arguments[a]))for(e in t)o=t[e],"__proto__"!==e&&r!==o&&(c&&o&&(T.isPlainObject(o)||(n=Array.isArray(o)))?(i=r[e],s=n&&!Array.isArray(i)?[]:n||T.isPlainObject(i)?i:{},n=!1,r[e]=T.extend(c,s,o)):void 0!==o&&(r[e]=o));return r},T.extend({expando:"jQuery"+(u+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,i;return!(!t||"[object Object]"!==s.call(t))&&(!(e=o(t))||"function"==typeof(i=v.call(e,"constructor")&&e.constructor)&&r.call(i)===c)},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e){x(t,{nonce:e&&e.nonce})},each:function(t,e){var i,o=0;if(p(t))for(i=t.length;o<i&&!1!==e.call(t[o],o,t[o]);o++);else for(o in t)if(!1===e.call(t[o],o,t[o]))break;return t},trim:function(t){return null==t?"":(t+"").replace(h,"")},makeArray:function(t,e){var i=e||[];return null!=t&&(p(Object(t))?T.merge(i,"string"==typeof t?[t]:t):l.call(i,t)),i},inArray:function(t,e,i){return null==e?-1:n.call(e,t,i)},merge:function(t,e){for(var i=+e.length,o=0,n=t.length;o<i;o++)t[n++]=e[o];return t.length=n,t},grep:function(t,e,i){for(var o=[],n=0,s=t.length,r=!i;n<s;n++)!e(t[n],n)!=r&&o.push(t[n]);return o},map:function(t,e,i){var o,n,s=0,r=[];if(p(t))for(o=t.length;s<o;s++)null!=(n=e(t[s],s,i))&&r.push(n);else for(s in t)null!=(n=e(t[s],s,i))&&r.push(n);return g.apply([],r)},guid:1,support:y}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=e[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(t,e){i["[object "+e+"]"]=e.toLowerCase()});var f=function(i){function u(t,e,i){var o="0x"+e-65536;return o!=o||i?e:o<0?String.fromCharCode(65536+o):String.fromCharCode(o>>10|55296,1023&o|56320)}function n(){C()}var t,p,x,s,r,f,h,m,w,l,c,C,_,a,S,g,d,v,y,T="sizzle"+ +new Date,b=i.document,k=0,o=0,A=lt(),$=lt(),E=lt(),P=lt(),I=function(t,e){return t===e&&(c=!0),0},D={}.hasOwnProperty,e=[],O=e.pop,F=e.push,M=e.push,N=e.slice,j=function(t,e){for(var i=0,o=t.length;i<o;i++)if(t[i]===e)return i;return-1},L="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",R="[\\x20\\t\\r\\n\\f]",H="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",B="\\["+R+"*("+H+")(?:"+R+"*([*^$|!~]?=)"+R+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+H+"))|)"+R+"*\\]",q=":("+H+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+B+")*)|.*)\\)|)",z=new RegExp(R+"+","g"),W=new RegExp("^"+R+"+|((?:^|[^\\\\])(?:\\\\.)*)"+R+"+$","g"),U=new RegExp("^"+R+"*,"+R+"*"),X=new RegExp("^"+R+"*([>+~]|"+R+")"+R+"*"),Y=new RegExp(R+"|>"),V=new RegExp(q),G=new RegExp("^"+H+"$"),K={ID:new RegExp("^#("+H+")"),CLASS:new RegExp("^\\.("+H+")"),TAG:new RegExp("^("+H+"|[*])"),ATTR:new RegExp("^"+B),PSEUDO:new RegExp("^"+q),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+R+"*(even|odd|(([+-]|)(\\d*)n|)"+R+"*(?:([+-]|)"+R+"*(\\d+)|))"+R+"*\\)|)","i"),bool:new RegExp("^(?:"+L+")$","i"),needsContext:new RegExp("^"+R+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+R+"*((?:-\\d)?\\d*)"+R+"*\\)|)(?=[^-]|$)","i")},Z=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,tt=/^[^{]+\{\s*\[native \w/,et=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,it=/[+~]/,ot=new RegExp("\\\\([\\da-f]{1,6}"+R+"?|("+R+")|.)","ig"),nt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,st=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},rt=xt(function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{M.apply(e=N.call(b.childNodes),b.childNodes),e[b.childNodes.length].nodeType}catch(t){M={apply:e.length?function(t,e){F.apply(t,N.call(e))}:function(t,e){for(var i=t.length,o=0;t[i++]=e[o++];);t.length=i-1}}}function at(e,t,i,o){var n,s,r,a,l,c,d,u=t&&t.ownerDocument,h=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return i;if(!o&&((t?t.ownerDocument||t:b)!==_&&C(t),t=t||_,S)){if(11!==h&&(l=et.exec(e)))if(n=l[1]){if(9===h){if(!(r=t.getElementById(n)))return i;if(r.id===n)return i.push(r),i}else if(u&&(r=u.getElementById(n))&&y(t,r)&&r.id===n)return i.push(r),i}else{if(l[2])return M.apply(i,t.getElementsByTagName(e)),i;if((n=l[3])&&p.getElementsByClassName&&t.getElementsByClassName)return M.apply(i,t.getElementsByClassName(n)),i}if(p.qsa&&!P[e+" "]&&(!g||!g.test(e))&&(1!==h||"object"!==t.nodeName.toLowerCase())){if(d=e,u=t,1===h&&Y.test(e)){for((a=t.getAttribute("id"))?a=a.replace(nt,st):t.setAttribute("id",a=T),s=(c=f(e)).length;s--;)c[s]="#"+a+" "+bt(c[s]);d=c.join(","),u=it.test(e)&&vt(t.parentNode)||t}try{return M.apply(i,u.querySelectorAll(d)),i}catch(t){P(e,!0)}finally{a===T&&t.removeAttribute("id")}}}return m(e.replace(W,"$1"),t,i,o)}function lt(){var o=[];return function t(e,i){return o.push(e+" ")>x.cacheLength&&delete t[o.shift()],t[e+" "]=i}}function ct(t){return t[T]=!0,t}function dt(t){var e=_.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ut(t,e){for(var i=t.split("|"),o=i.length;o--;)x.attrHandle[i[o]]=e}function ht(t,e){var i=e&&t,o=i&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(o)return o;if(i)for(;i=i.nextSibling;)if(i===e)return-1;return t?1:-1}function pt(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function ft(i){return function(t){var e=t.nodeName.toLowerCase();return("input"===e||"button"===e)&&t.type===i}}function mt(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&rt(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function gt(r){return ct(function(s){return s=+s,ct(function(t,e){for(var i,o=r([],t.length,s),n=o.length;n--;)t[i=o[n]]&&(t[i]=!(e[i]=t[i]))})})}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(t in p=at.support={},r=at.isXML=function(t){var e=t.namespaceURI,i=(t.ownerDocument||t).documentElement;return!Z.test(e||i&&i.nodeName||"HTML")},C=at.setDocument=function(t){var e,i,o=t?t.ownerDocument||t:b;return o!==_&&9===o.nodeType&&o.documentElement&&(a=(_=o).documentElement,S=!r(_),b!==_&&(i=_.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",n,!1):i.attachEvent&&i.attachEvent("onunload",n)),p.attributes=dt(function(t){return t.className="i",!t.getAttribute("className")}),p.getElementsByTagName=dt(function(t){return t.appendChild(_.createComment("")),!t.getElementsByTagName("*").length}),p.getElementsByClassName=tt.test(_.getElementsByClassName),p.getById=dt(function(t){return a.appendChild(t).id=T,!_.getElementsByName||!_.getElementsByName(T).length}),p.getById?(x.filter.ID=function(t){var e=t.replace(ot,u);return function(t){return t.getAttribute("id")===e}},x.find.ID=function(t,e){if(void 0!==e.getElementById&&S){var i=e.getElementById(t);return i?[i]:[]}}):(x.filter.ID=function(t){var i=t.replace(ot,u);return function(t){var e=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return e&&e.value===i}},x.find.ID=function(t,e){if(void 0!==e.getElementById&&S){var i,o,n,s=e.getElementById(t);if(s){if((i=s.getAttributeNode("id"))&&i.value===t)return[s];for(n=e.getElementsByName(t),o=0;s=n[o++];)if((i=s.getAttributeNode("id"))&&i.value===t)return[s]}return[]}}),x.find.TAG=p.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):p.qsa?e.querySelectorAll(t):void 0}:function(t,e){var i,o=[],n=0,s=e.getElementsByTagName(t);if("*"!==t)return s;for(;i=s[n++];)1===i.nodeType&&o.push(i);return o},x.find.CLASS=p.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&S)return e.getElementsByClassName(t)},d=[],g=[],(p.qsa=tt.test(_.querySelectorAll))&&(dt(function(t){a.appendChild(t).innerHTML="<a id='"+T+"'></a><select id='"+T+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+R+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\["+R+"*(?:value|"+L+")"),t.querySelectorAll("[id~="+T+"-]").length||g.push("~="),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+T+"+*").length||g.push(".#.+[+~]")}),dt(function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=_.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name"+R+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),a.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")})),(p.matchesSelector=tt.test(v=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&dt(function(t){p.disconnectedMatch=v.call(t,"*"),v.call(t,"[s!='']:x"),d.push("!=",q)}),g=g.length&&new RegExp(g.join("|")),d=d.length&&new RegExp(d.join("|")),e=tt.test(a.compareDocumentPosition),y=e||tt.test(a.contains)?function(t,e){var i=9===t.nodeType?t.documentElement:t,o=e&&e.parentNode;return t===o||!(!o||1!==o.nodeType||!(i.contains?i.contains(o):t.compareDocumentPosition&&16&t.compareDocumentPosition(o)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},I=e?function(t,e){if(t===e)return c=!0,0;var i=!t.compareDocumentPosition-!e.compareDocumentPosition;return i||(1&(i=(t.ownerDocument||t)===(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!p.sortDetached&&e.compareDocumentPosition(t)===i?t===_||t.ownerDocument===b&&y(b,t)?-1:e===_||e.ownerDocument===b&&y(b,e)?1:l?j(l,t)-j(l,e):0:4&i?-1:1)}:function(t,e){if(t===e)return c=!0,0;var i,o=0,n=t.parentNode,s=e.parentNode,r=[t],a=[e];if(!n||!s)return t===_?-1:e===_?1:n?-1:s?1:l?j(l,t)-j(l,e):0;if(n===s)return ht(t,e);for(i=t;i=i.parentNode;)r.unshift(i);for(i=e;i=i.parentNode;)a.unshift(i);for(;r[o]===a[o];)o++;return o?ht(r[o],a[o]):r[o]===b?-1:a[o]===b?1:0}),_},at.matches=function(t,e){return at(t,null,null,e)},at.matchesSelector=function(t,e){if((t.ownerDocument||t)!==_&&C(t),p.matchesSelector&&S&&!P[e+" "]&&(!d||!d.test(e))&&(!g||!g.test(e)))try{var i=v.call(t,e);if(i||p.disconnectedMatch||t.document&&11!==t.document.nodeType)return i}catch(t){P(e,!0)}return 0<at(e,_,null,[t]).length},at.contains=function(t,e){return(t.ownerDocument||t)!==_&&C(t),y(t,e)},at.attr=function(t,e){(t.ownerDocument||t)!==_&&C(t);var i=x.attrHandle[e.toLowerCase()],o=i&&D.call(x.attrHandle,e.toLowerCase())?i(t,e,!S):void 0;return void 0!==o?o:p.attributes||!S?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},at.escape=function(t){return(t+"").replace(nt,st)},at.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},at.uniqueSort=function(t){var e,i=[],o=0,n=0;if(c=!p.detectDuplicates,l=!p.sortStable&&t.slice(0),t.sort(I),c){for(;e=t[n++];)e===t[n]&&(o=i.push(n));for(;o--;)t.splice(i[o],1)}return l=null,t},s=at.getText=function(t){var e,i="",o=0,n=t.nodeType;if(n){if(1===n||9===n||11===n){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)i+=s(t)}else if(3===n||4===n)return t.nodeValue}else for(;e=t[o++];)i+=s(e);return i},(x=at.selectors={cacheLength:50,createPseudo:ct,match:K,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(ot,u),t[3]=(t[3]||t[4]||t[5]||"").replace(ot,u),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||at.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&at.error(t[0]),t},PSEUDO:function(t){var e,i=!t[6]&&t[2];return K.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":i&&V.test(i)&&(e=f(i,!0))&&(e=i.indexOf(")",i.length-e)-i.length)&&(t[0]=t[0].slice(0,e),t[2]=i.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(ot,u).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=A[t+" "];return e||(e=new RegExp("(^|"+R+")"+t+"("+R+"|$)"))&&A(t,function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")})},ATTR:function(i,o,n){return function(t){var e=at.attr(t,i);return null==e?"!="===o:!o||(e+="","="===o?e===n:"!="===o?e!==n:"^="===o?n&&0===e.indexOf(n):"*="===o?n&&-1<e.indexOf(n):"$="===o?n&&e.slice(-n.length)===n:"~="===o?-1<(" "+e.replace(z," ")+" ").indexOf(n):"|="===o&&(e===n||e.slice(0,n.length+1)===n+"-"))}},CHILD:function(f,t,e,m,g){var v="nth"!==f.slice(0,3),y="last"!==f.slice(-4),b="of-type"===t;return 1===m&&0===g?function(t){return!!t.parentNode}:function(t,e,i){var o,n,s,r,a,l,c=v!=y?"nextSibling":"previousSibling",d=t.parentNode,u=b&&t.nodeName.toLowerCase(),h=!i&&!b,p=!1;if(d){if(v){for(;c;){for(r=t;r=r[c];)if(b?r.nodeName.toLowerCase()===u:1===r.nodeType)return!1;l=c="only"===f&&!l&&"nextSibling"}return!0}if(l=[y?d.firstChild:d.lastChild],y&&h){for(p=(a=(o=(n=(s=(r=d)[T]||(r[T]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]||[])[0]===k&&o[1])&&o[2],r=a&&d.childNodes[a];r=++a&&r&&r[c]||(p=a=0)||l.pop();)if(1===r.nodeType&&++p&&r===t){n[f]=[k,a,p];break}}else if(h&&(p=a=(o=(n=(s=(r=t)[T]||(r[T]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]||[])[0]===k&&o[1]),!1===p)for(;(r=++a&&r&&r[c]||(p=a=0)||l.pop())&&((b?r.nodeName.toLowerCase()!==u:1!==r.nodeType)||!++p||(h&&((n=(s=r[T]||(r[T]={}))[r.uniqueID]||(s[r.uniqueID]={}))[f]=[k,p]),r!==t)););return(p-=g)===m||p%m==0&&0<=p/m}}},PSEUDO:function(t,s){var e,r=x.pseudos[t]||x.setFilters[t.toLowerCase()]||at.error("unsupported pseudo: "+t);return r[T]?r(s):1<r.length?(e=[t,t,"",s],x.setFilters.hasOwnProperty(t.toLowerCase())?ct(function(t,e){for(var i,o=r(t,s),n=o.length;n--;)t[i=j(t,o[n])]=!(e[i]=o[n])}):function(t){return r(t,0,e)}):r}},pseudos:{not:ct(function(t){var o=[],n=[],a=h(t.replace(W,"$1"));return a[T]?ct(function(t,e,i,o){for(var n,s=a(t,null,o,[]),r=t.length;r--;)(n=s[r])&&(t[r]=!(e[r]=n))}):function(t,e,i){return o[0]=t,a(o,null,i,n),o[0]=null,!n.pop()}}),has:ct(function(e){return function(t){return 0<at(e,t).length}}),contains:ct(function(e){return e=e.replace(ot,u),function(t){return-1<(t.textContent||s(t)).indexOf(e)}}),lang:ct(function(i){return G.test(i||"")||at.error("unsupported lang: "+i),i=i.replace(ot,u).toLowerCase(),function(t){var e;do{if(e=S?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(e=e.toLowerCase())===i||0===e.indexOf(i+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var e=i.location&&i.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===a},focus:function(t){return t===_.activeElement&&(!_.hasFocus||_.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:mt(!1),disabled:mt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!x.pseudos.empty(t)},header:function(t){return J.test(t.nodeName)},input:function(t){return Q.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:gt(function(){return[0]}),last:gt(function(t,e){return[e-1]}),eq:gt(function(t,e,i){return[i<0?i+e:i]}),even:gt(function(t,e){for(var i=0;i<e;i+=2)t.push(i);return t}),odd:gt(function(t,e){for(var i=1;i<e;i+=2)t.push(i);return t}),lt:gt(function(t,e,i){for(var o=i<0?i+e:e<i?e:i;0<=--o;)t.push(o);return t}),gt:gt(function(t,e,i){for(var o=i<0?i+e:i;++o<e;)t.push(o);return t})}}).pseudos.nth=x.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})x.pseudos[t]=pt(t);for(t in{submit:!0,reset:!0})x.pseudos[t]=ft(t);function yt(){}function bt(t){for(var e=0,i=t.length,o="";e<i;e++)o+=t[e].value;return o}function xt(a,t,e){var l=t.dir,c=t.next,d=c||l,u=e&&"parentNode"===d,h=o++;return t.first?function(t,e,i){for(;t=t[l];)if(1===t.nodeType||u)return a(t,e,i);return!1}:function(t,e,i){var o,n,s,r=[k,h];if(i){for(;t=t[l];)if((1===t.nodeType||u)&&a(t,e,i))return!0}else for(;t=t[l];)if(1===t.nodeType||u)if(n=(s=t[T]||(t[T]={}))[t.uniqueID]||(s[t.uniqueID]={}),c&&c===t.nodeName.toLowerCase())t=t[l]||t;else{if((o=n[d])&&o[0]===k&&o[1]===h)return r[2]=o[2];if((n[d]=r)[2]=a(t,e,i))return!0}return!1}}function wt(n){return 1<n.length?function(t,e,i){for(var o=n.length;o--;)if(!n[o](t,e,i))return!1;return!0}:n[0]}function Ct(t,e,i,o,n){for(var s,r=[],a=0,l=t.length,c=null!=e;a<l;a++)(s=t[a])&&(i&&!i(s,o,n)||(r.push(s),c&&e.push(a)));return r}function _t(p,f,m,g,v,t){return g&&!g[T]&&(g=_t(g)),v&&!v[T]&&(v=_t(v,t)),ct(function(t,e,i,o){var n,s,r,a=[],l=[],c=e.length,d=t||function(t,e,i){for(var o=0,n=e.length;o<n;o++)at(t,e[o],i);return i}(f||"*",i.nodeType?[i]:i,[]),u=!p||!t&&f?d:Ct(d,a,p,i,o),h=m?v||(t?p:c||g)?[]:e:u;if(m&&m(u,h,i,o),g)for(n=Ct(h,l),g(n,[],i,o),s=n.length;s--;)(r=n[s])&&(h[l[s]]=!(u[l[s]]=r));if(t){if(v||p){if(v){for(n=[],s=h.length;s--;)(r=h[s])&&n.push(u[s]=r);v(null,h=[],n,o)}for(s=h.length;s--;)(r=h[s])&&-1<(n=v?j(t,r):a[s])&&(t[n]=!(e[n]=r))}}else h=Ct(h===e?h.splice(c,h.length):h),v?v(null,e,h,o):M.apply(e,h)})}function St(t){for(var n,e,i,o=t.length,s=x.relative[t[0].type],r=s||x.relative[" "],a=s?1:0,l=xt(function(t){return t===n},r,!0),c=xt(function(t){return-1<j(n,t)},r,!0),d=[function(t,e,i){var o=!s&&(i||e!==w)||((n=e).nodeType?l:c)(t,e,i);return n=null,o}];a<o;a++)if(e=x.relative[t[a].type])d=[xt(wt(d),e)];else{if((e=x.filter[t[a].type].apply(null,t[a].matches))[T]){for(i=++a;i<o&&!x.relative[t[i].type];i++);return _t(1<a&&wt(d),1<a&&bt(t.slice(0,a-1).concat({value:" "===t[a-2].type?"*":""})).replace(W,"$1"),e,a<i&&St(t.slice(a,i)),i<o&&St(t=t.slice(i)),i<o&&bt(t))}d.push(e)}return wt(d)}function Tt(g,v){function t(t,e,i,o,n){var s,r,a,l=0,c="0",d=t&&[],u=[],h=w,p=t||b&&x.find.TAG("*",n),f=k+=null==h?1:Math.random()||.1,m=p.length;for(n&&(w=e===_||e||n);c!==m&&null!=(s=p[c]);c++){if(b&&s){for(r=0,e||s.ownerDocument===_||(C(s),i=!S);a=g[r++];)if(a(s,e||_,i)){o.push(s);break}n&&(k=f)}y&&((s=!a&&s)&&l--,t&&d.push(s))}if(l+=c,y&&c!==l){for(r=0;a=v[r++];)a(d,u,e,i);if(t){if(0<l)for(;c--;)d[c]||u[c]||(u[c]=O.call(o));u=Ct(u)}M.apply(o,u),n&&!t&&0<u.length&&1<l+v.length&&at.uniqueSort(o)}return n&&(k=f,w=h),d}var y=0<v.length,b=0<g.length;return y?ct(t):t}return yt.prototype=x.filters=x.pseudos,x.setFilters=new yt,f=at.tokenize=function(t,e){var i,o,n,s,r,a,l,c=$[t+" "];if(c)return e?0:c.slice(0);for(r=t,a=[],l=x.preFilter;r;){for(s in i&&!(o=U.exec(r))||(o&&(r=r.slice(o[0].length)||r),a.push(n=[])),i=!1,(o=X.exec(r))&&(i=o.shift(),n.push({value:i,type:o[0].replace(W," ")}),r=r.slice(i.length)),x.filter)!(o=K[s].exec(r))||l[s]&&!(o=l[s](o))||(i=o.shift(),n.push({value:i,type:s,matches:o}),r=r.slice(i.length));if(!i)break}return e?r.length:r?at.error(t):$(t,a).slice(0)},h=at.compile=function(t,e){var i,o=[],n=[],s=E[t+" "];if(!s){for(i=(e=e||f(t)).length;i--;)(s=St(e[i]))[T]?o.push(s):n.push(s);(s=E(t,Tt(n,o))).selector=t}return s},m=at.select=function(t,e,i,o){var n,s,r,a,l,c="function"==typeof t&&t,d=!o&&f(t=c.selector||t);if(i=i||[],1===d.length){if(2<(s=d[0]=d[0].slice(0)).length&&"ID"===(r=s[0]).type&&9===e.nodeType&&S&&x.relative[s[1].type]){if(!(e=(x.find.ID(r.matches[0].replace(ot,u),e)||[])[0]))return i;c&&(e=e.parentNode),t=t.slice(s.shift().value.length)}for(n=K.needsContext.test(t)?0:s.length;n--&&(r=s[n],!x.relative[a=r.type]);)if((l=x.find[a])&&(o=l(r.matches[0].replace(ot,u),it.test(s[0].type)&&vt(e.parentNode)||e))){if(s.splice(n,1),!(t=o.length&&bt(s)))return M.apply(i,o),i;break}}return(c||h(t,d))(o,e,!S,i,!e||it.test(t)&&vt(e.parentNode)||e),i},p.sortStable=T.split("").sort(I).join("")===T,p.detectDuplicates=!!c,C(),p.sortDetached=dt(function(t){return 1&t.compareDocumentPosition(_.createElement("fieldset"))}),dt(function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")})||ut("type|href|height|width",function(t,e,i){if(!i)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)}),p.attributes&&dt(function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")})||ut("value",function(t,e,i){if(!i&&"input"===t.nodeName.toLowerCase())return t.defaultValue}),dt(function(t){return null==t.getAttribute("disabled")})||ut(L,function(t,e,i){var o;if(!i)return!0===t[e]?e.toLowerCase():(o=t.getAttributeNode(e))&&o.specified?o.value:null}),at}(_);T.find=f,T.expr=f.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=f.uniqueSort,T.text=f.getText,T.isXMLDoc=f.isXML,T.contains=f.contains,T.escapeSelector=f.escape;function C(t,e,i){for(var o=[],n=void 0!==i;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(n&&T(t).is(i))break;o.push(t)}return o}function k(t,e){for(var i=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&i.push(t);return i}var A=T.expr.match.needsContext;function $(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var E=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function P(t,i,o){return b(i)?T.grep(t,function(t,e){return!!i.call(t,e,t)!==o}):i.nodeType?T.grep(t,function(t){return t===i!==o}):"string"!=typeof i?T.grep(t,function(t){return-1<n.call(i,t)!==o}):T.filter(i,t,o)}T.filter=function(t,e,i){var o=e[0];return i&&(t=":not("+t+")"),1===e.length&&1===o.nodeType?T.find.matchesSelector(o,t)?[o]:[]:T.find.matches(t,T.grep(e,function(t){return 1===t.nodeType}))},T.fn.extend({find:function(t){var e,i,o=this.length,n=this;if("string"!=typeof t)return this.pushStack(T(t).filter(function(){for(e=0;e<o;e++)if(T.contains(n[e],this))return!0}));for(i=this.pushStack([]),e=0;e<o;e++)T.find(t,n[e],i);return 1<o?T.uniqueSort(i):i},filter:function(t){return this.pushStack(P(this,t||[],!1))},not:function(t){return this.pushStack(P(this,t||[],!0))},is:function(t){return!!P(this,"string"==typeof t&&A.test(t)?T(t):t||[],!1).length}});var I,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(t,e,i){var o,n;if(!t)return this;if(i=i||I,"string"!=typeof t)return t.nodeType?(this[0]=t,this.length=1,this):b(t)?void 0!==i.ready?i.ready(t):t(T):T.makeArray(t,this);if(!(o="<"===t[0]&&">"===t[t.length-1]&&3<=t.length?[null,t,null]:D.exec(t))||!o[1]&&e)return!e||e.jquery?(e||i).find(t):this.constructor(e).find(t);if(o[1]){if(e=e instanceof T?e[0]:e,T.merge(this,T.parseHTML(o[1],e&&e.nodeType?e.ownerDocument||e:S,!0)),E.test(o[1])&&T.isPlainObject(e))for(o in e)b(this[o])?this[o](e[o]):this.attr(o,e[o]);return this}return(n=S.getElementById(o[2]))&&(this[0]=n,this.length=1),this}).prototype=T.fn,I=T(S);var O=/^(?:parents|prev(?:Until|All))/,F={children:!0,contents:!0,next:!0,prev:!0};function M(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}T.fn.extend({has:function(t){var e=T(t,this),i=e.length;return this.filter(function(){for(var t=0;t<i;t++)if(T.contains(this,e[t]))return!0})},closest:function(t,e){var i,o=0,n=this.length,s=[],r="string"!=typeof t&&T(t);if(!A.test(t))for(;o<n;o++)for(i=this[o];i&&i!==e;i=i.parentNode)if(i.nodeType<11&&(r?-1<r.index(i):1===i.nodeType&&T.find.matchesSelector(i,t))){s.push(i);break}return this.pushStack(1<s.length?T.uniqueSort(s):s)},index:function(t){return t?"string"==typeof t?n.call(T(t),this[0]):n.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),T.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return C(t,"parentNode")},parentsUntil:function(t,e,i){return C(t,"parentNode",i)},next:function(t){return M(t,"nextSibling")},prev:function(t){return M(t,"previousSibling")},nextAll:function(t){return C(t,"nextSibling")},prevAll:function(t){return C(t,"previousSibling")},nextUntil:function(t,e,i){return C(t,"nextSibling",i)},prevUntil:function(t,e,i){return C(t,"previousSibling",i)},siblings:function(t){return k((t.parentNode||{}).firstChild,t)},children:function(t){return k(t.firstChild)},contents:function(t){return void 0!==t.contentDocument?t.contentDocument:($(t,"template")&&(t=t.content||t),T.merge([],t.childNodes))}},function(o,n){T.fn[o]=function(t,e){var i=T.map(this,n,t);return"Until"!==o.slice(-5)&&(e=t),e&&"string"==typeof e&&(i=T.filter(e,i)),1<this.length&&(F[o]||T.uniqueSort(i),O.test(o)&&i.reverse()),this.pushStack(i)}});var N=/[^\x20\t\r\n\f]+/g;function j(t){return t}function L(t){throw t}function R(t,e,i,o){var n;try{t&&b(n=t.promise)?n.call(t).done(e).fail(i):t&&b(n=t.then)?n.call(t,e,i):e.apply(void 0,[t].slice(o))}catch(t){i.apply(void 0,[t])}}T.Callbacks=function(o){var t,i;o="string"==typeof o?(t=o,i={},T.each(t.match(N)||[],function(t,e){i[e]=!0}),i):T.extend({},o);function n(){for(a=a||o.once,r=s=!0;c.length;d=-1)for(e=c.shift();++d<l.length;)!1===l[d].apply(e[0],e[1])&&o.stopOnFalse&&(d=l.length,e=!1);o.memory||(e=!1),s=!1,a&&(l=e?[]:"")}var s,e,r,a,l=[],c=[],d=-1,u={add:function(){return l&&(e&&!s&&(d=l.length-1,c.push(e)),function i(t){T.each(t,function(t,e){b(e)?o.unique&&u.has(e)||l.push(e):e&&e.length&&"string"!==w(e)&&i(e)})}(arguments),e&&!s&&n()),this},remove:function(){return T.each(arguments,function(t,e){for(var i;-1<(i=T.inArray(e,l,i));)l.splice(i,1),i<=d&&d--}),this},has:function(t){return t?-1<T.inArray(t,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return a=c=[],l=e="",this},disabled:function(){return!l},lock:function(){return a=c=[],e||s||(l=e=""),this},locked:function(){return!!a},fireWith:function(t,e){return a||(e=[t,(e=e||[]).slice?e.slice():e],c.push(e),s||n()),this},fire:function(){return u.fireWith(this,arguments),this},fired:function(){return!!r}};return u},T.extend({Deferred:function(t){var s=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],n="pending",r={state:function(){return n},always:function(){return a.done(arguments).fail(arguments),this},catch:function(t){return r.then(null,t)},pipe:function(){var n=arguments;return T.Deferred(function(o){T.each(s,function(t,e){var i=b(n[e[4]])&&n[e[4]];a[e[1]](function(){var t=i&&i.apply(this,arguments);t&&b(t.promise)?t.promise().progress(o.notify).done(o.resolve).fail(o.reject):o[e[0]+"With"](this,i?[t]:arguments)})}),n=null}).promise()},then:function(e,i,o){var l=0;function c(n,s,r,a){return function(){function t(){var t,e;if(!(n<l)){if((t=r.apply(i,o))===s.promise())throw new TypeError("Thenable self-resolution");e=t&&("object"==typeof t||"function"==typeof t)&&t.then,b(e)?a?e.call(t,c(l,s,j,a),c(l,s,L,a)):(l++,e.call(t,c(l,s,j,a),c(l,s,L,a),c(l,s,j,s.notifyWith))):(r!==j&&(i=void 0,o=[t]),(a||s.resolveWith)(i,o))}}var i=this,o=arguments,e=a?t:function(){try{t()}catch(t){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(t,e.stackTrace),l<=n+1&&(r!==L&&(i=void 0,o=[t]),s.rejectWith(i,o))}};n?e():(T.Deferred.getStackHook&&(e.stackTrace=T.Deferred.getStackHook()),_.setTimeout(e))}}return T.Deferred(function(t){s[0][3].add(c(0,t,b(o)?o:j,t.notifyWith)),s[1][3].add(c(0,t,b(e)?e:j)),s[2][3].add(c(0,t,b(i)?i:L))}).promise()},promise:function(t){return null!=t?T.extend(t,r):r}},a={};return T.each(s,function(t,e){var i=e[2],o=e[5];r[e[1]]=i.add,o&&i.add(function(){n=o},s[3-t][2].disable,s[3-t][3].disable,s[0][2].lock,s[0][3].lock),i.add(e[3].fire),a[e[0]]=function(){return a[e[0]+"With"](this===a?void 0:this,arguments),this},a[e[0]+"With"]=i.fireWith}),r.promise(a),t&&t.call(a,a),a},when:function(t){function e(e){return function(t){n[e]=this,s[e]=1<arguments.length?a.call(arguments):t,--i||r.resolveWith(n,s)}}var i=arguments.length,o=i,n=Array(o),s=a.call(arguments),r=T.Deferred();if(i<=1&&(R(t,r.done(e(o)).resolve,r.reject,!i),"pending"===r.state()||b(s[o]&&s[o].then)))return r.then();for(;o--;)R(s[o],e(o),r.reject);return r.promise()}});var H=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(t,e){_.console&&_.console.warn&&t&&H.test(t.name)&&_.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},T.readyException=function(t){_.setTimeout(function(){throw t})};var B=T.Deferred();function q(){S.removeEventListener("DOMContentLoaded",q),_.removeEventListener("load",q),T.ready()}T.fn.ready=function(t){return B.then(t).catch(function(t){T.readyException(t)}),this},T.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--T.readyWait:T.isReady)||(T.isReady=!0)!==t&&0<--T.readyWait||B.resolveWith(S,[T])}}),T.ready.then=B.then,"complete"===S.readyState||"loading"!==S.readyState&&!S.documentElement.doScroll?_.setTimeout(T.ready):(S.addEventListener("DOMContentLoaded",q),_.addEventListener("load",q));var z=function(t,e,i,o,n,s,r){var a=0,l=t.length,c=null==i;if("object"===w(i))for(a in n=!0,i)z(t,e,a,i[a],!0,s,r);else if(void 0!==o&&(n=!0,b(o)||(r=!0),c&&(e=r?(e.call(t,o),null):(c=e,function(t,e,i){return c.call(T(t),i)})),e))for(;a<l;a++)e(t[a],i,r?o:o.call(t[a],a,e(t[a],i)));return n?t:c?e.call(t):l?e(t[0],i):s},W=/^-ms-/,U=/-([a-z])/g;function X(t,e){return e.toUpperCase()}function Y(t){return t.replace(W,"ms-").replace(U,X)}function V(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType}function G(){this.expando=T.expando+G.uid++}G.uid=1,G.prototype={cache:function(t){var e=t[this.expando];return e||(e={},V(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,i){var o,n=this.cache(t);if("string"==typeof e)n[Y(e)]=i;else for(o in e)n[Y(o)]=e[o];return n},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][Y(e)]},access:function(t,e,i){return void 0===e||e&&"string"==typeof e&&void 0===i?this.get(t,e):(this.set(t,e,i),void 0!==i?i:e)},remove:function(t,e){var i,o=t[this.expando];if(void 0!==o){if(void 0!==e){i=(e=Array.isArray(e)?e.map(Y):(e=Y(e))in o?[e]:e.match(N)||[]).length;for(;i--;)delete o[e[i]]}void 0!==e&&!T.isEmptyObject(o)||(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!T.isEmptyObject(e)}};var K=new G,Z=new G,Q=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,J=/[A-Z]/g;function tt(t,e,i){var o,n;if(void 0===i&&1===t.nodeType)if(o="data-"+e.replace(J,"-$&").toLowerCase(),"string"==typeof(i=t.getAttribute(o))){try{i="true"===(n=i)||"false"!==n&&("null"===n?null:n===+n+""?+n:Q.test(n)?JSON.parse(n):n)}catch(t){}Z.set(t,e,i)}else i=void 0;return i}T.extend({hasData:function(t){return Z.hasData(t)||K.hasData(t)},data:function(t,e,i){return Z.access(t,e,i)},removeData:function(t,e){Z.remove(t,e)},_data:function(t,e,i){return K.access(t,e,i)},_removeData:function(t,e){K.remove(t,e)}}),T.fn.extend({data:function(i,t){var e,o,n,s=this[0],r=s&&s.attributes;if(void 0!==i)return"object"==typeof i?this.each(function(){Z.set(this,i)}):z(this,function(t){var e;if(s&&void 0===t)return void 0!==(e=Z.get(s,i))||void 0!==(e=tt(s,i))?e:void 0;this.each(function(){Z.set(this,i,t)})},null,t,1<arguments.length,null,!0);if(this.length&&(n=Z.get(s),1===s.nodeType&&!K.get(s,"hasDataAttrs"))){for(e=r.length;e--;)r[e]&&0===(o=r[e].name).indexOf("data-")&&(o=Y(o.slice(5)),tt(s,o,n[o]));K.set(s,"hasDataAttrs",!0)}return n},removeData:function(t){return this.each(function(){Z.remove(this,t)})}}),T.extend({queue:function(t,e,i){var o;if(t)return e=(e||"fx")+"queue",o=K.get(t,e),i&&(!o||Array.isArray(i)?o=K.access(t,e,T.makeArray(i)):o.push(i)),o||[]},dequeue:function(t,e){e=e||"fx";var i=T.queue(t,e),o=i.length,n=i.shift(),s=T._queueHooks(t,e);"inprogress"===n&&(n=i.shift(),o--),n&&("fx"===e&&i.unshift("inprogress"),delete s.stop,n.call(t,function(){T.dequeue(t,e)},s)),!o&&s&&s.empty.fire()},_queueHooks:function(t,e){var i=e+"queueHooks";return K.get(t,i)||K.access(t,i,{empty:T.Callbacks("once memory").add(function(){K.remove(t,[e+"queue",i])})})}}),T.fn.extend({queue:function(e,i){var t=2;return"string"!=typeof e&&(i=e,e="fx",t--),arguments.length<t?T.queue(this[0],e):void 0===i?this:this.each(function(){var t=T.queue(this,e,i);T._queueHooks(this,e),"fx"===e&&"inprogress"!==t[0]&&T.dequeue(this,e)})},dequeue:function(t){return this.each(function(){T.dequeue(this,t)})},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){function i(){--n||s.resolveWith(r,[r])}var o,n=1,s=T.Deferred(),r=this,a=this.length;for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(o=K.get(r[a],t+"queueHooks"))&&o.empty&&(n++,o.empty.add(i));return i(),s.promise(e)}});var et=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,it=new RegExp("^(?:([+-])=|)("+et+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],nt=S.documentElement,st=function(t){return T.contains(t.ownerDocument,t)},rt={composed:!0};nt.getRootNode&&(st=function(t){return T.contains(t.ownerDocument,t)||t.getRootNode(rt)===t.ownerDocument});function at(t,e,i,o){var n,s,r={};for(s in e)r[s]=t.style[s],t.style[s]=e[s];for(s in n=i.apply(t,o||[]),e)t.style[s]=r[s];return n}var lt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&st(t)&&"none"===T.css(t,"display")};function ct(t,e,i,o){var n,s,r=20,a=o?function(){return o.cur()}:function(){return T.css(t,e,"")},l=a(),c=i&&i[3]||(T.cssNumber[e]?"":"px"),d=t.nodeType&&(T.cssNumber[e]||"px"!==c&&+l)&&it.exec(T.css(t,e));if(d&&d[3]!==c){for(l/=2,c=c||d[3],d=+l||1;r--;)T.style(t,e,d+c),(1-s)*(1-(s=a()/l||.5))<=0&&(r=0),d/=s;d*=2,T.style(t,e,d+c),i=i||[]}return i&&(d=+d||+l||0,n=i[1]?d+(i[1]+1)*i[2]:+i[2],o&&(o.unit=c,o.start=d,o.end=n)),n}var dt={};function ut(t,e){for(var i,o,n,s,r,a,l,c=[],d=0,u=t.length;d<u;d++)(o=t[d]).style&&(i=o.style.display,e?("none"===i&&(c[d]=K.get(o,"display")||null,c[d]||(o.style.display="")),""===o.style.display&&lt(o)&&(c[d]=(l=r=s=void 0,r=(n=o).ownerDocument,a=n.nodeName,(l=dt[a])||(s=r.body.appendChild(r.createElement(a)),l=T.css(s,"display"),s.parentNode.removeChild(s),"none"===l&&(l="block"),dt[a]=l)))):"none"!==i&&(c[d]="none",K.set(o,"display",i)));for(d=0;d<u;d++)null!=c[d]&&(t[d].style.display=c[d]);return t}T.fn.extend({show:function(){return ut(this,!0)},hide:function(){return ut(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each(function(){lt(this)?T(this).show():T(this).hide()})}});var ht=/^(?:checkbox|radio)$/i,pt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,ft=/^$|^module$|\/(?:java|ecma)script/i,mt={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function gt(t,e){var i;return i=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&$(t,e)?T.merge([t],i):i}function vt(t,e){for(var i=0,o=t.length;i<o;i++)K.set(t[i],"globalEval",!e||K.get(e[i],"globalEval"))}mt.optgroup=mt.option,mt.tbody=mt.tfoot=mt.colgroup=mt.caption=mt.thead,mt.th=mt.td;var yt,bt,xt=/<|&#?\w+;/;function wt(t,e,i,o,n){for(var s,r,a,l,c,d,u=e.createDocumentFragment(),h=[],p=0,f=t.length;p<f;p++)if((s=t[p])||0===s)if("object"===w(s))T.merge(h,s.nodeType?[s]:s);else if(xt.test(s)){for(r=r||u.appendChild(e.createElement("div")),a=(pt.exec(s)||["",""])[1].toLowerCase(),l=mt[a]||mt._default,r.innerHTML=l[1]+T.htmlPrefilter(s)+l[2],d=l[0];d--;)r=r.lastChild;T.merge(h,r.childNodes),(r=u.firstChild).textContent=""}else h.push(e.createTextNode(s));for(u.textContent="",p=0;s=h[p++];)if(o&&-1<T.inArray(s,o))n&&n.push(s);else if(c=st(s),r=gt(u.appendChild(s),"script"),c&&vt(r),i)for(d=0;s=r[d++];)ft.test(s.type||"")&&i.push(s);return u}yt=S.createDocumentFragment().appendChild(S.createElement("div")),(bt=S.createElement("input")).setAttribute("type","radio"),bt.setAttribute("checked","checked"),bt.setAttribute("name","t"),yt.appendChild(bt),y.checkClone=yt.cloneNode(!0).cloneNode(!0).lastChild.checked,yt.innerHTML="<textarea>x</textarea>",y.noCloneChecked=!!yt.cloneNode(!0).lastChild.defaultValue;var Ct=/^key/,_t=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,St=/^([^.]*)(?:\.(.+)|)/;function Tt(){return!0}function kt(){return!1}function At(t,e){return t===function(){try{return S.activeElement}catch(t){}}()==("focus"===e)}function $t(t,e,i,o,n,s){var r,a;if("object"==typeof e){for(a in"string"!=typeof i&&(o=o||i,i=void 0),e)$t(t,a,i,o,e[a],s);return t}if(null==o&&null==n?(n=i,o=i=void 0):null==n&&("string"==typeof i?(n=o,o=void 0):(n=o,o=i,i=void 0)),!1===n)n=kt;else if(!n)return t;return 1===s&&(r=n,(n=function(t){return T().off(t),r.apply(this,arguments)}).guid=r.guid||(r.guid=T.guid++)),t.each(function(){T.event.add(this,e,n,o,i)})}function Et(t,n,s){s?(K.set(t,n,!1),T.event.add(t,n,{namespace:!1,handler:function(t){var e,i,o=K.get(this,n);if(1&t.isTrigger&&this[n]){if(o.length)(T.event.special[n]||{}).delegateType&&t.stopPropagation();else if(o=a.call(arguments),K.set(this,n,o),e=s(this,n),this[n](),o!==(i=K.get(this,n))||e?K.set(this,n,!1):i={},o!==i)return t.stopImmediatePropagation(),t.preventDefault(),i.value}else o.length&&(K.set(this,n,{value:T.event.trigger(T.extend(o[0],T.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===K.get(t,n)&&T.event.add(t,n,Tt)}T.event={global:{},add:function(e,t,i,o,n){var s,r,a,l,c,d,u,h,p,f,m,g=K.get(e);if(g)for(i.handler&&(i=(s=i).handler,n=s.selector),n&&T.find.matchesSelector(nt,n),i.guid||(i.guid=T.guid++),(l=g.events)||(l=g.events={}),(r=g.handle)||(r=g.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),c=(t=(t||"").match(N)||[""]).length;c--;)p=m=(a=St.exec(t[c])||[])[1],f=(a[2]||"").split(".").sort(),p&&(u=T.event.special[p]||{},p=(n?u.delegateType:u.bindType)||p,u=T.event.special[p]||{},d=T.extend({type:p,origType:m,data:o,handler:i,guid:i.guid,selector:n,needsContext:n&&T.expr.match.needsContext.test(n),namespace:f.join(".")},s),(h=l[p])||((h=l[p]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,o,f,r)||e.addEventListener&&e.addEventListener(p,r)),u.add&&(u.add.call(e,d),d.handler.guid||(d.handler.guid=i.guid)),n?h.splice(h.delegateCount++,0,d):h.push(d),T.event.global[p]=!0)},remove:function(t,e,i,o,n){var s,r,a,l,c,d,u,h,p,f,m,g=K.hasData(t)&&K.get(t);if(g&&(l=g.events)){for(c=(e=(e||"").match(N)||[""]).length;c--;)if(p=m=(a=St.exec(e[c])||[])[1],f=(a[2]||"").split(".").sort(),p){for(u=T.event.special[p]||{},h=l[p=(o?u.delegateType:u.bindType)||p]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),r=s=h.length;s--;)d=h[s],!n&&m!==d.origType||i&&i.guid!==d.guid||a&&!a.test(d.namespace)||o&&o!==d.selector&&("**"!==o||!d.selector)||(h.splice(s,1),d.selector&&h.delegateCount--,u.remove&&u.remove.call(t,d));r&&!h.length&&(u.teardown&&!1!==u.teardown.call(t,f,g.handle)||T.removeEvent(t,p,g.handle),delete l[p])}else for(p in l)T.event.remove(t,p+e[c],i,o,!0);T.isEmptyObject(l)&&K.remove(t,"handle events")}},dispatch:function(t){var e,i,o,n,s,r,a=T.event.fix(t),l=new Array(arguments.length),c=(K.get(this,"events")||{})[a.type]||[],d=T.event.special[a.type]||{};for(l[0]=a,e=1;e<arguments.length;e++)l[e]=arguments[e];if(a.delegateTarget=this,!d.preDispatch||!1!==d.preDispatch.call(this,a)){for(r=T.event.handlers.call(this,a,c),e=0;(n=r[e++])&&!a.isPropagationStopped();)for(a.currentTarget=n.elem,i=0;(s=n.handlers[i++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!1!==s.namespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,void 0!==(o=((T.event.special[s.origType]||{}).handle||s.handler).apply(n.elem,l))&&!1===(a.result=o)&&(a.preventDefault(),a.stopPropagation()));return d.postDispatch&&d.postDispatch.call(this,a),a.result}},handlers:function(t,e){var i,o,n,s,r,a=[],l=e.delegateCount,c=t.target;if(l&&c.nodeType&&!("click"===t.type&&1<=t.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==t.type||!0!==c.disabled)){for(s=[],r={},i=0;i<l;i++)void 0===r[n=(o=e[i]).selector+" "]&&(r[n]=o.needsContext?-1<T(n,this).index(c):T.find(n,this,null,[c]).length),r[n]&&s.push(o);s.length&&a.push({elem:c,handlers:s})}return c=this,l<e.length&&a.push({elem:c,handlers:e.slice(l)}),a},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:b(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(t){return t[T.expando]?t:new T.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return ht.test(e.type)&&e.click&&$(e,"input")&&Et(e,"click",Tt),!1},trigger:function(t){var e=this||t;return ht.test(e.type)&&e.click&&$(e,"input")&&Et(e,"click"),!0},_default:function(t){var e=t.target;return ht.test(e.type)&&e.click&&$(e,"input")&&K.get(e,"click")||$(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},T.removeEvent=function(t,e,i){t.removeEventListener&&t.removeEventListener(e,i)},T.Event=function(t,e){if(!(this instanceof T.Event))return new T.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Tt:kt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&T.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:kt,isPropagationStopped:kt,isImmediatePropagationStopped:kt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Tt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Tt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Tt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(t){var e=t.button;return null==t.which&&Ct.test(t.type)?null!=t.charCode?t.charCode:t.keyCode:!t.which&&void 0!==e&&_t.test(t.type)?1&e?1:2&e?3:4&e?2:0:t.which}},T.event.addProp),T.each({focus:"focusin",blur:"focusout"},function(t,e){T.event.special[t]={setup:function(){return Et(this,t,At),!1},trigger:function(){return Et(this,t),!0},delegateType:e}}),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(t,n){T.event.special[t]={delegateType:n,bindType:n,handle:function(t){var e,i=t.relatedTarget,o=t.handleObj;return i&&(i===this||T.contains(this,i))||(t.type=o.origType,e=o.handler.apply(this,arguments),t.type=n),e}}}),T.fn.extend({on:function(t,e,i,o){return $t(this,t,e,i,o)},one:function(t,e,i,o){return $t(this,t,e,i,o,1)},off:function(t,e,i){var o,n;if(t&&t.preventDefault&&t.handleObj)return o=t.handleObj,T(t.delegateTarget).off(o.namespace?o.origType+"."+o.namespace:o.origType,o.selector,o.handler),this;if("object"!=typeof t)return!1!==e&&"function"!=typeof e||(i=e,e=void 0),!1===i&&(i=kt),this.each(function(){T.event.remove(this,t,i,e)});for(n in t)this.off(n,e,t[n]);return this}});var Pt=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,It=/<script|<style|<link/i,Dt=/checked\s*(?:[^=]|=\s*.checked.)/i,Ot=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ft(t,e){return $(t,"table")&&$(11!==e.nodeType?e:e.firstChild,"tr")&&T(t).children("tbody")[0]||t}function Mt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Nt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function jt(t,e){var i,o,n,s,r,a,l,c;if(1===e.nodeType){if(K.hasData(t)&&(s=K.access(t),r=K.set(e,s),c=s.events))for(n in delete r.handle,r.events={},c)for(i=0,o=c[n].length;i<o;i++)T.event.add(e,n,c[n][i]);Z.hasData(t)&&(a=Z.access(t),l=T.extend({},a),Z.set(e,l))}}function Lt(i,o,n,s){o=g.apply([],o);var t,e,r,a,l,c,d=0,u=i.length,h=u-1,p=o[0],f=b(p);if(f||1<u&&"string"==typeof p&&!y.checkClone&&Dt.test(p))return i.each(function(t){var e=i.eq(t);f&&(o[0]=p.call(this,t,e.html())),Lt(e,o,n,s)});if(u&&(e=(t=wt(o,i[0].ownerDocument,!1,i,s)).firstChild,1===t.childNodes.length&&(t=e),e||s)){for(a=(r=T.map(gt(t,"script"),Mt)).length;d<u;d++)l=t,d!==h&&(l=T.clone(l,!0,!0),a&&T.merge(r,gt(l,"script"))),n.call(i[d],l,d);if(a)for(c=r[r.length-1].ownerDocument,T.map(r,Nt),d=0;d<a;d++)l=r[d],ft.test(l.type||"")&&!K.access(l,"globalEval")&&T.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?T._evalUrl&&!l.noModule&&T._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")}):x(l.textContent.replace(Ot,""),l,c))}return i}function Rt(t,e,i){for(var o,n=e?T.filter(e,t):t,s=0;null!=(o=n[s]);s++)i||1!==o.nodeType||T.cleanData(gt(o)),o.parentNode&&(i&&st(o)&&vt(gt(o,"script")),o.parentNode.removeChild(o));return t}T.extend({htmlPrefilter:function(t){return t.replace(Pt,"<$1></$2>")},clone:function(t,e,i){var o,n,s,r,a,l,c,d=t.cloneNode(!0),u=st(t);if(!(y.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||T.isXMLDoc(t)))for(r=gt(d),o=0,n=(s=gt(t)).length;o<n;o++)a=s[o],l=r[o],"input"===(c=l.nodeName.toLowerCase())&&ht.test(a.type)?l.checked=a.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=a.defaultValue);if(e)if(i)for(s=s||gt(t),r=r||gt(d),o=0,n=s.length;o<n;o++)jt(s[o],r[o]);else jt(t,d);return 0<(r=gt(d,"script")).length&&vt(r,!u&&gt(t,"script")),d},cleanData:function(t){for(var e,i,o,n=T.event.special,s=0;void 0!==(i=t[s]);s++)if(V(i)){if(e=i[K.expando]){if(e.events)for(o in e.events)n[o]?T.event.remove(i,o):T.removeEvent(i,o,e.handle);i[K.expando]=void 0}i[Z.expando]&&(i[Z.expando]=void 0)}}}),T.fn.extend({detach:function(t){return Rt(this,t,!0)},remove:function(t){return Rt(this,t)},text:function(t){return z(this,function(t){return void 0===t?T.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)})},null,t,arguments.length)},append:function(){return Lt(this,arguments,function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ft(this,t).appendChild(t)})},prepend:function(){return Lt(this,arguments,function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Ft(this,t);e.insertBefore(t,e.firstChild)}})},before:function(){return Lt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this)})},after:function(){return Lt(this,arguments,function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)})},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(T.cleanData(gt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map(function(){return T.clone(this,t,e)})},html:function(t){return z(this,function(t){var e=this[0]||{},i=0,o=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!It.test(t)&&!mt[(pt.exec(t)||["",""])[1].toLowerCase()]){t=T.htmlPrefilter(t);try{for(;i<o;i++)1===(e=this[i]||{}).nodeType&&(T.cleanData(gt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)},null,t,arguments.length)},replaceWith:function(){var i=[];return Lt(this,arguments,function(t){var e=this.parentNode;T.inArray(this,i)<0&&(T.cleanData(gt(this)),e&&e.replaceChild(t,this))},i)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(t,r){T.fn[t]=function(t){for(var e,i=[],o=T(t),n=o.length-1,s=0;s<=n;s++)e=s===n?this:this.clone(!0),T(o[s])[r](e),l.apply(i,e.get());return this.pushStack(i)}});var Ht,Bt,qt,zt,Wt,Ut,Xt,Yt=new RegExp("^("+et+")(?!px)[a-z%]+$","i"),Vt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=_),e.getComputedStyle(t)},Gt=new RegExp(ot.join("|"),"i");function Kt(){if(Xt){Ut.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Xt.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",nt.appendChild(Ut).appendChild(Xt);var t=_.getComputedStyle(Xt);Ht="1%"!==t.top,Wt=12===Zt(t.marginLeft),Xt.style.right="60%",zt=36===Zt(t.right),Bt=36===Zt(t.width),Xt.style.position="absolute",qt=12===Zt(Xt.offsetWidth/3),nt.removeChild(Ut),Xt=null}}function Zt(t){return Math.round(parseFloat(t))}function Qt(t,e,i){var o,n,s,r,a=t.style;return(i=i||Vt(t))&&(""!==(r=i.getPropertyValue(e)||i[e])||st(t)||(r=T.style(t,e)),!y.pixelBoxStyles()&&Yt.test(r)&&Gt.test(e)&&(o=a.width,n=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=r,r=i.width,a.width=o,a.minWidth=n,a.maxWidth=s)),void 0!==r?r+"":r}function Jt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}Ut=S.createElement("div"),(Xt=S.createElement("div")).style&&(Xt.style.backgroundClip="content-box",Xt.cloneNode(!0).style.backgroundClip="",y.clearCloneStyle="content-box"===Xt.style.backgroundClip,T.extend(y,{boxSizingReliable:function(){return Kt(),Bt},pixelBoxStyles:function(){return Kt(),zt},pixelPosition:function(){return Kt(),Ht},reliableMarginLeft:function(){return Kt(),Wt},scrollboxSize:function(){return Kt(),qt}}));var te=["Webkit","Moz","ms"],ee=S.createElement("div").style,ie={};function oe(t){var e=T.cssProps[t]||ie[t];return e||(t in ee?t:ie[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),i=te.length;i--;)if((t=te[i]+e)in ee)return t}(t)||t)}var ne=/^(none|table(?!-c[ea]).+)/,se=/^--/,re={position:"absolute",visibility:"hidden",display:"block"},ae={letterSpacing:"0",fontWeight:"400"};function le(t,e,i){var o=it.exec(e);return o?Math.max(0,o[2]-(i||0))+(o[3]||"px"):e}function ce(t,e,i,o,n,s){var r="width"===e?1:0,a=0,l=0;if(i===(o?"border":"content"))return 0;for(;r<4;r+=2)"margin"===i&&(l+=T.css(t,i+ot[r],!0,n)),o?("content"===i&&(l-=T.css(t,"padding"+ot[r],!0,n)),"margin"!==i&&(l-=T.css(t,"border"+ot[r]+"Width",!0,n))):(l+=T.css(t,"padding"+ot[r],!0,n),"padding"!==i?l+=T.css(t,"border"+ot[r]+"Width",!0,n):a+=T.css(t,"border"+ot[r]+"Width",!0,n));return!o&&0<=s&&(l+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-s-l-a-.5))||0),l}function de(t,e,i){var o=Vt(t),n=(!y.boxSizingReliable()||i)&&"border-box"===T.css(t,"boxSizing",!1,o),s=n,r=Qt(t,e,o),a="offset"+e[0].toUpperCase()+e.slice(1);if(Yt.test(r)){if(!i)return r;r="auto"}return(!y.boxSizingReliable()&&n||"auto"===r||!parseFloat(r)&&"inline"===T.css(t,"display",!1,o))&&t.getClientRects().length&&(n="border-box"===T.css(t,"boxSizing",!1,o),(s=a in t)&&(r=t[a])),(r=parseFloat(r)||0)+ce(t,e,i||(n?"border":"content"),s,o,r)+"px"}function ue(t,e,i,o,n){return new ue.prototype.init(t,e,i,o,n)}T.extend({cssHooks:{opacity:{get:function(t,e){if(e){var i=Qt(t,"opacity");return""===i?"1":i}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,i,o){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var n,s,r,a=Y(e),l=se.test(e),c=t.style;if(l||(e=oe(a)),r=T.cssHooks[e]||T.cssHooks[a],void 0===i)return r&&"get"in r&&void 0!==(n=r.get(t,!1,o))?n:c[e];"string"===(s=typeof i)&&(n=it.exec(i))&&n[1]&&(i=ct(t,e,n),s="number"),null!=i&&i==i&&("number"!==s||l||(i+=n&&n[3]||(T.cssNumber[a]?"":"px")),y.clearCloneStyle||""!==i||0!==e.indexOf("background")||(c[e]="inherit"),r&&"set"in r&&void 0===(i=r.set(t,i,o))||(l?c.setProperty(e,i):c[e]=i))}},css:function(t,e,i,o){var n,s,r,a=Y(e);return se.test(e)||(e=oe(a)),(r=T.cssHooks[e]||T.cssHooks[a])&&"get"in r&&(n=r.get(t,!0,i)),void 0===n&&(n=Qt(t,e,o)),"normal"===n&&e in ae&&(n=ae[e]),""===i||i?(s=parseFloat(n),!0===i||isFinite(s)?s||0:n):n}}),T.each(["height","width"],function(t,l){T.cssHooks[l]={get:function(t,e,i){if(e)return!ne.test(T.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?de(t,l,i):at(t,re,function(){return de(t,l,i)})},set:function(t,e,i){var o,n=Vt(t),s=!y.scrollboxSize()&&"absolute"===n.position,r=(s||i)&&"border-box"===T.css(t,"boxSizing",!1,n),a=i?ce(t,l,i,r,n):0;return r&&s&&(a-=Math.ceil(t["offset"+l[0].toUpperCase()+l.slice(1)]-parseFloat(n[l])-ce(t,l,"border",!1,n)-.5)),a&&(o=it.exec(e))&&"px"!==(o[3]||"px")&&(t.style[l]=e,e=T.css(t,l)),le(0,e,a)}}}),T.cssHooks.marginLeft=Jt(y.reliableMarginLeft,function(t,e){if(e)return(parseFloat(Qt(t,"marginLeft"))||t.getBoundingClientRect().left-at(t,{marginLeft:0},function(){return t.getBoundingClientRect().left}))+"px"}),T.each({margin:"",padding:"",border:"Width"},function(n,s){T.cssHooks[n+s]={expand:function(t){for(var e=0,i={},o="string"==typeof t?t.split(" "):[t];e<4;e++)i[n+ot[e]+s]=o[e]||o[e-2]||o[0];return i}},"margin"!==n&&(T.cssHooks[n+s].set=le)}),T.fn.extend({css:function(t,e){return z(this,function(t,e,i){var o,n,s={},r=0;if(Array.isArray(e)){for(o=Vt(t),n=e.length;r<n;r++)s[e[r]]=T.css(t,e[r],!1,o);return s}return void 0!==i?T.style(t,e,i):T.css(t,e)},t,e,1<arguments.length)}}),((T.Tween=ue).prototype={constructor:ue,init:function(t,e,i,o,n,s){this.elem=t,this.prop=i,this.easing=n||T.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=o,this.unit=s||(T.cssNumber[i]?"":"px")},cur:function(){var t=ue.propHooks[this.prop];return t&&t.get?t.get(this):ue.propHooks._default.get(this)},run:function(t){var e,i=ue.propHooks[this.prop];return this.options.duration?this.pos=e=T.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),i&&i.set?i.set(this):ue.propHooks._default.set(this),this}}).init.prototype=ue.prototype,(ue.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=T.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){T.fx.step[t.prop]?T.fx.step[t.prop](t):1!==t.elem.nodeType||!T.cssHooks[t.prop]&&null==t.elem.style[oe(t.prop)]?t.elem[t.prop]=t.now:T.style(t.elem,t.prop,t.now+t.unit)}}}).scrollTop=ue.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},T.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},T.fx=ue.prototype.init,T.fx.step={};var he,pe,fe,me,ge=/^(?:toggle|show|hide)$/,ve=/queueHooks$/;function ye(){pe&&(!1===S.hidden&&_.requestAnimationFrame?_.requestAnimationFrame(ye):_.setTimeout(ye,T.fx.interval),T.fx.tick())}function be(){return _.setTimeout(function(){he=void 0}),he=Date.now()}function xe(t,e){var i,o=0,n={height:t};for(e=e?1:0;o<4;o+=2-e)n["margin"+(i=ot[o])]=n["padding"+i]=t;return e&&(n.opacity=n.width=t),n}function we(t,e,i){for(var o,n=(Ce.tweeners[e]||[]).concat(Ce.tweeners["*"]),s=0,r=n.length;s<r;s++)if(o=n[s].call(i,e,t))return o}function Ce(s,t,e){var i,r,o=0,n=Ce.prefilters.length,a=T.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=he||be(),e=Math.max(0,c.startTime+c.duration-t),i=1-(e/c.duration||0),o=0,n=c.tweens.length;o<n;o++)c.tweens[o].run(i);return a.notifyWith(s,[c,i,e]),i<1&&n?e:(n||a.notifyWith(s,[c,1,0]),a.resolveWith(s,[c]),!1)},c=a.promise({elem:s,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},e),originalProperties:t,originalOptions:e,startTime:he||be(),duration:e.duration,tweens:[],createTween:function(t,e){var i=T.Tween(s,c.opts,t,e,c.opts.specialEasing[t]||c.opts.easing);return c.tweens.push(i),i},stop:function(t){var e=0,i=t?c.tweens.length:0;if(r)return this;for(r=!0;e<i;e++)c.tweens[e].run(1);return t?(a.notifyWith(s,[c,1,0]),a.resolveWith(s,[c,t])):a.rejectWith(s,[c,t]),this}}),d=c.props;for(!function(t,e){var i,o,n,s,r;for(i in t)if(n=e[o=Y(i)],s=t[i],Array.isArray(s)&&(n=s[1],s=t[i]=s[0]),i!==o&&(t[o]=s,delete t[i]),(r=T.cssHooks[o])&&"expand"in r)for(i in s=r.expand(s),delete t[o],s)i in t||(t[i]=s[i],e[i]=n);else e[o]=n}(d,c.opts.specialEasing);o<n;o++)if(i=Ce.prefilters[o].call(c,s,d,c.opts))return b(i.stop)&&(T._queueHooks(c.elem,c.opts.queue).stop=i.stop.bind(i)),i;return T.map(d,we,c),b(c.opts.start)&&c.opts.start.call(s,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),T.fx.timer(T.extend(l,{elem:s,anim:c,queue:c.opts.queue})),c}T.Animation=T.extend(Ce,{tweeners:{"*":[function(t,e){var i=this.createTween(t,e);return ct(i.elem,t,it.exec(e),i),i}]},tweener:function(t,e){for(var i,o=0,n=(t=b(t)?(e=t,["*"]):t.match(N)).length;o<n;o++)i=t[o],Ce.tweeners[i]=Ce.tweeners[i]||[],Ce.tweeners[i].unshift(e)},prefilters:[function(t,e,i){var o,n,s,r,a,l,c,d,u="width"in e||"height"in e,h=this,p={},f=t.style,m=t.nodeType&&lt(t),g=K.get(t,"fxshow");for(o in i.queue||(null==(r=T._queueHooks(t,"fx")).unqueued&&(r.unqueued=0,a=r.empty.fire,r.empty.fire=function(){r.unqueued||a()}),r.unqueued++,h.always(function(){h.always(function(){r.unqueued--,T.queue(t,"fx").length||r.empty.fire()})})),e)if(n=e[o],ge.test(n)){if(delete e[o],s=s||"toggle"===n,n===(m?"hide":"show")){if("show"!==n||!g||void 0===g[o])continue;m=!0}p[o]=g&&g[o]||T.style(t,o)}if((l=!T.isEmptyObject(e))||!T.isEmptyObject(p))for(o in u&&1===t.nodeType&&(i.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=K.get(t,"display")),"none"===(d=T.css(t,"display"))&&(c?d=c:(ut([t],!0),c=t.style.display||c,d=T.css(t,"display"),ut([t]))),("inline"===d||"inline-block"===d&&null!=c)&&"none"===T.css(t,"float")&&(l||(h.done(function(){f.display=c}),null==c&&(d=f.display,c="none"===d?"":d)),f.display="inline-block")),i.overflow&&(f.overflow="hidden",h.always(function(){f.overflow=i.overflow[0],f.overflowX=i.overflow[1],f.overflowY=i.overflow[2]})),l=!1,p)l||(g?"hidden"in g&&(m=g.hidden):g=K.access(t,"fxshow",{display:c}),s&&(g.hidden=!m),m&&ut([t],!0),h.done(function(){for(o in m||ut([t]),K.remove(t,"fxshow"),p)T.style(t,o,p[o])})),l=we(m?g[o]:0,o,h),o in g||(g[o]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(t,e){e?Ce.prefilters.unshift(t):Ce.prefilters.push(t)}}),T.speed=function(t,e,i){var o=t&&"object"==typeof t?T.extend({},t):{complete:i||!i&&e||b(t)&&t,duration:t,easing:i&&e||e&&!b(e)&&e};return T.fx.off?o.duration=0:"number"!=typeof o.duration&&(o.duration in T.fx.speeds?o.duration=T.fx.speeds[o.duration]:o.duration=T.fx.speeds._default),null!=o.queue&&!0!==o.queue||(o.queue="fx"),o.old=o.complete,o.complete=function(){b(o.old)&&o.old.call(this),o.queue&&T.dequeue(this,o.queue)},o},T.fn.extend({fadeTo:function(t,e,i,o){return this.filter(lt).css("opacity",0).show().end().animate({opacity:e},t,i,o)},animate:function(e,t,i,o){function n(){var t=Ce(this,T.extend({},e),r);(s||K.get(this,"finish"))&&t.stop(!0)}var s=T.isEmptyObject(e),r=T.speed(t,i,o);return n.finish=n,s||!1===r.queue?this.each(n):this.queue(r.queue,n)},stop:function(n,t,s){function r(t){var e=t.stop;delete t.stop,e(s)}return"string"!=typeof n&&(s=t,t=n,n=void 0),t&&!1!==n&&this.queue(n||"fx",[]),this.each(function(){var t=!0,e=null!=n&&n+"queueHooks",i=T.timers,o=K.get(this);if(e)o[e]&&o[e].stop&&r(o[e]);else for(e in o)o[e]&&o[e].stop&&ve.test(e)&&r(o[e]);for(e=i.length;e--;)i[e].elem!==this||null!=n&&i[e].queue!==n||(i[e].anim.stop(s),t=!1,i.splice(e,1));!t&&s||T.dequeue(this,n)})},finish:function(r){return!1!==r&&(r=r||"fx"),this.each(function(){var t,e=K.get(this),i=e[r+"queue"],o=e[r+"queueHooks"],n=T.timers,s=i?i.length:0;for(e.finish=!0,T.queue(this,r,[]),o&&o.stop&&o.stop.call(this,!0),t=n.length;t--;)n[t].elem===this&&n[t].queue===r&&(n[t].anim.stop(!0),n.splice(t,1));for(t=0;t<s;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete e.finish})}}),T.each(["toggle","show","hide"],function(t,o){var n=T.fn[o];T.fn[o]=function(t,e,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(xe(o,!0),t,e,i)}}),T.each({slideDown:xe("show"),slideUp:xe("hide"),slideToggle:xe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(t,o){T.fn[t]=function(t,e,i){return this.animate(o,t,e,i)}}),T.timers=[],T.fx.tick=function(){var t,e=0,i=T.timers;for(he=Date.now();e<i.length;e++)(t=i[e])()||i[e]!==t||i.splice(e--,1);i.length||T.fx.stop(),he=void 0},T.fx.timer=function(t){T.timers.push(t),T.fx.start()},T.fx.interval=13,T.fx.start=function(){pe||(pe=!0,ye())},T.fx.stop=function(){pe=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(o,t){return o=T.fx&&T.fx.speeds[o]||o,t=t||"fx",this.queue(t,function(t,e){var i=_.setTimeout(t,o);e.stop=function(){_.clearTimeout(i)}})},fe=S.createElement("input"),me=S.createElement("select").appendChild(S.createElement("option")),fe.type="checkbox",y.checkOn=""!==fe.value,y.optSelected=me.selected,(fe=S.createElement("input")).value="t",fe.type="radio",y.radioValue="t"===fe.value;var _e,Se=T.expr.attrHandle;T.fn.extend({attr:function(t,e){return z(this,T.attr,t,e,1<arguments.length)},removeAttr:function(t){return this.each(function(){T.removeAttr(this,t)})}}),T.extend({attr:function(t,e,i){var o,n,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===t.getAttribute?T.prop(t,e,i):(1===s&&T.isXMLDoc(t)||(n=T.attrHooks[e.toLowerCase()]||(T.expr.match.bool.test(e)?_e:void 0)),void 0!==i?null===i?void T.removeAttr(t,e):n&&"set"in n&&void 0!==(o=n.set(t,i,e))?o:(t.setAttribute(e,i+""),i):n&&"get"in n&&null!==(o=n.get(t,e))?o:null==(o=T.find.attr(t,e))?void 0:o)},attrHooks:{type:{set:function(t,e){if(!y.radioValue&&"radio"===e&&$(t,"input")){var i=t.value;return t.setAttribute("type",e),i&&(t.value=i),e}}}},removeAttr:function(t,e){var i,o=0,n=e&&e.match(N);if(n&&1===t.nodeType)for(;i=n[o++];)t.removeAttribute(i)}}),_e={set:function(t,e,i){return!1===e?T.removeAttr(t,i):t.setAttribute(i,i),i}},T.each(T.expr.match.bool.source.match(/\w+/g),function(t,e){var r=Se[e]||T.find.attr;Se[e]=function(t,e,i){var o,n,s=e.toLowerCase();return i||(n=Se[s],Se[s]=o,o=null!=r(t,e,i)?s:null,Se[s]=n),o}});var Te=/^(?:input|select|textarea|button)$/i,ke=/^(?:a|area)$/i;function Ae(t){return(t.match(N)||[]).join(" ")}function $e(t){return t.getAttribute&&t.getAttribute("class")||""}function Ee(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(N)||[]}T.fn.extend({prop:function(t,e){return z(this,T.prop,t,e,1<arguments.length)},removeProp:function(t){return this.each(function(){delete this[T.propFix[t]||t]})}}),T.extend({prop:function(t,e,i){var o,n,s=t.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&T.isXMLDoc(t)||(e=T.propFix[e]||e,n=T.propHooks[e]),void 0!==i?n&&"set"in n&&void 0!==(o=n.set(t,i,e))?o:t[e]=i:n&&"get"in n&&null!==(o=n.get(t,e))?o:t[e]},propHooks:{tabIndex:{get:function(t){var e=T.find.attr(t,"tabindex");return e?parseInt(e,10):Te.test(t.nodeName)||ke.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),y.optSelected||(T.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){T.propFix[this.toLowerCase()]=this}),T.fn.extend({addClass:function(e){var t,i,o,n,s,r,a,l=0;if(b(e))return this.each(function(t){T(this).addClass(e.call(this,t,$e(this)))});if((t=Ee(e)).length)for(;i=this[l++];)if(n=$e(i),o=1===i.nodeType&&" "+Ae(n)+" "){for(r=0;s=t[r++];)o.indexOf(" "+s+" ")<0&&(o+=s+" ");n!==(a=Ae(o))&&i.setAttribute("class",a)}return this},removeClass:function(e){var t,i,o,n,s,r,a,l=0;if(b(e))return this.each(function(t){T(this).removeClass(e.call(this,t,$e(this)))});if(!arguments.length)return this.attr("class","");if((t=Ee(e)).length)for(;i=this[l++];)if(n=$e(i),o=1===i.nodeType&&" "+Ae(n)+" "){for(r=0;s=t[r++];)for(;-1<o.indexOf(" "+s+" ");)o=o.replace(" "+s+" "," ");n!==(a=Ae(o))&&i.setAttribute("class",a)}return this},toggleClass:function(n,e){var s=typeof n,r="string"==s||Array.isArray(n);return"boolean"==typeof e&&r?e?this.addClass(n):this.removeClass(n):b(n)?this.each(function(t){T(this).toggleClass(n.call(this,t,$e(this),e),e)}):this.each(function(){var t,e,i,o;if(r)for(e=0,i=T(this),o=Ee(n);t=o[e++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==n&&"boolean"!=s||((t=$e(this))&&K.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===n?"":K.get(this,"__className__")||""))})},hasClass:function(t){var e,i,o=0;for(e=" "+t+" ";i=this[o++];)if(1===i.nodeType&&-1<(" "+Ae($e(i))+" ").indexOf(e))return!0;return!1}});var Pe=/\r/g;T.fn.extend({val:function(i){var o,t,n,e=this[0];return arguments.length?(n=b(i),this.each(function(t){var e;1===this.nodeType&&(null==(e=n?i.call(this,t,T(this).val()):i)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=T.map(e,function(t){return null==t?"":t+""})),(o=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in o&&void 0!==o.set(this,e,"value")||(this.value=e))})):e?(o=T.valHooks[e.type]||T.valHooks[e.nodeName.toLowerCase()])&&"get"in o&&void 0!==(t=o.get(e,"value"))?t:"string"==typeof(t=e.value)?t.replace(Pe,""):null==t?"":t:void 0}}),T.extend({valHooks:{option:{get:function(t){var e=T.find.attr(t,"value");return null!=e?e:Ae(T.text(t))}},select:{get:function(t){var e,i,o,n=t.options,s=t.selectedIndex,r="select-one"===t.type,a=r?null:[],l=r?s+1:n.length;for(o=s<0?l:r?s:0;o<l;o++)if(((i=n[o]).selected||o===s)&&!i.disabled&&(!i.parentNode.disabled||!$(i.parentNode,"optgroup"))){if(e=T(i).val(),r)return e;a.push(e)}return a},set:function(t,e){for(var i,o,n=t.options,s=T.makeArray(e),r=n.length;r--;)((o=n[r]).selected=-1<T.inArray(T.valHooks.option.get(o),s))&&(i=!0);return i||(t.selectedIndex=-1),s}}}}),T.each(["radio","checkbox"],function(){T.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=-1<T.inArray(T(t).val(),e)}},y.checkOn||(T.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}),y.focusin="onfocusin"in _;function Ie(t){t.stopPropagation()}var De=/^(?:focusinfocus|focusoutblur)$/;T.extend(T.event,{trigger:function(t,e,i,o){var n,s,r,a,l,c,d,u,h=[i||S],p=v.call(t,"type")?t.type:t,f=v.call(t,"namespace")?t.namespace.split("."):[];if(s=u=r=i=i||S,3!==i.nodeType&&8!==i.nodeType&&!De.test(p+T.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),l=p.indexOf(":")<0&&"on"+p,(t=t[T.expando]?t:new T.Event(p,"object"==typeof t&&t)).isTrigger=o?2:3,t.namespace=f.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=i),e=null==e?[t]:T.makeArray(e,[t]),d=T.event.special[p]||{},o||!d.trigger||!1!==d.trigger.apply(i,e))){if(!o&&!d.noBubble&&!m(i)){for(a=d.delegateType||p,De.test(a+p)||(s=s.parentNode);s;s=s.parentNode)h.push(s),r=s;r===(i.ownerDocument||S)&&h.push(r.defaultView||r.parentWindow||_)}for(n=0;(s=h[n++])&&!t.isPropagationStopped();)u=s,t.type=1<n?a:d.bindType||p,(c=(K.get(s,"events")||{})[t.type]&&K.get(s,"handle"))&&c.apply(s,e),(c=l&&s[l])&&c.apply&&V(s)&&(t.result=c.apply(s,e),!1===t.result&&t.preventDefault());return t.type=p,o||t.isDefaultPrevented()||d._default&&!1!==d._default.apply(h.pop(),e)||!V(i)||l&&b(i[p])&&!m(i)&&((r=i[l])&&(i[l]=null),T.event.triggered=p,t.isPropagationStopped()&&u.addEventListener(p,Ie),i[p](),t.isPropagationStopped()&&u.removeEventListener(p,Ie),T.event.triggered=void 0,r&&(i[l]=r)),t.result}},simulate:function(t,e,i){var o=T.extend(new T.Event,i,{type:t,isSimulated:!0});T.event.trigger(o,null,e)}}),T.fn.extend({trigger:function(t,e){return this.each(function(){T.event.trigger(t,e,this)})},triggerHandler:function(t,e){var i=this[0];if(i)return T.event.trigger(t,e,i,!0)}}),y.focusin||T.each({focus:"focusin",blur:"focusout"},function(i,o){function n(t){T.event.simulate(o,t.target,T.event.fix(t))}T.event.special[o]={setup:function(){var t=this.ownerDocument||this,e=K.access(t,o);e||t.addEventListener(i,n,!0),K.access(t,o,(e||0)+1)},teardown:function(){var t=this.ownerDocument||this,e=K.access(t,o)-1;e?K.access(t,o,e):(t.removeEventListener(i,n,!0),K.remove(t,o))}}});var Oe=_.location,Fe=Date.now(),Me=/\?/;T.parseXML=function(t){var e;if(!t||"string"!=typeof t)return null;try{e=(new _.DOMParser).parseFromString(t,"text/xml")}catch(t){e=void 0}return e&&!e.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+t),e};var Ne=/\[\]$/,je=/\r?\n/g,Le=/^(?:submit|button|image|reset|file)$/i,Re=/^(?:input|select|textarea|keygen)/i;function He(i,t,o,n){var e;if(Array.isArray(t))T.each(t,function(t,e){o||Ne.test(i)?n(i,e):He(i+"["+("object"==typeof e&&null!=e?t:"")+"]",e,o,n)});else if(o||"object"!==w(t))n(i,t);else for(e in t)He(i+"["+e+"]",t[e],o,n)}T.param=function(t,e){function i(t,e){var i=b(e)?e():e;n[n.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==i?"":i)}var o,n=[];if(null==t)return"";if(Array.isArray(t)||t.jquery&&!T.isPlainObject(t))T.each(t,function(){i(this.name,this.value)});else for(o in t)He(o,t[o],e,i);return n.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var t=T.prop(this,"elements");return t?T.makeArray(t):this}).filter(function(){var t=this.type;return this.name&&!T(this).is(":disabled")&&Re.test(this.nodeName)&&!Le.test(t)&&(this.checked||!ht.test(t))}).map(function(t,e){var i=T(this).val();return null==i?null:Array.isArray(i)?T.map(i,function(t){return{name:e.name,value:t.replace(je,"\r\n")}}):{name:e.name,value:i.replace(je,"\r\n")}}).get()}});var Be=/%20/g,qe=/#.*$/,ze=/([?&])_=[^&]*/,We=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ue=/^(?:GET|HEAD)$/,Xe=/^\/\//,Ye={},Ve={},Ge="*/".concat("*"),Ke=S.createElement("a");function Ze(s){return function(t,e){"string"!=typeof t&&(e=t,t="*");var i,o=0,n=t.toLowerCase().match(N)||[];if(b(e))for(;i=n[o++];)"+"===i[0]?(i=i.slice(1)||"*",(s[i]=s[i]||[]).unshift(e)):(s[i]=s[i]||[]).push(e)}}function Qe(e,n,s,r){var a={},l=e===Ve;function c(t){var o;return a[t]=!0,T.each(e[t]||[],function(t,e){var i=e(n,s,r);return"string"!=typeof i||l||a[i]?l?!(o=i):void 0:(n.dataTypes.unshift(i),c(i),!1)}),o}return c(n.dataTypes[0])||!a["*"]&&c("*")}function Je(t,e){var i,o,n=T.ajaxSettings.flatOptions||{};for(i in e)void 0!==e[i]&&((n[i]?t:o=o||{})[i]=e[i]);return o&&T.extend(!0,t,o),t}Ke.href=Oe.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Oe.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Oe.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ge,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Je(Je(t,T.ajaxSettings),e):Je(T.ajaxSettings,t)},ajaxPrefilter:Ze(Ye),ajaxTransport:Ze(Ve),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var d,u,h,i,p,o,f,m,n,s,g=T.ajaxSetup({},e),v=g.context||g,y=g.context&&(v.nodeType||v.jquery)?T(v):T.event,b=T.Deferred(),x=T.Callbacks("once memory"),w=g.statusCode||{},r={},a={},l="canceled",C={readyState:0,getResponseHeader:function(t){var e;if(f){if(!i)for(i={};e=We.exec(h);)i[e[1].toLowerCase()+" "]=(i[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=i[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return f?h:null},setRequestHeader:function(t,e){return null==f&&(t=a[t.toLowerCase()]=a[t.toLowerCase()]||t,r[t]=e),this},overrideMimeType:function(t){return null==f&&(g.mimeType=t),this},statusCode:function(t){var e;if(t)if(f)C.always(t[C.status]);else for(e in t)w[e]=[w[e],t[e]];return this},abort:function(t){var e=t||l;return d&&d.abort(e),c(0,e),this}};if(b.promise(C),g.url=((t||g.url||Oe.href)+"").replace(Xe,Oe.protocol+"//"),g.type=e.method||e.type||g.method||g.type,g.dataTypes=(g.dataType||"*").toLowerCase().match(N)||[""],null==g.crossDomain){o=S.createElement("a");try{o.href=g.url,o.href=o.href,g.crossDomain=Ke.protocol+"//"+Ke.host!=o.protocol+"//"+o.host}catch(t){g.crossDomain=!0}}if(g.data&&g.processData&&"string"!=typeof g.data&&(g.data=T.param(g.data,g.traditional)),Qe(Ye,g,e,C),f)return C;for(n in(m=T.event&&g.global)&&0==T.active++&&T.event.trigger("ajaxStart"),g.type=g.type.toUpperCase(),g.hasContent=!Ue.test(g.type),u=g.url.replace(qe,""),g.hasContent?g.data&&g.processData&&0===(g.contentType||"").indexOf("application/x-www-form-urlencoded")&&(g.data=g.data.replace(Be,"+")):(s=g.url.slice(u.length),g.data&&(g.processData||"string"==typeof g.data)&&(u+=(Me.test(u)?"&":"?")+g.data,delete g.data),!1===g.cache&&(u=u.replace(ze,"$1"),s=(Me.test(u)?"&":"?")+"_="+Fe+++s),g.url=u+s),g.ifModified&&(T.lastModified[u]&&C.setRequestHeader("If-Modified-Since",T.lastModified[u]),T.etag[u]&&C.setRequestHeader("If-None-Match",T.etag[u])),(g.data&&g.hasContent&&!1!==g.contentType||e.contentType)&&C.setRequestHeader("Content-Type",g.contentType),C.setRequestHeader("Accept",g.dataTypes[0]&&g.accepts[g.dataTypes[0]]?g.accepts[g.dataTypes[0]]+("*"!==g.dataTypes[0]?", "+Ge+"; q=0.01":""):g.accepts["*"]),g.headers)C.setRequestHeader(n,g.headers[n]);if(g.beforeSend&&(!1===g.beforeSend.call(v,C,g)||f))return C.abort();if(l="abort",x.add(g.complete),C.done(g.success),C.fail(g.error),d=Qe(Ve,g,e,C)){if(C.readyState=1,m&&y.trigger("ajaxSend",[C,g]),f)return C;g.async&&0<g.timeout&&(p=_.setTimeout(function(){C.abort("timeout")},g.timeout));try{f=!1,d.send(r,c)}catch(t){if(f)throw t;c(-1,t)}}else c(-1,"No Transport");function c(t,e,i,o){var n,s,r,a,l,c=e;f||(f=!0,p&&_.clearTimeout(p),d=void 0,h=o||"",C.readyState=0<t?4:0,n=200<=t&&t<300||304===t,i&&(a=function(t,e,i){for(var o,n,s,r,a=t.contents,l=t.dataTypes;"*"===l[0];)l.shift(),void 0===o&&(o=t.mimeType||e.getResponseHeader("Content-Type"));if(o)for(n in a)if(a[n]&&a[n].test(o)){l.unshift(n);break}if(l[0]in i)s=l[0];else{for(n in i){if(!l[0]||t.converters[n+" "+l[0]]){s=n;break}r=r||n}s=s||r}if(s)return s!==l[0]&&l.unshift(s),i[s]}(g,C,i)),a=function(t,e,i,o){var n,s,r,a,l,c={},d=t.dataTypes.slice();if(d[1])for(r in t.converters)c[r.toLowerCase()]=t.converters[r];for(s=d.shift();s;)if(t.responseFields[s]&&(i[t.responseFields[s]]=e),!l&&o&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),l=s,s=d.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(r=c[l+" "+s]||c["* "+s]))for(n in c)if((a=n.split(" "))[1]===s&&(r=c[l+" "+a[0]]||c["* "+a[0]])){!0===r?r=c[n]:!0!==c[n]&&(s=a[0],d.unshift(a[1]));break}if(!0!==r)if(r&&t.throws)e=r(e);else try{e=r(e)}catch(t){return{state:"parsererror",error:r?t:"No conversion from "+l+" to "+s}}}return{state:"success",data:e}}(g,a,C,n),n?(g.ifModified&&((l=C.getResponseHeader("Last-Modified"))&&(T.lastModified[u]=l),(l=C.getResponseHeader("etag"))&&(T.etag[u]=l)),204===t||"HEAD"===g.type?c="nocontent":304===t?c="notmodified":(c=a.state,s=a.data,n=!(r=a.error))):(r=c,!t&&c||(c="error",t<0&&(t=0))),C.status=t,C.statusText=(e||c)+"",n?b.resolveWith(v,[s,c,C]):b.rejectWith(v,[C,c,r]),C.statusCode(w),w=void 0,m&&y.trigger(n?"ajaxSuccess":"ajaxError",[C,g,n?s:r]),x.fireWith(v,[C,c]),m&&(y.trigger("ajaxComplete",[C,g]),--T.active||T.event.trigger("ajaxStop")))}return C},getJSON:function(t,e,i){return T.get(t,e,i,"json")},getScript:function(t,e){return T.get(t,void 0,e,"script")}}),T.each(["get","post"],function(t,n){T[n]=function(t,e,i,o){return b(e)&&(o=o||i,i=e,e=void 0),T.ajax(T.extend({url:t,type:n,dataType:o,data:e,success:i},T.isPlainObject(t)&&t))}}),T._evalUrl=function(t,e){return T.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){T.globalEval(t,e)}})},T.fn.extend({wrapAll:function(t){var e;return this[0]&&(b(t)&&(t=t.call(this[0])),e=T(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t}).append(this)),this},wrapInner:function(i){return b(i)?this.each(function(t){T(this).wrapInner(i.call(this,t))}):this.each(function(){var t=T(this),e=t.contents();e.length?e.wrapAll(i):t.append(i)})},wrap:function(e){var i=b(e);return this.each(function(t){T(this).wrapAll(i?e.call(this,t):e)})},unwrap:function(t){return this.parent(t).not("body").each(function(){T(this).replaceWith(this.childNodes)}),this}}),T.expr.pseudos.hidden=function(t){return!T.expr.pseudos.visible(t)},T.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new _.XMLHttpRequest}catch(t){}};var ti={0:200,1223:204},ei=T.ajaxSettings.xhr();y.cors=!!ei&&"withCredentials"in ei,y.ajax=ei=!!ei,T.ajaxTransport(function(n){var s,r;if(y.cors||ei&&!n.crossDomain)return{send:function(t,e){var i,o=n.xhr();if(o.open(n.type,n.url,n.async,n.username,n.password),n.xhrFields)for(i in n.xhrFields)o[i]=n.xhrFields[i];for(i in n.mimeType&&o.overrideMimeType&&o.overrideMimeType(n.mimeType),n.crossDomain||t["X-Requested-With"]||(t["X-Requested-With"]="XMLHttpRequest"),t)o.setRequestHeader(i,t[i]);s=function(t){return function(){s&&(s=r=o.onload=o.onerror=o.onabort=o.ontimeout=o.onreadystatechange=null,"abort"===t?o.abort():"error"===t?"number"!=typeof o.status?e(0,"error"):e(o.status,o.statusText):e(ti[o.status]||o.status,o.statusText,"text"!==(o.responseType||"text")||"string"!=typeof o.responseText?{binary:o.response}:{text:o.responseText},o.getAllResponseHeaders()))}},o.onload=s(),r=o.onerror=o.ontimeout=s("error"),void 0!==o.onabort?o.onabort=r:o.onreadystatechange=function(){4===o.readyState&&_.setTimeout(function(){s&&r()})},s=s("abort");try{o.send(n.hasContent&&n.data||null)}catch(t){if(s)throw t}},abort:function(){s&&s()}}}),T.ajaxPrefilter(function(t){t.crossDomain&&(t.contents.script=!1)}),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return T.globalEval(t),t}}}),T.ajaxPrefilter("script",function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")}),T.ajaxTransport("script",function(i){var o,n;if(i.crossDomain||i.scriptAttrs)return{send:function(t,e){o=T("<script>").attr(i.scriptAttrs||{}).prop({charset:i.scriptCharset,src:i.url}).on("load error",n=function(t){o.remove(),n=null,t&&e("error"===t.type?404:200,t.type)}),S.head.appendChild(o[0])},abort:function(){n&&n()}}});var ii,oi=[],ni=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=oi.pop()||T.expando+"_"+Fe++;return this[t]=!0,t}}),T.ajaxPrefilter("json jsonp",function(t,e,i){var o,n,s,r=!1!==t.jsonp&&(ni.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&ni.test(t.data)&&"data");if(r||"jsonp"===t.dataTypes[0])return o=t.jsonpCallback=b(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,r?t[r]=t[r].replace(ni,"$1"+o):!1!==t.jsonp&&(t.url+=(Me.test(t.url)?"&":"?")+t.jsonp+"="+o),t.converters["script json"]=function(){return s||T.error(o+" was not called"),s[0]},t.dataTypes[0]="json",n=_[o],_[o]=function(){s=arguments},i.always(function(){void 0===n?T(_).removeProp(o):_[o]=n,t[o]&&(t.jsonpCallback=e.jsonpCallback,oi.push(o)),s&&b(n)&&n(s[0]),s=n=void 0}),"script"}),y.createHTMLDocument=((ii=S.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===ii.childNodes.length),T.parseHTML=function(t,e,i){return"string"!=typeof t?[]:("boolean"==typeof e&&(i=e,e=!1),e||(y.createHTMLDocument?((o=(e=S.implementation.createHTMLDocument("")).createElement("base")).href=S.location.href,e.head.appendChild(o)):e=S),s=!i&&[],(n=E.exec(t))?[e.createElement(n[1])]:(n=wt([t],e,s),s&&s.length&&T(s).remove(),T.merge([],n.childNodes)));var o,n,s},T.fn.load=function(t,e,i){var o,n,s,r=this,a=t.indexOf(" ");return-1<a&&(o=Ae(t.slice(a)),t=t.slice(0,a)),b(e)?(i=e,e=void 0):e&&"object"==typeof e&&(n="POST"),0<r.length&&T.ajax({url:t,type:n||"GET",dataType:"html",data:e}).done(function(t){s=arguments,r.html(o?T("<div>").append(T.parseHTML(t)).find(o):t)}).always(i&&function(t,e){r.each(function(){i.apply(this,s||[t.responseText,e,t])})}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(t,e){T.fn[e]=function(t){return this.on(e,t)}}),T.expr.pseudos.animated=function(e){return T.grep(T.timers,function(t){return e===t.elem}).length},T.offset={setOffset:function(t,e,i){var o,n,s,r,a,l,c=T.css(t,"position"),d=T(t),u={};"static"===c&&(t.style.position="relative"),a=d.offset(),s=T.css(t,"top"),l=T.css(t,"left"),n=("absolute"===c||"fixed"===c)&&-1<(s+l).indexOf("auto")?(r=(o=d.position()).top,o.left):(r=parseFloat(s)||0,parseFloat(l)||0),b(e)&&(e=e.call(t,i,T.extend({},a))),null!=e.top&&(u.top=e.top-a.top+r),null!=e.left&&(u.left=e.left-a.left+n),"using"in e?e.using.call(t,u):d.css(u)}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){T.offset.setOffset(this,e,t)});var t,i,o=this[0];return o?o.getClientRects().length?(t=o.getBoundingClientRect(),i=o.ownerDocument.defaultView,{top:t.top+i.pageYOffset,left:t.left+i.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,i,o=this[0],n={top:0,left:0};if("fixed"===T.css(o,"position"))e=o.getBoundingClientRect();else{for(e=this.offset(),i=o.ownerDocument,t=o.offsetParent||i.documentElement;t&&(t===i.body||t===i.documentElement)&&"static"===T.css(t,"position");)t=t.parentNode;t&&t!==o&&1===t.nodeType&&((n=T(t).offset()).top+=T.css(t,"borderTopWidth",!0),n.left+=T.css(t,"borderLeftWidth",!0))}return{top:e.top-n.top-T.css(o,"marginTop",!0),left:e.left-n.left-T.css(o,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var t=this.offsetParent;t&&"static"===T.css(t,"position");)t=t.offsetParent;return t||nt})}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,n){var s="pageYOffset"===n;T.fn[e]=function(t){return z(this,function(t,e,i){var o;if(m(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[n]:t[e];o?o.scrollTo(s?o.pageXOffset:i,s?i:o.pageYOffset):t[e]=i},e,t,arguments.length)}}),T.each(["top","left"],function(t,i){T.cssHooks[i]=Jt(y.pixelPosition,function(t,e){if(e)return e=Qt(t,i),Yt.test(e)?T(t).position()[i]+"px":e})}),T.each({Height:"height",Width:"width"},function(r,a){T.each({padding:"inner"+r,content:a,"":"outer"+r},function(o,s){T.fn[s]=function(t,e){var i=arguments.length&&(o||"boolean"!=typeof t),n=o||(!0===t||!0===e?"margin":"border");return z(this,function(t,e,i){var o;return m(t)?0===s.indexOf("outer")?t["inner"+r]:t.document.documentElement["client"+r]:9===t.nodeType?(o=t.documentElement,Math.max(t.body["scroll"+r],o["scroll"+r],t.body["offset"+r],o["offset"+r],o["client"+r])):void 0===i?T.css(t,e,n):T.style(t,e,i,n)},a,i?t:void 0,i)}})}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(t,i){T.fn[i]=function(t,e){return 0<arguments.length?this.on(i,null,t,e):this.trigger(i)}}),T.fn.extend({hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),T.fn.extend({bind:function(t,e,i){return this.on(t,null,e,i)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,i,o){return this.on(e,t,i,o)},undelegate:function(t,e,i){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",i)}}),T.proxy=function(t,e){var i,o,n;if("string"==typeof e&&(i=t[e],e=t,t=i),b(t))return o=a.call(arguments,2),(n=function(){return t.apply(e||this,o.concat(a.call(arguments)))}).guid=t.guid=t.guid||T.guid++,n},T.holdReady=function(t){t?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=$,T.isFunction=b,T.isWindow=m,T.camelCase=Y,T.type=w,T.now=Date.now,T.isNumeric=function(t){var e=T.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},"function"==typeof define&&define.amd&&define("jquery",[],function(){return T});var si=_.jQuery,ri=_.$;return T.noConflict=function(t){return _.$===T&&(_.$=ri),t&&_.jQuery===T&&(_.jQuery=si),T},t||(_.jQuery=_.$=T),T}),function(h){"use strict";var p=null,f=null;!function(){var t,n,s,r,a,e=["webkit","moz","o","ms"],i=h.document.createElement("div"),o=-1;for(o=0;o<e.length&&!h.requestAnimationFrame;o++)h.requestAnimationFrame=h[e[o]+"RequestAnimationFrame"];function l(){}void 0===i.nextElementSibling&&Object.defineProperty(h.Element.prototype,"nextElementSibling",{get:function(){for(var t=this.nextSibling;t;){if(1===t.nodeType)return t;t=t.nextSibling}return null}}),(t=h.Element.prototype).matches=t.matches||t.machesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector||t.webkitMatchesSelector||function(t){return-1<Array.prototype.indexOf.call(this.parentElement.querySelectorAll(t),this)},Object.keys||(Object.keys=(a=Object.prototype.hasOwnProperty,n=!{toString:null}.propertyIsEnumerable("toString"),r=(s=["toString","toLocaleString","valueOf","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","constructor"]).length,function(t){var e=[],i="",o=-1;if("object"!=typeof t&&("function"!=typeof t||null===t))throw new TypeError("Object.keys called on non-object");for(i in t)a.call(t,i)&&e.push(i);if(n)for(o=0;o<r;o++)a.call(t,s[o])&&e.push(s[o]);return e})),Array.isArray||(Array.isArray=function(t){return"[object Array]"===Object.prototype.toString.call(t)}),"function"!=typeof Object.create&&(Object.create=function(t,e){if(t!==Object(t)&&null!==t)throw TypeError("Argument must be an object, or null");l.prototype=t||{};var i=new l;return l.prototype=null,void 0!==e&&Object.defineProperties(i,e),null===t&&(i.__proto__=null),i}),String.prototype.trim||(String.prototype.trim=function(){return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t){var e,i,o,n;if(null===this)throw new TypeError;if(0==(n=(o=Object(this)).length>>>0))return-1;if(e=0,1<arguments.length&&((e=Number(arguments[1]))!=e?e=0:0!==e&&e!==1/0&&e!==-1/0&&(e=(0<e||-1)*Math.floor(Math.abs(e)))),n<=e)return-1;for(i=0<=e?e:Math.max(n-Math.abs(e),0);i<n;i++)if(i in o&&o[i]===t)return i;return-1}),Function.prototype.bind||(Function.prototype.bind=function(t){var e,i,o,n;if("function"!=typeof this)throw new TypeError;return e=Array.prototype.slice.call(arguments,1),o=function(){},n=function(){return i.apply(this instanceof o?this:t,e.concat(Array.prototype.slice.call(arguments)))},(i=this).prototype&&(o.prototype=this.prototype),n.prototype=new o,n}),h.Element.prototype.dispatchEvent||(h.Element.prototype.dispatchEvent=function(t){try{return this.fireEvent("on"+t.type,t)}catch(t){}})}(),(p=function(t,e,i){var o=null,n=!1,s=null,r=null,a=null,l=[],c="",d=[],u=-1;if(a=i||h.document,(n=arguments[3])&&(n="boolean"==typeof n),"string"==typeof t)d=a.querySelectorAll(t);else if(t&&"object"==typeof t&&f.isElement(t,a))d=[t];else{if(!t||"object"!=typeof t||!t.length)throw new Error(p.messages.errorFactoryInvalidContainer());d=t}if(d.length<1)throw new Error(p.messages.errorFactoryContainerNotFound());for(u=0;(o=d[u])&&(!(0<u)||n);u++)o.id?c=o.id:(c="MixItUp"+f.randomHex(),o.id=c),p.instances[c]instanceof p.Mixer?(s=p.instances[c],(!e||e&&e.debug&&!1!==e.debug.showWarnings)&&console.warn(p.messages.warningFactoryPreexistingInstance())):((s=new p.Mixer).attach(o,a,c,e),p.instances[c]=s),r=new p.Facade(s),e&&e.debug&&e.debug.enable?l.push(s):l.push(r);return n?new p.Collection(l):l[0]}).use=function(t){p.Base.prototype.callActions.call(p,"beforeUse",arguments),"function"==typeof t&&"mixitup-extension"===t.TYPE?void 0===p.extensions[t.NAME]&&(t(p),p.extensions[t.NAME]=t):t.fn&&t.fn.jquery&&(p.libraries.$=t),p.Base.prototype.callActions.call(p,"afterUse",arguments)},p.instances={},p.extensions={},p.libraries={},f={hasClass:function(t,e){return!!t.className.match(new RegExp("(\\s|^)"+e+"(\\s|$)"))},addClass:function(t,e){this.hasClass(t,e)||(t.className+=t.className?" "+e:e)},removeClass:function(t,e){if(this.hasClass(t,e)){var i=new RegExp("(\\s|^)"+e+"(\\s|$)");t.className=t.className.replace(i," ").trim()}},extend:function(e,t,i,o){var n=[],s="",r=-1;i=i||!1,o=o||!1;try{if(Array.isArray(t))for(r=0;r<t.length;r++)n.push(r);else t&&(n=Object.keys(t));for(r=0;r<n.length;r++)s=n[r],!i||"object"!=typeof t[s]||this.isElement(t[s])?e[s]=t[s]:(Array.isArray(t[s])?e[s]||(e[s]=[]):e[s]||(e[s]={}),this.extend(e[s],t[s],i,o))}catch(t){if(!o)throw t;this.handleExtendError(t,e)}return e},handleExtendError:function(t,e){var i=null,o="",n="",s="",r="",a="",l=-1,c=-1;if(t instanceof TypeError&&(i=/property "?(\w*)"?[,:] object/i.exec(t.message))){for(a in o=i[1],e){for(c=0;c<o.length&&o.charAt(c)===a.charAt(c);)c++;l<c&&(l=c,r=a)}throw 1<l&&(s=p.messages.errorConfigInvalidPropertySuggestion({probableMatch:r})),n=p.messages.errorConfigInvalidProperty({erroneous:o,suggestion:s}),new TypeError(n)}throw t},template:function(o){for(var t=/\${([\w]*)}/g,n={},e=null;e=t.exec(o);)n[e[1]]=new RegExp("\\${"+e[1]+"}","g");return function(t){var e="",i=o;for(e in t=t||{},n)i=i.replace(n[e],void 0!==t[e]?t[e]:"");return i}},on:function(t,e,i,o){t&&(t.addEventListener?t.addEventListener(e,i,o):t.attachEvent&&(t["e"+e+i]=i,t[e+i]=function(){t["e"+e+i](h.event)},t.attachEvent("on"+e,t[e+i])))},off:function(t,e,i){t&&(t.removeEventListener?t.removeEventListener(e,i,!1):t.detachEvent&&(t.detachEvent("on"+e,t[e+i]),t[e+i]=null))},getCustomEvent:function(t,e,i){var o=null;return i=i||h.document,"function"==typeof h.CustomEvent?o=new h.CustomEvent(t,{detail:e,bubbles:!0,cancelable:!0}):"function"==typeof i.createEvent?(o=i.createEvent("CustomEvent")).initCustomEvent(t,!0,!0,e):((o=i.createEventObject()).type=t,o.returnValue=!1,o.cancelBubble=!1,o.detail=e),o},getOriginalEvent:function(t){return t.touches&&t.touches.length?t.touches[0]:t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:t},index:function(t,e){for(var i=0;null!==(t=t.previousElementSibling);)e&&!t.matches(e)||++i;return i},camelCase:function(t){return t.toLowerCase().replace(/([_-][a-z])/g,function(t){return t.toUpperCase().replace(/[_-]/,"")})},pascalCase:function(t){return(t=this.camelCase(t)).charAt(0).toUpperCase()+t.slice(1)},dashCase:function(t){return t.replace(/([A-Z])/g,"-$1").replace(/^-/,"").toLowerCase()},isElement:function(t,e){return e=e||h.document,!!(h.HTMLElement&&t instanceof h.HTMLElement)||(!!(e.defaultView&&e.defaultView.HTMLElement&&t instanceof e.defaultView.HTMLElement)||null!==t&&1===t.nodeType&&"string"==typeof t.nodeName)},createElement:function(t,e){var i=null,o=null;for(i=(e=e||h.document).createDocumentFragment(),(o=e.createElement("div")).innerHTML=t.trim();o.firstChild;)i.appendChild(o.firstChild);return i},removeWhitespace:function(t){for(var e;t&&"#text"===t.nodeName;)t=(e=t).previousSibling,e.parentElement&&e.parentElement.removeChild(e)},isEqualArray:function(t,e){var i=t.length;if(i!==e.length)return!1;for(;i--;)if(t[i]!==e[i])return!1;return!0},deepEquals:function(t,e){var i;if("object"==typeof t&&t&&"object"==typeof e&&e){if(Object.keys(t).length!==Object.keys(e).length)return!1;for(i in t)if(!e.hasOwnProperty(i)||!this.deepEquals(t[i],e[i]))return!1}else if(t!==e)return!1;return!0},arrayShuffle:function(t){for(var e=t.slice(),i=e.length,o=i,n=-1,s=[];o--;)n=~~(Math.random()*i),s=e[o],e[o]=e[n],e[n]=s;return e},arrayFromList:function(e){var i,o;try{return Array.prototype.slice.call(e)}catch(t){for(i=[],o=0;o<e.length;o++)i.push(e[o]);return i}},debounce:function(n,s,r){var a;return function(){var t,e=this,i=arguments,o=r&&!a;t=function(){a=null,r||n.apply(e,i)},clearTimeout(a),a=setTimeout(t,s),o&&n.apply(e,i)}},position:function(t){for(var e=0,i=0,o=t;t;)e-=t.scrollLeft,i-=t.scrollTop,t===o&&(e+=t.offsetLeft,i+=t.offsetTop,o=t.offsetParent),t=t.parentElement;return{x:e,y:i}},getHypotenuse:function(t,e){var i=t.x-e.x,o=t.y-e.y;return i=i<0?-1*i:i,o=o<0?-1*o:o,Math.sqrt(Math.pow(i,2)+Math.pow(o,2))},getIntersectionRatio:function(t,e){var i,o=t.width*t.height;return i=Math.max(0,Math.min(t.left+t.width,e.left+e.width)-Math.max(t.left,e.left)),Math.max(0,Math.min(t.top+t.height,e.top+e.height)-Math.max(t.top,e.top))*i/o},closestParent:function(t,e,i,o){var n=t.parentNode;if(o=o||h.document,i&&t.matches(e))return t;for(;n&&n!=o.body;){if(n.matches&&n.matches(e))return n;if(!n.parentNode)return null;n=n.parentNode}return null},children:function(t,e,i){var o=[],n="";return i=i||h.doc,t&&(t.id||(n="Temp"+this.randomHexKey(),t.id=n),o=i.querySelectorAll("#"+t.id+" > "+e),n&&t.removeAttribute("id")),o},clean:function(t){var e=[],i=-1;for(i=0;i<t.length;i++)""!==t[i]&&e.push(t[i]);return e},defer:function(t){var e=null,i=null,o=null;return i=new this.Deferred,p.features.has.promises?i.promise=new Promise(function(t,e){i.resolve=t,i.reject=e}):(o=h.jQuery||t.$)&&"function"==typeof o.Deferred?(e=o.Deferred(),i.promise=e.promise(),i.resolve=e.resolve,i.reject=e.reject):h.console&&console.warn(p.messages.warningNoPromiseImplementation()),i},all:function(t,e){var i=null;return p.features.has.promises?Promise.all(t):(i=h.jQuery||e.$)&&"function"==typeof i.when?i.when.apply(i,t).done(function(){return arguments}):(h.console&&console.warn(p.messages.warningNoPromiseImplementation()),[])},getPrefix:function(t,e,i){var o=-1,n="";if(f.dashCase(e)in t.style)return"";for(o=0;n=i[o];o++)if(n+e in t.style)return n.toLowerCase();return"unsupported"},randomHex:function(){return("00000"+(16777216*Math.random()<<0).toString(16)).substr(-6).toUpperCase()},getDocumentState:function(t){return t="object"==typeof t.body?t:h.document,{scrollTop:h.pageYOffset,scrollLeft:h.pageXOffset,docHeight:t.documentElement.scrollHeight,docWidth:t.documentElement.scrollWidth,viewportHeight:t.documentElement.clientHeight,viewportWidth:t.documentElement.clientWidth}},bind:function(t,e){return function(){return e.apply(t,arguments)}},isVisible:function(t){var e;return!!t.offsetParent||"fixed"===(e=h.getComputedStyle(t)).position&&"hidden"!==e.visibility&&"0"!==e.opacity},seal:function(t){"function"==typeof Object.seal&&Object.seal(t)},freeze:function(t){"function"==typeof Object.freeze&&Object.freeze(t)},compareVersions:function(t,e){var i=t.split("."),o=e.split("."),n=-1,s=-1,r=-1;for(r=0;r<i.length;r++){if(n=parseInt(i[r].replace(/[^\d.]/g,"")),(s=parseInt(o[r].replace(/[^\d.]/g,"")||0))<n)return!1;if(n<s)return!0}return!0},Deferred:function(){this.promise=null,this.resolve=null,this.reject=null,this.id=f.randomHex()},isEmptyObject:function(t){var e="";if("function"==typeof Object.keys)return 0===Object.keys(t).length;for(e in t)if(t.hasOwnProperty(e))return!1;return!0},getClassname:function(t,e,i){var o="";return(o+=t.block).length&&(o+=t.delineatorElement),o+=t["element"+this.pascalCase(e)],i?(o.length&&(o+=t.delineatorModifier),o+=i):o},getProperty:function(t,e){var i,o=e.split("."),n="",s=0;if(!e)return t;for(i=function(t){return t?t[n]:null};s<o.length;)n=o[s],t=i(t),s++;return void 0!==t?t:null}},p.h=f,p.Base=function(){},p.Base.prototype={constructor:p.Base,callActions:function(t,e){var i=this.constructor.actions[t],o="";if(i&&!f.isEmptyObject(i))for(o in i)i[o].apply(this,e)},callFilters:function(t,e,i){var o=this.constructor.filters[t],n=e,s="";if(!o||f.isEmptyObject(o))return n;for(s in i=i||[],o)(i=f.arrayFromList(i)).unshift(n),n=o[s].apply(this,i);return n}},p.BaseStatic=function(){this.actions={},this.filters={},this.extend=function(t){f.extend(this.prototype,t)},this.registerAction=function(t,e,i){(this.actions[t]=this.actions[t]||{})[e]=i},this.registerFilter=function(t,e,i){(this.filters[t]=this.filters[t]||{})[e]=i}},p.Features=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.boxSizingPrefix="",this.transformPrefix="",this.transitionPrefix="",this.boxSizingPrefix="",this.transformProp="",this.transformRule="",this.transitionProp="",this.perspectiveProp="",this.perspectiveOriginProp="",this.has=new p.Has,this.canary=null,this.BOX_SIZING_PROP="boxSizing",this.TRANSITION_PROP="transition",this.TRANSFORM_PROP="transform",this.PERSPECTIVE_PROP="perspective",this.PERSPECTIVE_ORIGIN_PROP="perspectiveOrigin",this.VENDORS=["Webkit","moz","O","ms"],this.TWEENABLE=["opacity","width","height","marginRight","marginBottom","x","y","scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],this.callActions("afterConstruct")},p.BaseStatic.call(p.Features),p.Features.prototype=Object.create(p.Base.prototype),f.extend(p.Features.prototype,{constructor:p.Features,init:function(){var t=this;t.callActions("beforeInit",arguments),t.canary=document.createElement("div"),t.setPrefixes(),t.runTests(),t.callActions("beforeInit",arguments)},runTests:function(){var t=this;t.callActions("beforeRunTests",arguments),t.has.promises="function"==typeof h.Promise,t.has.transitions="unsupported"!==t.transitionPrefix,t.callActions("afterRunTests",arguments),f.freeze(t.has)},setPrefixes:function(){var t=this;t.callActions("beforeSetPrefixes",arguments),t.transitionPrefix=f.getPrefix(t.canary,"Transition",t.VENDORS),t.transformPrefix=f.getPrefix(t.canary,"Transform",t.VENDORS),t.boxSizingPrefix=f.getPrefix(t.canary,"BoxSizing",t.VENDORS),t.boxSizingProp=t.boxSizingPrefix?t.boxSizingPrefix+f.pascalCase(t.BOX_SIZING_PROP):t.BOX_SIZING_PROP,t.transitionProp=t.transitionPrefix?t.transitionPrefix+f.pascalCase(t.TRANSITION_PROP):t.TRANSITION_PROP,t.transformProp=t.transformPrefix?t.transformPrefix+f.pascalCase(t.TRANSFORM_PROP):t.TRANSFORM_PROP,t.transformRule=t.transformPrefix?"-"+t.transformPrefix+"-"+t.TRANSFORM_PROP:t.TRANSFORM_PROP,t.perspectiveProp=t.transformPrefix?t.transformPrefix+f.pascalCase(t.PERSPECTIVE_PROP):t.PERSPECTIVE_PROP,t.perspectiveOriginProp=t.transformPrefix?t.transformPrefix+f.pascalCase(t.PERSPECTIVE_ORIGIN_PROP):t.PERSPECTIVE_ORIGIN_PROP,t.callActions("afterSetPrefixes",arguments)}}),p.Has=function(){this.transitions=!1,this.promises=!1,f.seal(this)},p.features=new p.Features,p.features.init(),p.ConfigAnimation=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.effects="fade scale",this.effectsIn="",this.effectsOut="",this.duration=600,this.easing="ease",this.applyPerspective=!0,this.perspectiveDistance="3000px",this.perspectiveOrigin="50% 50%",this.queue=!0,this.queueLimit=3,this.animateResizeContainer=!0,this.animateResizeTargets=!1,this.staggerSequence=null,this.reverseOut=!1,this.nudge=!0,this.clampHeight=!0,this.clampWidth=!0,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigAnimation),p.ConfigAnimation.prototype=Object.create(p.Base.prototype),p.ConfigAnimation.prototype.constructor=p.ConfigAnimation,p.ConfigBehavior=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.liveSort=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigBehavior),p.ConfigBehavior.prototype=Object.create(p.Base.prototype),p.ConfigBehavior.prototype.constructor=p.ConfigBehavior,p.ConfigCallbacks=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.onMixStart=null,this.onMixBusy=null,this.onMixEnd=null,this.onMixFail=null,this.onMixClick=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigCallbacks),p.ConfigCallbacks.prototype=Object.create(p.Base.prototype),p.ConfigCallbacks.prototype.constructor=p.ConfigCallbacks,p.ConfigControls=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!0,this.live=!1,this.scope="global",this.toggleLogic="or",this.toggleDefault="all",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigControls),p.ConfigControls.prototype=Object.create(p.Base.prototype),p.ConfigControls.prototype.constructor=p.ConfigControls,p.ConfigClassNames=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.block="mixitup",this.elementContainer="container",this.elementFilter="control",this.elementSort="control",this.elementMultimix="control",this.elementToggle="control",this.modifierActive="active",this.modifierDisabled="disabled",this.modifierFailed="failed",this.delineatorElement="-",this.delineatorModifier="-",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigClassNames),p.ConfigClassNames.prototype=Object.create(p.Base.prototype),p.ConfigClassNames.prototype.constructor=p.ConfigClassNames,p.ConfigData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.uidKey="",this.dirtyCheck=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigData),p.ConfigData.prototype=Object.create(p.Base.prototype),p.ConfigData.prototype.constructor=p.ConfigData,p.ConfigDebug=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.enable=!1,this.showWarnings=!0,this.fauxAsync=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigDebug),p.ConfigDebug.prototype=Object.create(p.Base.prototype),p.ConfigDebug.prototype.constructor=p.ConfigDebug,p.ConfigLayout=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.allowNestedTargets=!0,this.containerClassName="",this.siblingBefore=null,this.siblingAfter=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigLayout),p.ConfigLayout.prototype=Object.create(p.Base.prototype),p.ConfigLayout.prototype.constructor=p.ConfigLayout,p.ConfigLoad=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.filter="all",this.sort="default:asc",this.dataset=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigLoad),p.ConfigLoad.prototype=Object.create(p.Base.prototype),p.ConfigLoad.prototype.constructor=p.ConfigLoad,p.ConfigSelectors=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.target=".mix",this.control="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigSelectors),p.ConfigSelectors.prototype=Object.create(p.Base.prototype),p.ConfigSelectors.prototype.constructor=p.ConfigSelectors,p.ConfigRender=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.target=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigRender),p.ConfigRender.prototype=Object.create(p.Base.prototype),p.ConfigRender.prototype.constructor=p.ConfigRender,p.ConfigTemplates=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.ConfigTemplates),p.ConfigTemplates.prototype=Object.create(p.Base.prototype),p.ConfigTemplates.prototype.constructor=p.ConfigTemplates,p.Config=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.animation=new p.ConfigAnimation,this.behavior=new p.ConfigBehavior,this.callbacks=new p.ConfigCallbacks,this.controls=new p.ConfigControls,this.classNames=new p.ConfigClassNames,this.data=new p.ConfigData,this.debug=new p.ConfigDebug,this.layout=new p.ConfigLayout,this.load=new p.ConfigLoad,this.selectors=new p.ConfigSelectors,this.render=new p.ConfigRender,this.templates=new p.ConfigTemplates,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Config),p.Config.prototype=Object.create(p.Base.prototype),p.Config.prototype.constructor=p.Config,p.MixerDom=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.document=null,this.body=null,this.container=null,this.parent=null,this.targets=[],this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.MixerDom),p.MixerDom.prototype=Object.create(p.Base.prototype),p.MixerDom.prototype.constructor=p.MixerDom,p.UiClassNames=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.base="",this.active="",this.disabled="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.UiClassNames),p.UiClassNames.prototype=Object.create(p.Base.prototype),p.UiClassNames.prototype.constructor=p.UiClassNames,p.CommandDataset=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.dataset=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandDataset),p.CommandDataset.prototype=Object.create(p.Base.prototype),p.CommandDataset.prototype.constructor=p.CommandDataset,p.CommandMultimix=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.filter=null,this.sort=null,this.insert=null,this.remove=null,this.changeLayout=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandMultimix),p.CommandMultimix.prototype=Object.create(p.Base.prototype),p.CommandMultimix.prototype.constructor=p.CommandMultimix,p.CommandFilter=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.selector="",this.collection=null,this.action="show",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandFilter),p.CommandFilter.prototype=Object.create(p.Base.prototype),p.CommandFilter.prototype.constructor=p.CommandFilter,p.CommandSort=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.sortString="",this.attribute="",this.order="asc",this.collection=null,this.next=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandSort),p.CommandSort.prototype=Object.create(p.Base.prototype),p.CommandSort.prototype.constructor=p.CommandSort,p.CommandInsert=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.index=0,this.collection=[],this.position="before",this.sibling=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandInsert),p.CommandInsert.prototype=Object.create(p.Base.prototype),p.CommandInsert.prototype.constructor=p.CommandInsert,p.CommandRemove=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.targets=[],this.collection=[],this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandRemove),p.CommandRemove.prototype=Object.create(p.Base.prototype),p.CommandRemove.prototype.constructor=p.CommandRemove,p.CommandChangeLayout=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.containerClassName="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.CommandChangeLayout),p.CommandChangeLayout.prototype=Object.create(p.Base.prototype),p.CommandChangeLayout.prototype.constructor=p.CommandChangeLayout,p.ControlDefinition=function(t,e,i,o){p.Base.call(this),this.callActions("beforeConstruct"),this.type=t,this.selector=e,this.live=i||!1,this.parent=o||"",this.callActions("afterConstruct"),f.freeze(this),f.seal(this)},p.BaseStatic.call(p.ControlDefinition),p.ControlDefinition.prototype=Object.create(p.Base.prototype),p.ControlDefinition.prototype.constructor=p.ControlDefinition,p.controlDefinitions=[],p.controlDefinitions.push(new p.ControlDefinition("multimix","[data-filter][data-sort]")),p.controlDefinitions.push(new p.ControlDefinition("filter","[data-filter]")),p.controlDefinitions.push(new p.ControlDefinition("sort","[data-sort]")),p.controlDefinitions.push(new p.ControlDefinition("toggle","[data-toggle]")),p.Control=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.selector="",this.bound=[],this.pending=-1,this.type="",this.status="inactive",this.filter="",this.sort="",this.canDisable=!1,this.handler=null,this.classNames=new p.UiClassNames,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Control),p.Control.prototype=Object.create(p.Base.prototype),f.extend(p.Control.prototype,{constructor:p.Control,init:function(t,e,i){var o=this;if(this.callActions("beforeInit",arguments),o.el=t,o.type=e,o.selector=i,o.selector)o.status="live";else switch(o.canDisable="boolean"==typeof o.el.disable,o.type){case"filter":o.filter=o.el.getAttribute("data-filter");break;case"toggle":o.filter=o.el.getAttribute("data-toggle");break;case"sort":o.sort=o.el.getAttribute("data-sort");break;case"multimix":o.filter=o.el.getAttribute("data-filter"),o.sort=o.el.getAttribute("data-sort")}o.bindClick(),p.controls.push(o),this.callActions("afterInit",arguments)},isBound:function(t){var e;return this.callActions("beforeIsBound",arguments),e=-1<this.bound.indexOf(t),this.callFilters("afterIsBound",e,arguments)},addBinding:function(t){this.callActions("beforeAddBinding",arguments),this.isBound()||this.bound.push(t),this.callActions("afterAddBinding",arguments)},removeBinding:function(t){var e=this,i=-1;this.callActions("beforeRemoveBinding",arguments),-1<(i=e.bound.indexOf(t))&&e.bound.splice(i,1),e.bound.length<1&&(e.unbindClick(),i=p.controls.indexOf(e),p.controls.splice(i,1),"active"===e.status&&e.renderStatus(e.el,"inactive")),this.callActions("afterRemoveBinding",arguments)},bindClick:function(){var e=this;this.callActions("beforeBindClick",arguments),e.handler=function(t){e.handleClick(t)},f.on(e.el,"click",e.handler),this.callActions("afterBindClick",arguments)},unbindClick:function(){this.callActions("beforeUnbindClick",arguments),f.off(this.el,"click",this.handler),this.handler=null,this.callActions("afterUnbindClick",arguments)},handleClick:function(t){var e=this,i=null,o=null,n=!1,s={},r=null,a=[],l=-1;if(this.callActions("beforeHandleClick",arguments),this.pending=0,o=e.bound[0],i=e.selector?f.closestParent(t.target,o.config.selectors.control+e.selector,!0,o.dom.document):e.el){switch(e.type){case"filter":s.filter=e.filter||i.getAttribute("data-filter");break;case"sort":s.sort=e.sort||i.getAttribute("data-sort");break;case"multimix":s.filter=e.filter||i.getAttribute("data-filter"),s.sort=e.sort||i.getAttribute("data-sort");break;case"toggle":s.filter=e.filter||i.getAttribute("data-toggle"),n="live"===e.status?f.hasClass(i,e.classNames.active):"active"===e.status}for(l=0;l<e.bound.length;l++)r=new p.CommandMultimix,f.extend(r,s),a.push(r);for(a=e.callFilters("commandsHandleClick",a,arguments),e.pending=e.bound.length,l=0;o=e.bound[l];l++)(s=a[l])&&(o.lastClicked||(o.lastClicked=i),p.events.fire("mixClick",o.dom.container,{state:o.state,instance:o,originalEvent:t,control:o.lastClicked},o.dom.document),"function"==typeof o.config.callbacks.onMixClick&&!1===o.config.callbacks.onMixClick.call(o.lastClicked,o.state,t,o)||("toggle"===e.type?n?o.toggleOff(s.filter):o.toggleOn(s.filter):o.multimix(s)));this.callActions("afterHandleClick",arguments)}else e.callActions("afterHandleClick",arguments)},update:function(t,e){var i=this,o=new p.CommandMultimix;i.callActions("beforeUpdate",arguments),i.pending--,i.pending=Math.max(0,i.pending),0<i.pending||("live"===i.status?i.updateLive(t,e):(o.sort=i.sort,o.filter=i.filter,i.callFilters("actionsUpdate",o,arguments),i.parseStatusChange(i.el,t,o,e)),i.callActions("afterUpdate",arguments))},updateLive:function(t,e){var i,o=this,n=null,s=null,r=-1;if(o.callActions("beforeUpdateLive",arguments),o.el){for(i=o.el.querySelectorAll(o.selector),r=0;s=i[r];r++){switch(n=new p.CommandMultimix,o.type){case"filter":n.filter=s.getAttribute("data-filter");break;case"sort":n.sort=s.getAttribute("data-sort");break;case"multimix":n.filter=s.getAttribute("data-filter"),n.sort=s.getAttribute("data-sort");break;case"toggle":n.filter=s.getAttribute("data-toggle")}n=o.callFilters("actionsUpdateLive",n,arguments),o.parseStatusChange(s,t,n,e)}o.callActions("afterUpdateLive",arguments)}},parseStatusChange:function(t,e,i,o){var n=this,s="",r=-1;switch(n.callActions("beforeParseStatusChange",arguments),n.type){case"filter":e.filter===i.filter?n.renderStatus(t,"active"):n.renderStatus(t,"inactive");break;case"multimix":e.sort===i.sort&&e.filter===i.filter?n.renderStatus(t,"active"):n.renderStatus(t,"inactive");break;case"sort":e.sort.match(/:asc/g)&&(s=e.sort.replace(/:asc/g,"")),e.sort===i.sort||s===i.sort?n.renderStatus(t,"active"):n.renderStatus(t,"inactive");break;case"toggle":for(o.length<1&&n.renderStatus(t,"inactive"),e.filter===i.filter&&n.renderStatus(t,"active"),r=0;r<o.length;r++){if(o[r]===i.filter){n.renderStatus(t,"active");break}n.renderStatus(t,"inactive")}}n.callActions("afterParseStatusChange",arguments)},renderStatus:function(t,e){var i=this;switch(i.callActions("beforeRenderStatus",arguments),e){case"active":f.addClass(t,i.classNames.active),f.removeClass(t,i.classNames.disabled),i.canDisable&&(i.el.disabled=!1);break;case"inactive":f.removeClass(t,i.classNames.active),f.removeClass(t,i.classNames.disabled),i.canDisable&&(i.el.disabled=!1);break;case"disabled":i.canDisable&&(i.el.disabled=!0),f.addClass(t,i.classNames.disabled),f.removeClass(t,i.classNames.active)}"live"!==i.status&&(i.status=e),i.callActions("afterRenderStatus",arguments)}}),p.controls=[],p.StyleData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.x=0,this.y=0,this.top=0,this.right=0,this.bottom=0,this.left=0,this.width=0,this.height=0,this.marginRight=0,this.marginBottom=0,this.opacity=0,this.scale=new p.TransformData,this.translateX=new p.TransformData,this.translateY=new p.TransformData,this.translateZ=new p.TransformData,this.rotateX=new p.TransformData,this.rotateY=new p.TransformData,this.rotateZ=new p.TransformData,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.StyleData),p.StyleData.prototype=Object.create(p.Base.prototype),p.StyleData.prototype.constructor=p.StyleData,p.TransformData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.value=0,this.unit="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.TransformData),p.TransformData.prototype=Object.create(p.Base.prototype),p.TransformData.prototype.constructor=p.TransformData,p.TransformDefaults=function(){p.StyleData.apply(this),this.callActions("beforeConstruct"),this.scale.value=.01,this.scale.unit="",this.translateX.value=20,this.translateX.unit="px",this.translateY.value=20,this.translateY.unit="px",this.translateZ.value=20,this.translateZ.unit="px",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateY.value=90,this.rotateY.unit="deg",this.rotateX.value=90,this.rotateX.unit="deg",this.rotateZ.value=180,this.rotateZ.unit="deg",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.TransformDefaults),p.TransformDefaults.prototype=Object.create(p.StyleData.prototype),p.TransformDefaults.prototype.constructor=p.TransformDefaults,p.transformDefaults=new p.TransformDefaults,p.EventDetail=function(){this.state=null,this.futureState=null,this.instance=null,this.originalEvent=null},p.Events=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.mixStart=null,this.mixBusy=null,this.mixEnd=null,this.mixFail=null,this.mixClick=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Events),p.Events.prototype=Object.create(p.Base.prototype),p.Events.prototype.constructor=p.Events,p.Events.prototype.fire=function(t,e,i,o){var n,s=new p.EventDetail;if(this.callActions("beforeFire",arguments),void 0===this[t])throw new Error('Event type "'+t+'" not found.');s.state=new p.State,f.extend(s.state,i.state),i.futureState&&(s.futureState=new p.State,f.extend(s.futureState,i.futureState)),s.instance=i.instance,i.originalEvent&&(s.originalEvent=i.originalEvent),n=f.getCustomEvent(t,s,o),this.callFilters("eventFire",n,arguments),e.dispatchEvent(n)},p.events=new p.Events,p.QueueItem=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.args=[],this.instruction=null,this.triggerElement=null,this.deferred=null,this.isToggling=!1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.QueueItem),p.QueueItem.prototype=Object.create(p.Base.prototype),p.QueueItem.prototype.constructor=p.QueueItem,p.Mixer=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.config=new p.Config,this.id="",this.isBusy=!1,this.isToggling=!1,this.incPadding=!0,this.controls=[],this.targets=[],this.origOrder=[],this.cache={},this.toggleArray=[],this.targetsMoved=0,this.targetsImmovable=0,this.targetsBound=0,this.targetsDone=0,this.staggerDuration=0,this.effectsIn=null,this.effectsOut=null,this.transformIn=[],this.transformOut=[],this.queue=[],this.state=null,this.lastOperation=null,this.lastClicked=null,this.userCallback=null,this.userDeferred=null,this.dom=new p.MixerDom,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Mixer),p.Mixer.prototype=Object.create(p.Base.prototype),f.extend(p.Mixer.prototype,{constructor:p.Mixer,attach:function(t,e,i,o){var n=this,s=null,r=-1;for(n.callActions("beforeAttach",arguments),n.id=i,o&&f.extend(n.config,o,!0,!0),n.sanitizeConfig(),n.cacheDom(t,e),n.config.layout.containerClassName&&f.addClass(n.dom.container,n.config.layout.containerClassName),p.features.has.transitions||(n.config.animation.enable=!1),void 0===h.console&&(n.config.debug.showWarnings=!1),n.config.data.uidKey&&(n.config.controls.enable=!1),n.indexTargets(),n.state=n.getInitialState(),r=0;s=n.lastOperation.toHide[r];r++)s.hide();n.config.controls.enable&&(n.initControls(),n.buildToggleArray(null,n.state),n.updateControls({filter:n.state.activeFilter,sort:n.state.activeSort})),n.parseEffects(),n.callActions("afterAttach",arguments)},sanitizeConfig:function(){var t=this;t.callActions("beforeSanitizeConfig",arguments),t.config.controls.scope=t.config.controls.scope.toLowerCase().trim(),t.config.controls.toggleLogic=t.config.controls.toggleLogic.toLowerCase().trim(),t.config.controls.toggleDefault=t.config.controls.toggleDefault.toLowerCase().trim(),t.config.animation.effects=t.config.animation.effects.trim(),t.callActions("afterSanitizeConfig",arguments)},getInitialState:function(){var t=this,e=new p.State,i=new p.Operation;if(t.callActions("beforeGetInitialState",arguments),e.activeContainerClassName=t.config.layout.containerClassName,t.config.load.dataset){if(!t.config.data.uidKey||"string"!=typeof t.config.data.uidKey)throw new TypeError(p.messages.errorConfigDataUidKeyNotSet());i.startDataset=i.newDataset=e.activeDataset=t.config.load.dataset.slice(),i.startContainerClassName=i.newContainerClassName=e.activeContainerClassName,i.show=t.targets.slice(),e=t.callFilters("stateGetInitialState",e,arguments)}else e.activeFilter=t.parseFilterArgs([t.config.load.filter]).command,e.activeSort=t.parseSortArgs([t.config.load.sort]).command,e.totalTargets=t.targets.length,(e=t.callFilters("stateGetInitialState",e,arguments)).activeSort.collection||e.activeSort.attribute||"random"===e.activeSort.order||"desc"===e.activeSort.order?(i.newSort=e.activeSort,t.sortOperation(i),t.printSort(!1,i),t.targets=i.newOrder):i.startOrder=i.newOrder=t.targets,i.startFilter=i.newFilter=e.activeFilter,i.startSort=i.newSort=e.activeSort,i.startContainerClassName=i.newContainerClassName=e.activeContainerClassName,"all"===i.newFilter.selector?i.newFilter.selector=t.config.selectors.target:"none"===i.newFilter.selector&&(i.newFilter.selector="");return i=t.callFilters("operationGetInitialState",i,[e]),(t.lastOperation=i).newFilter&&t.filterOperation(i),e=t.buildState(i)},cacheDom:function(t,e){var i=this;i.callActions("beforeCacheDom",arguments),i.dom.document=e,i.dom.body=i.dom.document.querySelector("body"),i.dom.container=t,i.dom.parent=t,i.callActions("afterCacheDom",arguments)},indexTargets:function(){var t,e=this,i=null,o=null,n=-1;if(e.callActions("beforeIndexTargets",arguments),e.dom.targets=e.config.layout.allowNestedTargets?e.dom.container.querySelectorAll(e.config.selectors.target):f.children(e.dom.container,e.config.selectors.target,e.dom.document),e.dom.targets=f.arrayFromList(e.dom.targets),e.targets=[],(t=e.config.load.dataset)&&t.length!==e.dom.targets.length)throw new Error(p.messages.errorDatasetPrerenderedMismatch());if(e.dom.targets.length){for(n=0;o=e.dom.targets[n];n++)(i=new p.Target).init(o,e,t?t[n]:void 0),i.isInDom=!0,e.targets.push(i);e.dom.parent=e.dom.targets[0].parentElement===e.dom.container?e.dom.container:e.dom.targets[0].parentElement}e.origOrder=e.targets,e.callActions("afterIndexTargets",arguments)},initControls:function(){var t=this,e="",i=null,o=null,n=null,s=null,r=null,a=-1,l=-1;switch(t.callActions("beforeInitControls",arguments),t.config.controls.scope){case"local":n=t.dom.container;break;case"global":n=t.dom.document;break;default:throw new Error(p.messages.errorConfigInvalidControlsScope())}for(a=0;e=p.controlDefinitions[a];a++)if(t.config.controls.live||e.live){if(e.parent){if(!(s=t.dom[e.parent])||s.length<0)continue;"number"!=typeof s.length&&(s=[s])}else s=[n];for(l=0;o=s[l];l++)r=t.getControl(o,e.type,e.selector),t.controls.push(r)}else for(i=n.querySelectorAll(t.config.selectors.control+e.selector),l=0;o=i[l];l++)(r=t.getControl(o,e.type,""))&&t.controls.push(r);t.callActions("afterInitControls",arguments)},getControl:function(t,e,i){var o=this,n=null,s=-1;if(o.callActions("beforeGetControl",arguments),!i)for(s=0;n=p.controls[s];s++){if(n.el===t&&n.isBound(o))return o.callFilters("controlGetControl",null,arguments);if(n.el===t&&n.type===e&&n.selector===i)return n.addBinding(o),o.callFilters("controlGetControl",n,arguments)}return(n=new p.Control).init(t,e,i),n.classNames.base=f.getClassname(o.config.classNames,e),n.classNames.active=f.getClassname(o.config.classNames,e,o.config.classNames.modifierActive),n.classNames.disabled=f.getClassname(o.config.classNames,e,o.config.classNames.modifierDisabled),n.addBinding(o),o.callFilters("controlGetControl",n,arguments)},getToggleSelector:function(){var t=this,e="or"===t.config.controls.toggleLogic?", ":"",i="";return t.callActions("beforeGetToggleSelector",arguments),t.toggleArray=f.clean(t.toggleArray),""===(i=t.toggleArray.join(e))&&(i=t.config.controls.toggleDefault),t.callFilters("selectorGetToggleSelector",i,arguments)},buildToggleArray:function(t,e){var i=this,o="";if(i.callActions("beforeBuildToggleArray",arguments),t&&t.filter)o=t.filter.selector.replace(/\s/g,"");else{if(!e)return;o=e.activeFilter.selector.replace(/\s/g,"")}o!==i.config.selectors.target&&"all"!==o||(o=""),"or"===i.config.controls.toggleLogic?i.toggleArray=o.split(","):i.toggleArray=i.splitCompoundSelector(o),i.toggleArray=f.clean(i.toggleArray),i.callActions("afterBuildToggleArray",arguments)},splitCompoundSelector:function(t){var e=t.split(/([\.\[])/g),i=[],o="",n=-1;for(""===e[0]&&e.shift(),n=0;n<e.length;n++)n%2==0&&(o=""),o+=e[n],n%2!=0&&i.push(o);return i},updateControls:function(t){var e=this,i=null,o=new p.CommandMultimix,n=-1;for(e.callActions("beforeUpdateControls",arguments),t.filter?o.filter=t.filter.selector:o.filter=e.state.activeFilter.selector,t.sort?o.sort=e.buildSortString(t.sort):o.sort=e.buildSortString(e.state.activeSort),o.filter===e.config.selectors.target&&(o.filter="all"),""===o.filter&&(o.filter="none"),f.freeze(o),n=0;i=e.controls[n];n++)i.update(o,e.toggleArray);e.callActions("afterUpdateControls",arguments)},buildSortString:function(t){var e="";return e+=t.sortString,t.next&&(e+=" "+this.buildSortString(t.next)),e},insertTargets:function(t,e){var i,o=this,n=-1,s=null,r=null,a=null,l=-1;if(o.callActions("beforeInsertTargets",arguments),void 0===t.index&&(t.index=0),i=o.getNextSibling(t.index,t.sibling,t.position),s=o.dom.document.createDocumentFragment(),n=i?f.index(i,o.config.selectors.target):o.targets.length,t.collection){for(l=0;a=t.collection[l];l++){if(-1<o.dom.targets.indexOf(a))throw new Error(p.messages.errorInsertPreexistingElement());a.style.display="none",s.appendChild(a),s.appendChild(o.dom.document.createTextNode(" ")),f.isElement(a,o.dom.document)&&a.matches(o.config.selectors.target)&&((r=new p.Target).init(a,o),r.isInDom=!0,o.targets.splice(n,0,r),n++)}o.dom.parent.insertBefore(s,i)}e.startOrder=o.origOrder=o.targets,o.callActions("afterInsertTargets",arguments)},getNextSibling:function(t,e,i){var o=this,n=null;return t=Math.max(t,0),e&&"before"===i?n=e:e&&"after"===i?n=e.nextElementSibling||null:0<o.targets.length&&void 0!==t?n=t<o.targets.length||!o.targets.length?o.targets[t].dom.el:o.targets[o.targets.length-1].dom.el.nextElementSibling:0===o.targets.length&&0<o.dom.parent.children.length&&(o.config.layout.siblingAfter?n=o.config.layout.siblingAfter:o.config.layout.siblingBefore?n=o.config.layout.siblingBefore.nextElementSibling:o.dom.parent.children[0]),o.callFilters("elementGetNextSibling",n,arguments)},filterOperation:function(t){var e,i=!1,o=-1,n=null,s=-1;for(this.callActions("beforeFilterOperation",arguments),e=t.newFilter.action,s=0;n=t.newOrder[s];s++)i=t.newFilter.collection?-1<t.newFilter.collection.indexOf(n.dom.el):""!==t.newFilter.selector&&n.dom.el.matches(t.newFilter.selector),this.evaluateHideShow(i,n,e,t);if(t.toRemove.length)for(s=0;n=t.show[s];s++)-1<t.toRemove.indexOf(n)&&(t.show.splice(s,1),-1<(o=t.toShow.indexOf(n))&&t.toShow.splice(o,1),t.toHide.push(n),t.hide.push(n),s--);t.matching=t.show.slice(),0===t.show.length&&""!==t.newFilter.selector&&0!==this.targets.length&&(t.hasFailed=!0),this.callActions("afterFilterOperation",arguments)},evaluateHideShow:function(t,e,i,o){var n,s=Array.prototype.slice.call(arguments,1);n=this.callFilters("testResultEvaluateHideShow",t,s),this.callActions("beforeEvaluateHideShow",arguments),!0===n&&"show"===i||!1===n&&"hide"===i?(o.show.push(e),e.isShown||o.toShow.push(e)):(o.hide.push(e),e.isShown&&o.toHide.push(e)),this.callActions("afterEvaluateHideShow",arguments)},sortOperation:function(i){var o=this,t=[],e=null,n=null,s=-1;if(o.callActions("beforeSortOperation",arguments),i.startOrder=o.targets,i.newSort.collection){for(t=[],s=0;n=i.newSort.collection[s];s++){if(o.dom.targets.indexOf(n)<0)throw new Error(p.messages.errorSortNonExistentElement());(e=new p.Target).init(n,o),e.isInDom=!0,t.push(e)}i.newOrder=t}else"random"===i.newSort.order?i.newOrder=f.arrayShuffle(i.startOrder):""===i.newSort.attribute?(i.newOrder=o.origOrder.slice(),"desc"===i.newSort.order&&i.newOrder.reverse()):(i.newOrder=i.startOrder.slice(),i.newOrder.sort(function(t,e){return o.compare(t,e,i.newSort)}));f.isEqualArray(i.newOrder,i.startOrder)&&(i.willSort=!1),o.callActions("afterSortOperation",arguments)},compare:function(t,e,i){var o=i.order,n=this.getAttributeValue(t,i.attribute),s=this.getAttributeValue(e,i.attribute);return s=isNaN(+n)||isNaN(+s)?(n=n.toLowerCase(),s.toLowerCase()):(n=+n,+s),n<s?"asc"===o?-1:1:s<n?"asc"===o?1:-1:n===s&&i.next?this.compare(t,e,i.next):0},getAttributeValue:function(t,e){var i;return null===(i=t.dom.el.getAttribute("data-"+e))&&this.config.debug.showWarnings&&console.warn(p.messages.warningInconsistentSortingAttributes({attribute:"data-"+e})),this.callFilters("valueGetAttributeValue",i||0,arguments)},printSort:function(t,e){var i,o=this,n=t?e.newOrder:e.startOrder,s=t?e.startOrder:e.newOrder,r=n.length?n[n.length-1].dom.el.nextElementSibling:null,a=h.document.createDocumentFragment(),l=null,c=null,d=-1;for(o.callActions("beforePrintSort",arguments),d=0;l=n[d];d++)"absolute"!==(c=l.dom.el).style.position&&(f.removeWhitespace(c.previousSibling),c.parentElement.removeChild(c));for((i=r?r.previousSibling:o.dom.parent.lastChild)&&"#text"===i.nodeName&&f.removeWhitespace(i),d=0;l=s[d];d++)c=l.dom.el,f.isElement(a.lastChild)&&a.appendChild(h.document.createTextNode(" ")),a.appendChild(c);o.dom.parent.firstChild&&o.dom.parent.firstChild!==r&&a.insertBefore(h.document.createTextNode(" "),a.childNodes[0]),r?(a.appendChild(h.document.createTextNode(" ")),o.dom.parent.insertBefore(a,r)):o.dom.parent.appendChild(a),o.callActions("afterPrintSort",arguments)},parseSortString:function(t,e){var i=t.split(" "),o=e,n=[],s=-1;for(s=0;s<i.length;s++){switch(n=i[s].split(":"),o.sortString=i[s],o.attribute=f.dashCase(n[0]),o.order=n[1]||"asc",o.attribute){case"default":o.attribute="";break;case"random":o.attribute="",o.order="random"}if(!o.attribute||"random"===o.order)break;s<i.length-1&&(o.next=new p.CommandSort,f.freeze(o),o=o.next)}return this.callFilters("commandsParseSort",e,arguments)},parseEffects:function(){var t=this,e="",i=t.config.animation.effectsIn||t.config.animation.effects,o=t.config.animation.effectsOut||t.config.animation.effects;for(e in t.callActions("beforeParseEffects",arguments),t.effectsIn=new p.StyleData,t.effectsOut=new p.StyleData,t.transformIn=[],t.transformOut=[],t.effectsIn.opacity=t.effectsOut.opacity=1,t.parseEffect("fade",i,t.effectsIn,t.transformIn),t.parseEffect("fade",o,t.effectsOut,t.transformOut,!0),p.transformDefaults)p.transformDefaults[e]instanceof p.TransformData&&(t.parseEffect(e,i,t.effectsIn,t.transformIn),t.parseEffect(e,o,t.effectsOut,t.transformOut,!0));t.parseEffect("stagger",i,t.effectsIn,t.transformIn),t.parseEffect("stagger",o,t.effectsOut,t.transformOut,!0),t.callActions("afterParseEffects",arguments)},parseEffect:function(t,e,i,o,n){var s,r=this,a="",l="",c=["%","px","em","rem","vh","vw","deg"],d="",u=-1;if(r.callActions("beforeParseEffect",arguments),"string"!=typeof e)throw new TypeError(p.messages.errorConfigInvalidAnimationEffects());if(e.indexOf(t)<0)"stagger"===t&&(r.staggerDuration=0);else{switch(-1<(s=e.indexOf(t+"("))&&(a=e.substring(s),l=/\(([^)]+)\)/.exec(a)[1]),t){case"fade":i.opacity=l?parseFloat(l):0;break;case"stagger":r.staggerDuration=l?parseFloat(l):100;break;default:if(n&&r.config.animation.reverseOut&&"scale"!==t?i[t].value=-1*(l?parseFloat(l):p.transformDefaults[t].value):i[t].value=l?parseFloat(l):p.transformDefaults[t].value,l){for(u=0;d=c[u];u++)if(-1<l.indexOf(d)){i[t].unit=d;break}}else i[t].unit=p.transformDefaults[t].unit;o.push(t+"("+i[t].value+i[t].unit+")")}r.callActions("afterParseEffect",arguments)}},buildState:function(t){var e=this,i=new p.State,o=null,n=-1;for(e.callActions("beforeBuildState",arguments),n=0;o=e.targets[n];n++)(!t.toRemove.length||t.toRemove.indexOf(o)<0)&&i.targets.push(o.dom.el);for(n=0;o=t.matching[n];n++)i.matching.push(o.dom.el);for(n=0;o=t.show[n];n++)i.show.push(o.dom.el);for(n=0;o=t.hide[n];n++)(!t.toRemove.length||t.toRemove.indexOf(o)<0)&&i.hide.push(o.dom.el);return i.id=e.id,i.container=e.dom.container,i.activeFilter=t.newFilter,i.activeSort=t.newSort,i.activeDataset=t.newDataset,i.activeContainerClassName=t.newContainerClassName,i.hasFailed=t.hasFailed,i.totalTargets=e.targets.length,i.totalShow=t.show.length,i.totalHide=t.hide.length,i.totalMatching=t.matching.length,i.triggerElement=t.triggerElement,e.callFilters("stateBuildState",i,arguments)},goMix:function(t,e){var i=this,o=null;return i.callActions("beforeGoMix",arguments),i.config.animation.duration&&i.config.animation.effects&&f.isVisible(i.dom.container)||(t=!1),e.toShow.length||e.toHide.length||e.willSort||e.willChangeLayout||(t=!1),e.startState.show.length||e.show.length||(t=!1),p.events.fire("mixStart",i.dom.container,{state:e.startState,futureState:e.newState,instance:i},i.dom.document),"function"==typeof i.config.callbacks.onMixStart&&i.config.callbacks.onMixStart.call(i.dom.container,e.startState,e.newState,i),f.removeClass(i.dom.container,f.getClassname(i.config.classNames,"container",i.config.classNames.modifierFailed)),o=i.userDeferred?i.userDeferred:i.userDeferred=f.defer(p.libraries),i.isBusy=!0,t&&p.features.has.transitions?(h.pageYOffset!==e.docState.scrollTop&&h.scrollTo(e.docState.scrollLeft,e.docState.scrollTop),i.config.animation.applyPerspective&&(i.dom.parent.style[p.features.perspectiveProp]=i.config.animation.perspectiveDistance,i.dom.parent.style[p.features.perspectiveOriginProp]=i.config.animation.perspectiveOrigin),i.config.animation.animateResizeContainer&&e.startHeight!==e.newHeight&&e.viewportDeltaY!==e.startHeight-e.newHeight&&(i.dom.parent.style.height=e.startHeight+"px"),i.config.animation.animateResizeContainer&&e.startWidth!==e.newWidth&&e.viewportDeltaX!==e.startWidth-e.newWidth&&(i.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&(i.dom.parent.style.height=e.startHeight+"px"),e.startWidth===e.newWidth&&(i.dom.parent.style.width=e.startWidth+"px"),e.startHeight===e.newHeight&&e.startWidth===e.newWidth&&(i.dom.parent.style.overflow="hidden"),requestAnimationFrame(function(){i.moveTargets(e)})):i.config.debug.fauxAsync?setTimeout(function(){i.cleanUp(e)},i.config.animation.duration):i.cleanUp(e),i.callFilters("promiseGoMix",o.promise,arguments)},getStartMixData:function(t){var e=this,i=h.getComputedStyle(e.dom.parent),o=e.dom.parent.getBoundingClientRect(),n=null,s={},r=-1,a=i[p.features.boxSizingProp];for(e.incPadding="border-box"===a,e.callActions("beforeGetStartMixData",arguments),r=0;n=t.show[r];r++)s=n.getPosData(),t.showPosData[r]={startPosData:s};for(r=0;n=t.toHide[r];r++)s=n.getPosData(),t.toHidePosData[r]={startPosData:s};t.startX=o.left,t.startY=o.top,t.startHeight=e.incPadding?o.height:o.height-parseFloat(i.paddingTop)-parseFloat(i.paddingBottom)-parseFloat(i.borderTop)-parseFloat(i.borderBottom),t.startWidth=e.incPadding?o.width:o.width-parseFloat(i.paddingLeft)-parseFloat(i.paddingRight)-parseFloat(i.borderLeft)-parseFloat(i.borderRight),e.callActions("afterGetStartMixData",arguments)},setInter:function(t){var e=this,i=null,o=-1;for(e.callActions("beforeSetInter",arguments),e.config.animation.clampHeight&&(e.dom.parent.style.height=t.startHeight+"px",e.dom.parent.style.overflow="hidden"),e.config.animation.clampWidth&&(e.dom.parent.style.width=t.startWidth+"px",e.dom.parent.style.overflow="hidden"),o=0;i=t.toShow[o];o++)i.show();t.willChangeLayout&&(f.removeClass(e.dom.container,t.startContainerClassName),f.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterSetInter",arguments)},getInterMixData:function(t){var e=null,i=-1;for(this.callActions("beforeGetInterMixData",arguments),i=0;e=t.show[i];i++)t.showPosData[i].interPosData=e.getPosData();for(i=0;e=t.toHide[i];i++)t.toHidePosData[i].interPosData=e.getPosData();this.callActions("afterGetInterMixData",arguments)},setFinal:function(t){var e=null,i=-1;for(this.callActions("beforeSetFinal",arguments),t.willSort&&this.printSort(!1,t),i=0;e=t.toHide[i];i++)e.hide();this.callActions("afterSetFinal",arguments)},getFinalMixData:function(t){var e,i=this,o=null,n=null,s=-1;for(i.callActions("beforeGetFinalMixData",arguments),s=0;n=t.show[s];s++)t.showPosData[s].finalPosData=n.getPosData();for(s=0;n=t.toHide[s];s++)t.toHidePosData[s].finalPosData=n.getPosData();for((i.config.animation.clampHeight||i.config.animation.clampWidth)&&(i.dom.parent.style.height=i.dom.parent.style.width=i.dom.parent.style.overflow=""),i.incPadding||(o=h.getComputedStyle(i.dom.parent)),e=i.dom.parent.getBoundingClientRect(),t.newX=e.left,t.newY=e.top,t.newHeight=i.incPadding?e.height:e.height-parseFloat(o.paddingTop)-parseFloat(o.paddingBottom)-parseFloat(o.borderTop)-parseFloat(o.borderBottom),t.newWidth=i.incPadding?e.width:e.width-parseFloat(o.paddingLeft)-parseFloat(o.paddingRight)-parseFloat(o.borderLeft)-parseFloat(o.borderRight),t.viewportDeltaX=t.docState.viewportWidth-this.dom.document.documentElement.clientWidth,t.viewportDeltaY=t.docState.viewportHeight-this.dom.document.documentElement.clientHeight,t.willSort&&i.printSort(!0,t),s=0;n=t.toShow[s];s++)n.hide();for(s=0;n=t.toHide[s];s++)n.show();t.willChangeLayout&&(f.removeClass(i.dom.container,t.newContainerClassName),f.addClass(i.dom.container,i.config.layout.containerClassName)),i.callActions("afterGetFinalMixData",arguments)},getTweenData:function(t){var e=this,i=null,o=null,n=Object.getOwnPropertyNames(e.effectsIn),s="",r=null,a=-1,l=-1,c=-1,d=-1;for(e.callActions("beforeGetTweenData",arguments),c=0;i=t.show[c];c++)for((o=t.showPosData[c]).posIn=new p.StyleData,o.posOut=new p.StyleData,o.tweenData=new p.StyleData,i.isShown?(o.posIn.x=o.startPosData.x-o.interPosData.x,o.posIn.y=o.startPosData.y-o.interPosData.y):o.posIn.x=o.posIn.y=0,o.posOut.x=o.finalPosData.x-o.interPosData.x,o.posOut.y=o.finalPosData.y-o.interPosData.y,o.posIn.opacity=i.isShown?1:e.effectsIn.opacity,o.posOut.opacity=1,o.tweenData.opacity=o.posOut.opacity-o.posIn.opacity,i.isShown||e.config.animation.nudge||(o.posIn.x=o.posOut.x,o.posIn.y=o.posOut.y),o.tweenData.x=o.posOut.x-o.posIn.x,o.tweenData.y=o.posOut.y-o.posIn.y,e.config.animation.animateResizeTargets&&(o.posIn.width=o.startPosData.width,o.posIn.height=o.startPosData.height,a=(o.startPosData.width||o.finalPosData.width)-o.interPosData.width,o.posIn.marginRight=o.startPosData.marginRight-a,l=(o.startPosData.height||o.finalPosData.height)-o.interPosData.height,o.posIn.marginBottom=o.startPosData.marginBottom-l,o.posOut.width=o.finalPosData.width,o.posOut.height=o.finalPosData.height,a=(o.finalPosData.width||o.startPosData.width)-o.interPosData.width,o.posOut.marginRight=o.finalPosData.marginRight-a,l=(o.finalPosData.height||o.startPosData.height)-o.interPosData.height,o.posOut.marginBottom=o.finalPosData.marginBottom-l,o.tweenData.width=o.posOut.width-o.posIn.width,o.tweenData.height=o.posOut.height-o.posIn.height,o.tweenData.marginRight=o.posOut.marginRight-o.posIn.marginRight,o.tweenData.marginBottom=o.posOut.marginBottom-o.posIn.marginBottom),d=0;s=n[d];d++)(r=e.effectsIn[s])instanceof p.TransformData&&r.value&&(o.posIn[s].value=r.value,o.posOut[s].value=0,o.tweenData[s].value=o.posOut[s].value-o.posIn[s].value,o.posIn[s].unit=o.posOut[s].unit=o.tweenData[s].unit=r.unit);for(c=0;i=t.toHide[c];c++)for((o=t.toHidePosData[c]).posIn=new p.StyleData,o.posOut=new p.StyleData,o.tweenData=new p.StyleData,o.posIn.x=i.isShown?o.startPosData.x-o.interPosData.x:0,o.posIn.y=i.isShown?o.startPosData.y-o.interPosData.y:0,o.posOut.x=e.config.animation.nudge?0:o.posIn.x,o.posOut.y=e.config.animation.nudge?0:o.posIn.y,o.tweenData.x=o.posOut.x-o.posIn.x,o.tweenData.y=o.posOut.y-o.posIn.y,e.config.animation.animateResizeTargets&&(o.posIn.width=o.startPosData.width,o.posIn.height=o.startPosData.height,a=o.startPosData.width-o.interPosData.width,o.posIn.marginRight=o.startPosData.marginRight-a,l=o.startPosData.height-o.interPosData.height,o.posIn.marginBottom=o.startPosData.marginBottom-l),o.posIn.opacity=1,o.posOut.opacity=e.effectsOut.opacity,o.tweenData.opacity=o.posOut.opacity-o.posIn.opacity,d=0;s=n[d];d++)(r=e.effectsOut[s])instanceof p.TransformData&&r.value&&(o.posIn[s].value=0,o.posOut[s].value=r.value,o.tweenData[s].value=o.posOut[s].value-o.posIn[s].value,o.posIn[s].unit=o.posOut[s].unit=o.tweenData[s].unit=r.unit);e.callActions("afterGetTweenData",arguments)},moveTargets:function(t){var e=this,i=null,o=null,n=null,s="",r=!1,a=-1,l=-1,c=e.checkProgress.bind(e);for(e.callActions("beforeMoveTargets",arguments),l=0;i=t.show[l];l++)o=new p.IMoveData,n=t.showPosData[l],s=i.isShown?"none":"show",(r=e.willTransition(s,t.hasEffect,n.posIn,n.posOut))&&a++,i.show(),o.posIn=n.posIn,o.posOut=n.posOut,o.statusChange=s,o.staggerIndex=a,o.operation=t,o.callback=r?c:null,i.move(o);for(l=0;i=t.toHide[l];l++)n=t.toHidePosData[l],o=new p.IMoveData,s="hide",r=e.willTransition(s,n.posIn,n.posOut),o.posIn=n.posIn,o.posOut=n.posOut,o.statusChange=s,o.staggerIndex=l,o.operation=t,o.callback=r?c:null,i.move(o);e.config.animation.animateResizeContainer&&(e.dom.parent.style[p.features.transitionProp]="height "+e.config.animation.duration+"ms ease, width "+e.config.animation.duration+"ms ease ",requestAnimationFrame(function(){t.startHeight!==t.newHeight&&t.viewportDeltaY!==t.startHeight-t.newHeight&&(e.dom.parent.style.height=t.newHeight+"px"),t.startWidth!==t.newWidth&&t.viewportDeltaX!==t.startWidth-t.newWidth&&(e.dom.parent.style.width=t.newWidth+"px")})),t.willChangeLayout&&(f.removeClass(e.dom.container,e.config.layout.ContainerClassName),f.addClass(e.dom.container,t.newContainerClassName)),e.callActions("afterMoveTargets",arguments)},hasEffect:function(){var t=["scale","translateX","translateY","translateZ","rotateX","rotateY","rotateZ"],e="",i=null,o=!1,n=-1;if(1!==this.effectsIn.opacity)return this.callFilters("resultHasEffect",!0,arguments);for(n=0;e=t[n];n++)if(0!==("undefined"!==(i=this.effectsIn[e]).value?i.value:i)){o=!0;break}return this.callFilters("resultHasEffect",o,arguments)},willTransition:function(t,e,i,o){var n=!1;return n=!!f.isVisible(this.dom.container)&&(!!("none"!==t&&e||i.x!==o.x||i.y!==o.y)||!!this.config.animation.animateResizeTargets&&(i.width!==o.width||i.height!==o.height||i.marginRight!==o.marginRight||i.marginTop!==o.marginTop)),this.callFilters("resultWillTransition",n,arguments)},checkProgress:function(t){this.targetsDone++,this.targetsBound===this.targetsDone&&this.cleanUp(t)},cleanUp:function(t){var e=this,i=null,o=null,n=null,s=null,r=-1;for(e.callActions("beforeCleanUp",arguments),e.targetsMoved=e.targetsImmovable=e.targetsBound=e.targetsDone=0,r=0;i=t.show[r];r++)i.cleanUp(),i.show();for(r=0;i=t.toHide[r];r++)i.cleanUp(),i.hide();if(t.willSort&&e.printSort(!1,t),e.dom.parent.style[p.features.transitionProp]=e.dom.parent.style.height=e.dom.parent.style.width=e.dom.parent.style.overflow=e.dom.parent.style[p.features.perspectiveProp]=e.dom.parent.style[p.features.perspectiveOriginProp]="",t.willChangeLayout&&(f.removeClass(e.dom.container,t.startContainerClassName),f.addClass(e.dom.container,t.newContainerClassName)),t.toRemove.length){for(r=0;i=e.targets[r];r++)-1<t.toRemove.indexOf(i)&&((o=i.dom.el.previousSibling)&&"#text"===o.nodeName&&(n=i.dom.el.nextSibling)&&"#text"===n.nodeName&&f.removeWhitespace(o),t.willSort||e.dom.parent.removeChild(i.dom.el),e.targets.splice(r,1),i.isInDom=!1,r--);e.origOrder=e.targets}t.willSort&&(e.targets=t.newOrder),e.state=t.newState,e.lastOperation=t,e.dom.targets=e.state.targets,p.events.fire("mixEnd",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixEnd&&e.config.callbacks.onMixEnd.call(e.dom.container,e.state,e),t.hasFailed&&(p.events.fire("mixFail",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixFail&&e.config.callbacks.onMixFail.call(e.dom.container,e.state,e),f.addClass(e.dom.container,f.getClassname(e.config.classNames,"container",e.config.classNames.modifierFailed))),"function"==typeof e.userCallback&&e.userCallback.call(e.dom.container,e.state,e),"function"==typeof e.userDeferred.resolve&&e.userDeferred.resolve(e.state),e.userCallback=null,e.userDeferred=null,e.lastClicked=null,e.isToggling=!1,e.isBusy=!1,e.queue.length&&(e.callActions("beforeReadQueueCleanUp",arguments),s=e.queue.shift(),e.userDeferred=s.deferred,e.isToggling=s.isToggling,e.lastClicked=s.triggerElement,s.instruction.command instanceof p.CommandMultimix?e.multimix.apply(e,s.args):e.dataset.apply(e,s.args)),e.callActions("afterCleanUp",arguments)},parseMultimixArgs:function(t){var e=this,i=new p.UserInstruction,o=null,n=-1;for(i.animate=e.config.animation.enable,i.command=new p.CommandMultimix,n=0;n<t.length;n++)null!==(o=t[n])&&("object"==typeof o?f.extend(i.command,o):"boolean"==typeof o?i.animate=o:"function"==typeof o&&(i.callback=o));return!i.command.insert||i.command.insert instanceof p.CommandInsert||(i.command.insert=e.parseInsertArgs([i.command.insert]).command),!i.command.remove||i.command.remove instanceof p.CommandRemove||(i.command.remove=e.parseRemoveArgs([i.command.remove]).command),!i.command.filter||i.command.filter instanceof p.CommandFilter||(i.command.filter=e.parseFilterArgs([i.command.filter]).command),!i.command.sort||i.command.sort instanceof p.CommandSort||(i.command.sort=e.parseSortArgs([i.command.sort]).command),!i.command.changeLayout||i.command.changeLayout instanceof p.CommandChangeLayout||(i.command.changeLayout=e.parseChangeLayoutArgs([i.command.changeLayout]).command),i=e.callFilters("instructionParseMultimixArgs",i,arguments),f.freeze(i),i},parseFilterArgs:function(t){var e=new p.UserInstruction,i=null,o=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandFilter,o=0;o<t.length;o++)"string"==typeof(i=t[o])?e.command.selector=i:null===i?e.command.collection=[]:"object"==typeof i&&f.isElement(i,this.dom.document)?e.command.collection=[i]:"object"==typeof i&&void 0!==i.length?e.command.collection=f.arrayFromList(i):"object"==typeof i?f.extend(e.command,i):"boolean"==typeof i?e.animate=i:"function"==typeof i&&(e.callback=i);if(e.command.selector&&e.command.collection)throw new Error(p.messages.errorFilterInvalidArguments());return e=this.callFilters("instructionParseFilterArgs",e,arguments),f.freeze(e),e},parseSortArgs:function(t){var e=new p.UserInstruction,i=null,o="",n=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandSort,n=0;n<t.length;n++)if(null!==(i=t[n]))switch(typeof i){case"string":o=i;break;case"object":i.length&&(e.command.collection=f.arrayFromList(i));break;case"boolean":e.animate=i;break;case"function":e.callback=i}return o&&(e.command=this.parseSortString(o,e.command)),e=this.callFilters("instructionParseSortArgs",e,arguments),f.freeze(e),e},parseInsertArgs:function(t){var e=new p.UserInstruction,i=null,o=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandInsert,o=0;o<t.length;o++)null!==(i=t[o])&&("number"==typeof i?e.command.index=i:"string"==typeof i&&-1<["before","after"].indexOf(i)?e.command.position=i:"string"==typeof i?e.command.collection=f.arrayFromList(f.createElement(i).childNodes):"object"==typeof i&&f.isElement(i,this.dom.document)?e.command.collection.length?e.command.sibling=i:e.command.collection=[i]:"object"==typeof i&&i.length?e.command.collection.length?e.command.sibling=i[0]:e.command.collection=i:"object"==typeof i&&i.childNodes&&i.childNodes.length?e.command.collection.length?e.command.sibling=i.childNodes[0]:e.command.collection=f.arrayFromList(i.childNodes):"object"==typeof i?f.extend(e.command,i):"boolean"==typeof i?e.animate=i:"function"==typeof i&&(e.callback=i));if(e.command.index&&e.command.sibling)throw new Error(p.messages.errorInsertInvalidArguments());return!e.command.collection.length&&this.config.debug.showWarnings&&console.warn(p.messages.warningInsertNoElements()),e=this.callFilters("instructionParseInsertArgs",e,arguments),f.freeze(e),e},parseRemoveArgs:function(t){var e=this,i=new p.UserInstruction,o=null,n=null,s=-1;for(i.animate=e.config.animation.enable,i.command=new p.CommandRemove,s=0;s<t.length;s++)if(null!==(n=t[s]))switch(typeof n){case"number":e.targets[n]&&(i.command.targets[0]=e.targets[n]);break;case"string":i.command.collection=f.arrayFromList(e.dom.parent.querySelectorAll(n));break;case"object":n&&n.length?i.command.collection=n:f.isElement(n,e.dom.document)?i.command.collection=[n]:f.extend(i.command,n);break;case"boolean":i.animate=n;break;case"function":i.callback=n}if(i.command.collection.length)for(s=0;o=e.targets[s];s++)-1<i.command.collection.indexOf(o.dom.el)&&i.command.targets.push(o);return!i.command.targets.length&&e.config.debug.showWarnings&&console.warn(p.messages.warningRemoveNoElements()),f.freeze(i),i},parseDatasetArgs:function(t){var e=new p.UserInstruction,i=null,o=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandDataset,o=0;o<t.length;o++)if(null!==(i=t[o]))switch(typeof i){case"object":Array.isArray(i)||"number"==typeof i.length?e.command.dataset=i:f.extend(e.command,i);break;case"boolean":e.animate=i;break;case"function":e.callback=i}return f.freeze(e),e},parseChangeLayoutArgs:function(t){var e=new p.UserInstruction,i=null,o=-1;for(e.animate=this.config.animation.enable,e.command=new p.CommandChangeLayout,o=0;o<t.length;o++)if(null!==(i=t[o]))switch(typeof i){case"string":e.command.containerClassName=i;break;case"object":f.extend(e.command,i);break;case"boolean":e.animate=i;break;case"function":e.callback=i}return f.freeze(e),e},queueMix:function(t){var e=this,i=null,o="";return e.callActions("beforeQueueMix",arguments),i=f.defer(p.libraries),e.config.animation.queue&&e.queue.length<e.config.animation.queueLimit?(t.deferred=i,e.queue.push(t),e.config.controls.enable&&(e.isToggling?(e.buildToggleArray(t.instruction.command),o=e.getToggleSelector(),e.updateControls({filter:{selector:o}})):e.updateControls(t.instruction.command))):(e.config.debug.showWarnings&&console.warn(p.messages.warningMultimixInstanceQueueFull()),i.resolve(e.state),p.events.fire("mixBusy",e.dom.container,{state:e.state,instance:e},e.dom.document),"function"==typeof e.config.callbacks.onMixBusy&&e.config.callbacks.onMixBusy.call(e.dom.container,e.state,e)),e.callFilters("promiseQueueMix",i.promise,arguments)},getDataOperation:function(t){var e=this,i=new p.Operation,o=[];if(i=e.callFilters("operationUnmappedGetDataOperation",i,arguments),e.dom.targets.length&&!(o=e.state.activeDataset||[]).length)throw new Error(p.messages.errorDatasetNotSet());return i.id=f.randomHex(),i.startState=e.state,i.startDataset=o,i.newDataset=t.slice(),e.diffDatasets(i),i.startOrder=e.targets,i.newOrder=i.show,e.config.animation.enable&&(e.getStartMixData(i),e.setInter(i),i.docState=f.getDocumentState(e.dom.document),e.getInterMixData(i),e.setFinal(i),e.getFinalMixData(i),e.parseEffects(),i.hasEffect=e.hasEffect(),e.getTweenData(i)),e.targets=i.show.slice(),i.newState=e.buildState(i),Array.prototype.push.apply(e.targets,i.toRemove),i=e.callFilters("operationMappedGetDataOperation",i,arguments)},diffDatasets:function(t){var e=this,i=[],o=[],n=[],s=null,r=null,a=null,l=null,c=null,d={},u="",h=-1;for(e.callActions("beforeDiffDatasets",arguments),h=0;s=t.newDataset[h];h++){if(void 0===(u=s[e.config.data.uidKey])||u.toString().length<1)throw new TypeError(p.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));if(d[u])throw new Error(p.messages.errorDatasetDuplicateUid({uid:u}));d[u]=!0,(r=e.cache[u])instanceof p.Target?(e.config.data.dirtyCheck&&!f.deepEquals(s,r.data)&&(a=r.render(s),r.data=s,a!==r.dom.el&&(r.isInDom&&(r.unbindEvents(),e.dom.parent.replaceChild(a,r.dom.el)),r.isShown||(a.style.display="none"),r.dom.el=a,r.isInDom&&r.bindEvents())),a=r.dom.el):((r=new p.Target).init(null,e,s),r.hide()),r.isInDom?(c=r.dom.el.nextElementSibling,o.push(u),l&&(l.lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,r.dom.el,n),l=null)):((l=l||e.dom.document.createDocumentFragment()).lastElementChild&&l.appendChild(e.dom.document.createTextNode(" ")),l.appendChild(r.dom.el),r.isInDom=!0,r.unbindEvents(),r.bindEvents(),r.hide(),t.toShow.push(r),n.push(r)),t.show.push(r)}for(l&&((c=c||e.config.layout.siblingAfter)&&l.appendChild(e.dom.document.createTextNode(" ")),e.insertDatasetFrag(l,c,n)),h=0;s=t.startDataset[h];h++)u=s[e.config.data.uidKey],r=e.cache[u],t.show.indexOf(r)<0?(t.hide.push(r),t.toHide.push(r),t.toRemove.push(r)):i.push(u);f.isEqualArray(i,o)||(t.willSort=!0),e.callActions("afterDiffDatasets",arguments)},insertDatasetFrag:function(t,e,i){var o=e?f.arrayFromList(this.dom.parent.children).indexOf(e):this.targets.length;for(this.dom.parent.insertBefore(t,e);i.length;)this.targets.splice(o,0,i.shift()),o++},willSort:function(t,e){var i=!1;return i=!!(this.config.behavior.liveSort||"random"===t.order||t.attribute!==e.attribute||t.order!==e.order||t.collection!==e.collection||null===t.next&&e.next||t.next&&null===e.next)||!(!t.next||!e.next)&&this.willSort(t.next,e.next),this.callFilters("resultWillSort",i,arguments)},show:function(){return this.filter("all")},hide:function(){return this.filter("none")},isMixing:function(){return this.isBusy},filter:function(){var t=this.parseFilterArgs(arguments);return this.multimix({filter:t.command},t.animate,t.callback)},toggleOn:function(){var t,e=this,i=e.parseFilterArgs(arguments),o=i.command.selector;return e.isToggling=!0,e.toggleArray.indexOf(o)<0&&e.toggleArray.push(o),t=e.getToggleSelector(),e.multimix({filter:t},i.animate,i.callback)},toggleOff:function(){var t,e=this,i=e.parseFilterArgs(arguments),o=i.command.selector,n=e.toggleArray.indexOf(o);return e.isToggling=!0,-1<n&&e.toggleArray.splice(n,1),t=e.getToggleSelector(),e.multimix({filter:t},i.animate,i.callback)},sort:function(){var t=this.parseSortArgs(arguments);return this.multimix({sort:t.command},t.animate,t.callback)},changeLayout:function(){var t=this.parseChangeLayoutArgs(arguments);return this.multimix({changeLayout:t.command},t.animate,t.callback)},dataset:function(){var t=this,e=t.parseDatasetArgs(arguments),i=null,o=null,n=!1;return t.callActions("beforeDataset",arguments),t.isBusy?((o=new p.QueueItem).args=arguments,o.instruction=e,t.queueMix(o)):(e.callback&&(t.userCallback=e.callback),n=e.animate^t.config.animation.enable?e.animate:t.config.animation.enable,i=t.getDataOperation(e.command.dataset),t.goMix(n,i))},multimix:function(){var t=this,e=null,i=!1,o=null,n=t.parseMultimixArgs(arguments);return t.callActions("beforeMultimix",arguments),t.isBusy?((o=new p.QueueItem).args=arguments,o.instruction=n,o.triggerElement=t.lastClicked,o.isToggling=t.isToggling,t.queueMix(o)):(e=t.getOperation(n.command),t.config.controls.enable&&(n.command.filter&&!t.isToggling&&(t.toggleArray.length=0,t.buildToggleArray(e.command)),t.queue.length<1&&t.updateControls(e.command)),n.callback&&(t.userCallback=n.callback),i=n.animate^t.config.animation.enable?n.animate:t.config.animation.enable,t.callFilters("operationMultimix",e,arguments),t.goMix(i,e))},getOperation:function(t){var e=this,i=t.sort,o=t.filter,n=t.changeLayout,s=t.remove,r=t.insert,a=new p.Operation;return(a=e.callFilters("operationUnmappedGetOperation",a,arguments)).id=f.randomHex(),a.command=t,a.startState=e.state,a.triggerElement=e.lastClicked,e.isBusy?(e.config.debug.showWarnings&&console.warn(p.messages.warningGetOperationInstanceBusy()),null):(r&&e.insertTargets(r,a),s&&(a.toRemove=s.targets),a.startSort=a.newSort=a.startState.activeSort,a.startOrder=a.newOrder=e.targets,i&&(a.startSort=a.startState.activeSort,a.newSort=i,a.willSort=e.willSort(i,a.startState.activeSort),a.willSort&&e.sortOperation(a)),a.startFilter=a.startState.activeFilter,a.newFilter=o||f.extend(new p.CommandFilter,a.startFilter),"all"===a.newFilter.selector?a.newFilter.selector=e.config.selectors.target:"none"===a.newFilter.selector&&(a.newFilter.selector=""),e.filterOperation(a),a.startContainerClassName=a.startState.activeContainerClassName,n?(a.newContainerClassName=n.containerClassName,a.newContainerClassName!==a.startContainerClassName&&(a.willChangeLayout=!0)):a.newContainerClassName=a.startContainerClassName,e.config.animation.enable&&(e.getStartMixData(a),e.setInter(a),a.docState=f.getDocumentState(e.dom.document),e.getInterMixData(a),e.setFinal(a),e.getFinalMixData(a),e.parseEffects(),a.hasEffect=e.hasEffect(),e.getTweenData(a)),a.willSort&&(e.targets=a.newOrder),a.newState=e.buildState(a),e.callFilters("operationMappedGetOperation",a,arguments))},tween:function(t,e){var i=null,o=null,n=-1,s=-1;for(e=Math.min(e,1),e=Math.max(e,0),s=0;i=t.show[s];s++)o=t.showPosData[s],i.applyTween(o,e);for(s=0;i=t.hide[s];s++)i.isShown&&i.hide(),-1<(n=t.toHide.indexOf(i))&&(o=t.toHidePosData[n],i.isShown||i.show(),i.applyTween(o,e))},insert:function(){var t=this.parseInsertArgs(arguments);return this.multimix({insert:t.command},t.animate,t.callback)},insertBefore:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"before",t.command.sibling,t.animate,t.callback)},insertAfter:function(){var t=this.parseInsertArgs(arguments);return this.insert(t.command.collection,"after",t.command.sibling,t.animate,t.callback)},prepend:function(){var t=this.parseInsertArgs(arguments);return this.insert(0,t.command.collection,t.animate,t.callback)},append:function(){var t=this.parseInsertArgs(arguments);return this.insert(this.state.totalTargets,t.command.collection,t.animate,t.callback)},remove:function(){var t=this.parseRemoveArgs(arguments);return this.multimix({remove:t.command},t.animate,t.callback)},getConfig:function(t){var e=null;return e=t?f.getProperty(this.config,t):this.config,this.callFilters("valueGetConfig",e,arguments)},configure:function(t){this.callActions("beforeConfigure",arguments),f.extend(this.config,t,!0,!0),this.callActions("afterConfigure",arguments)},getState:function(){var t;return t=new p.State,f.extend(t,this.state),f.freeze(t),this.callFilters("stateGetState",t,arguments)},forceRefresh:function(){this.indexTargets()},forceRender:function(){var t=this,e=null,i=null,o="";for(o in t.cache)(i=(e=t.cache[o]).render(e.data))!==e.dom.el&&(e.isInDom&&(e.unbindEvents(),t.dom.parent.replaceChild(i,e.dom.el)),e.isShown||(i.style.display="none"),e.dom.el=i,e.isInDom&&e.bindEvents());t.state=t.buildState(t.lastOperation)},destroy:function(t){var e=this,i=null,o=null,n=0;for(e.callActions("beforeDestroy",arguments),n=0;i=e.controls[n];n++)i.removeBinding(e);for(n=0;o=e.targets[n];n++)t&&o.show(),o.unbindEvents();e.dom.container.id.match(/^MixItUp/)&&e.dom.container.removeAttribute("id"),delete p.instances[e.id],e.callActions("afterDestroy",arguments)}}),p.IMoveData=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.posIn=null,this.posOut=null,this.operation=null,this.callback=null,this.statusChange="",this.duration=-1,this.staggerIndex=-1,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.IMoveData),p.IMoveData.prototype=Object.create(p.Base.prototype),p.IMoveData.prototype.constructor=p.IMoveData,p.TargetDom=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.el=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.TargetDom),p.TargetDom.prototype=Object.create(p.Base.prototype),p.TargetDom.prototype.constructor=p.TargetDom,p.Target=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.sortString="",this.mixer=null,this.callback=null,this.isShown=!1,this.isBound=!1,this.isExcluded=!1,this.isInDom=!1,this.handler=null,this.operation=null,this.data=null,this.dom=new p.TargetDom,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Target),p.Target.prototype=Object.create(p.Base.prototype),f.extend(p.Target.prototype,{constructor:p.Target,init:function(t,e,i){var o=this,n="";if(o.callActions("beforeInit",arguments),o.mixer=e,t=t||o.render(i),o.cacheDom(t),o.bindEvents(),"none"!==o.dom.el.style.display&&(o.isShown=!0),i&&e.config.data.uidKey){if(void 0===(n=i[e.config.data.uidKey])||n.toString().length<1)throw new TypeError(p.messages.errorDatasetInvalidUidKey({uidKey:e.config.data.uidKey}));o.id=n,o.data=i,e.cache[n]=o}o.callActions("afterInit",arguments)},render:function(t){var e,i=null,o=null,n=null;if(this.callActions("beforeRender",arguments),"function"!=typeof(i=this.callFilters("renderRender",this.mixer.config.render.target,arguments)))throw new TypeError(p.messages.errorDatasetRendererNotSet());return(e=i(t))&&"object"==typeof e&&f.isElement(e)?o=e:"string"==typeof e&&((n=document.createElement("div")).innerHTML=e,o=n.firstElementChild),this.callFilters("elRender",o,arguments)},cacheDom:function(t){this.callActions("beforeCacheDom",arguments),this.dom.el=t,this.callActions("afterCacheDom",arguments)},getSortString:function(t){var e=this.dom.el.getAttribute("data-"+t)||"";this.callActions("beforeGetSortString",arguments),e=isNaN(+e)?e.toLowerCase():+e,this.sortString=e,this.callActions("afterGetSortString",arguments)},show:function(){var t=this;t.callActions("beforeShow",arguments),t.isShown||(t.dom.el.style.display="",t.isShown=!0),t.callActions("afterShow",arguments)},hide:function(){var t=this;t.callActions("beforeHide",arguments),t.isShown&&(t.dom.el.style.display="none",t.isShown=!1),t.callActions("afterHide",arguments)},move:function(t){var e=this;e.callActions("beforeMove",arguments),e.isExcluded||e.mixer.targetsMoved++,e.applyStylesIn(t),requestAnimationFrame(function(){e.applyStylesOut(t)}),e.callActions("afterMove",arguments)},applyTween:function(t,e){var i=this,o="",n=null,s=t.posIn,r=[],a=new p.StyleData,l=-1;for(i.callActions("beforeApplyTween",arguments),a.x=s.x,a.y=s.y,0===e?i.hide():i.isShown||i.show(),l=0;o=p.features.TWEENABLE[l];l++)if(n=t.tweenData[o],"x"===o){if(!n)continue;a.x=s.x+n*e}else if("y"===o){if(!n)continue;a.y=s.y+n*e}else if(n instanceof p.TransformData){if(!n.value)continue;a[o].value=s[o].value+n.value*e,a[o].unit=n.unit,r.push(o+"("+a[o].value+n.unit+")")}else{if(!n)continue;a[o]=s[o]+n*e,i.dom.el.style[o]=a[o]}(a.x||a.y)&&r.unshift("translate("+a.x+"px, "+a.y+"px)"),r.length&&(i.dom.el.style[p.features.transformProp]=r.join(" ")),i.callActions("afterApplyTween",arguments)},applyStylesIn:function(t){var e=this,i=t.posIn,o=1!==e.mixer.effectsIn.opacity,n=[];e.callActions("beforeApplyStylesIn",arguments),n.push("translate("+i.x+"px, "+i.y+"px)"),e.mixer.config.animation.animateResizeTargets&&("show"!==t.statusChange&&(e.dom.el.style.width=i.width+"px",e.dom.el.style.height=i.height+"px"),e.dom.el.style.marginRight=i.marginRight+"px",e.dom.el.style.marginBottom=i.marginBottom+"px"),o&&(e.dom.el.style.opacity=i.opacity),"show"===t.statusChange&&(n=n.concat(e.mixer.transformIn)),e.dom.el.style[p.features.transformProp]=n.join(" "),e.callActions("afterApplyStylesIn",arguments)},applyStylesOut:function(t){var e=this,i=[],o=[],n=e.mixer.config.animation.animateResizeTargets,s=void 0!==e.mixer.effectsIn.opacity;if(e.callActions("beforeApplyStylesOut",arguments),i.push(e.writeTransitionRule(p.features.transformRule,t.staggerIndex)),"none"!==t.statusChange&&i.push(e.writeTransitionRule("opacity",t.staggerIndex,t.duration)),n&&(i.push(e.writeTransitionRule("width",t.staggerIndex,t.duration)),i.push(e.writeTransitionRule("height",t.staggerIndex,t.duration)),i.push(e.writeTransitionRule("margin",t.staggerIndex,t.duration))),!t.callback)return e.mixer.targetsImmovable++,void(e.mixer.targetsMoved===e.mixer.targetsImmovable&&e.mixer.cleanUp(t.operation));switch(e.operation=t.operation,e.callback=t.callback,e.isExcluded||e.mixer.targetsBound++,e.isBound=!0,e.applyTransition(i),n&&0<t.posOut.width&&0<t.posOut.height&&(e.dom.el.style.width=t.posOut.width+"px",e.dom.el.style.height=t.posOut.height+"px",e.dom.el.style.marginRight=t.posOut.marginRight+"px",e.dom.el.style.marginBottom=t.posOut.marginBottom+"px"),e.mixer.config.animation.nudge||"hide"!==t.statusChange||o.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),t.statusChange){case"hide":s&&(e.dom.el.style.opacity=e.mixer.effectsOut.opacity),o=o.concat(e.mixer.transformOut);break;case"show":s&&(e.dom.el.style.opacity=1)}(e.mixer.config.animation.nudge||!e.mixer.config.animation.nudge&&"hide"!==t.statusChange)&&o.push("translate("+t.posOut.x+"px, "+t.posOut.y+"px)"),e.dom.el.style[p.features.transformProp]=o.join(" "),e.callActions("afterApplyStylesOut",arguments)},writeTransitionRule:function(t,e,i){var o,n=this.getDelay(e);return o=t+" "+(0<i?i:this.mixer.config.animation.duration)+"ms "+n+"ms "+("opacity"===t?"linear":this.mixer.config.animation.easing),this.callFilters("ruleWriteTransitionRule",o,arguments)},getDelay:function(t){var e,i=this;return"function"==typeof i.mixer.config.animation.staggerSequence&&(t=i.mixer.config.animation.staggerSequence.call(i,t,i.state)),e=i.mixer.staggerDuration?t*i.mixer.staggerDuration:0,i.callFilters("delayGetDelay",e,arguments)},applyTransition:function(t){var e=t.join(", ");this.callActions("beforeApplyTransition",arguments),this.dom.el.style[p.features.transitionProp]=e,this.callActions("afterApplyTransition",arguments)},handleTransitionEnd:function(t){var e=this,i=t.propertyName,o=e.mixer.config.animation.animateResizeTargets;e.callActions("beforeHandleTransitionEnd",arguments),e.isBound&&t.target.matches(e.mixer.config.selectors.target)&&(-1<i.indexOf("transform")||-1<i.indexOf("opacity")||o&&-1<i.indexOf("height")||o&&-1<i.indexOf("width")||o&&-1<i.indexOf("margin"))&&(e.callback.call(e,e.operation),e.isBound=!1,e.callback=null,e.operation=null),e.callActions("afterHandleTransitionEnd",arguments)},eventBus:function(t){switch(this.callActions("beforeEventBus",arguments),t.type){case"webkitTransitionEnd":case"transitionend":this.handleTransitionEnd(t)}this.callActions("afterEventBus",arguments)},unbindEvents:function(){var t=this;t.callActions("beforeUnbindEvents",arguments),f.off(t.dom.el,"webkitTransitionEnd",t.handler),f.off(t.dom.el,"transitionend",t.handler),t.callActions("afterUnbindEvents",arguments)},bindEvents:function(){var t,e=this;e.callActions("beforeBindEvents",arguments),t="webkit"===p.features.transitionPrefix?"webkitTransitionEnd":"transitionend",e.handler=function(t){return e.eventBus(t)},f.on(e.dom.el,t,e.handler),e.callActions("afterBindEvents",arguments)},getPosData:function(t){var e=this,i={},o=null,n=new p.StyleData;return e.callActions("beforeGetPosData",arguments),n.x=e.dom.el.offsetLeft,n.y=e.dom.el.offsetTop,(e.mixer.config.animation.animateResizeTargets||t)&&(o=e.dom.el.getBoundingClientRect(),n.top=o.top,n.right=o.right,n.bottom=o.bottom,n.left=o.left,n.width=o.width,n.height=o.height),e.mixer.config.animation.animateResizeTargets&&(i=h.getComputedStyle(e.dom.el),n.marginBottom=parseFloat(i.marginBottom),n.marginRight=parseFloat(i.marginRight)),e.callFilters("posDataGetPosData",n,arguments)},cleanUp:function(){var t=this;t.callActions("beforeCleanUp",arguments),t.dom.el.style[p.features.transformProp]="",t.dom.el.style[p.features.transitionProp]="",t.dom.el.style.opacity="",t.mixer.config.animation.animateResizeTargets&&(t.dom.el.style.width="",t.dom.el.style.height="",t.dom.el.style.marginRight="",t.dom.el.style.marginBottom=""),t.callActions("afterCleanUp",arguments)}}),p.Collection=function(t){var e=null,i=-1;for(this.callActions("beforeConstruct"),i=0;e=t[i];i++)this[i]=e;this.length=t.length,this.callActions("afterConstruct"),f.freeze(this)},p.BaseStatic.call(p.Collection),p.Collection.prototype=Object.create(p.Base.prototype),f.extend(p.Collection.prototype,{constructor:p.Collection,mixitup:function(t){var e=null,i=Array.prototype.slice.call(arguments),o=[],n=-1;for(this.callActions("beforeMixitup"),i.shift(),n=0;e=this[n];n++)o.push(e[t].apply(e,i));return this.callFilters("promiseMixitup",f.all(o,p.libraries),arguments)}}),p.Operation=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.args=[],this.command=null,this.showPosData=[],this.toHidePosData=[],this.startState=null,this.newState=null,this.docState=null,this.willSort=!1,this.willChangeLayout=!1,this.hasEffect=!1,this.hasFailed=!1,this.triggerElement=null,this.show=[],this.hide=[],this.matching=[],this.toShow=[],this.toHide=[],this.toMove=[],this.toRemove=[],this.startOrder=[],this.newOrder=[],this.startSort=null,this.newSort=null,this.startFilter=null,this.newFilter=null,this.startDataset=null,this.newDataset=null,this.viewportDeltaX=0,this.viewportDeltaY=0,this.startX=0,this.startY=0,this.startHeight=0,this.startWidth=0,this.newX=0,this.newY=0,this.newHeight=0,this.newWidth=0,this.startContainerClassName="",this.startDisplay="",this.newContainerClassName="",this.newDisplay="",this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.Operation),p.Operation.prototype=Object.create(p.Base.prototype),p.Operation.prototype.constructor=p.Operation,p.State=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.id="",this.activeFilter=null,this.activeSort=null,this.activeContainerClassName="",this.container=null,this.targets=[],this.hide=[],this.show=[],this.matching=[],this.totalTargets=-1,this.totalShow=-1,this.totalHide=-1,this.totalMatching=-1,this.hasFailed=!1,this.triggerElement=null,this.activeDataset=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.State),p.State.prototype=Object.create(p.Base.prototype),p.State.prototype.constructor=p.State,p.UserInstruction=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.command={},this.animate=!1,this.callback=null,this.callActions("afterConstruct"),f.seal(this)},p.BaseStatic.call(p.UserInstruction),p.UserInstruction.prototype=Object.create(p.Base.prototype),p.UserInstruction.prototype.constructor=p.UserInstruction,p.Messages=function(){p.Base.call(this),this.callActions("beforeConstruct"),this.ERROR_FACTORY_INVALID_CONTAINER="[MixItUp] An invalid selector or element reference was passed to the mixitup factory function",this.ERROR_FACTORY_CONTAINER_NOT_FOUND="[MixItUp] The provided selector yielded no container element",this.ERROR_CONFIG_INVALID_ANIMATION_EFFECTS="[MixItUp] Invalid value for `animation.effects`",this.ERROR_CONFIG_INVALID_CONTROLS_SCOPE="[MixItUp] Invalid value for `controls.scope`",this.ERROR_CONFIG_INVALID_PROPERTY='[MixitUp] Invalid configuration object property "${erroneous}"${suggestion}',this.ERROR_CONFIG_INVALID_PROPERTY_SUGGESTION='. Did you mean "${probableMatch}"?',this.ERROR_CONFIG_DATA_UID_KEY_NOT_SET="[MixItUp] To use the dataset API, a UID key must be specified using `data.uidKey`",this.ERROR_DATASET_INVALID_UID_KEY='[MixItUp] The specified UID key "${uidKey}" is not present on one or more dataset items',this.ERROR_DATASET_DUPLICATE_UID='[MixItUp] The UID "${uid}" was found on two or more dataset items. UIDs must be unique.',this.ERROR_INSERT_INVALID_ARGUMENTS="[MixItUp] Please provider either an index or a sibling and position to insert, not both",this.ERROR_INSERT_PREEXISTING_ELEMENT="[MixItUp] An element to be inserted already exists in the container",this.ERROR_FILTER_INVALID_ARGUMENTS="[MixItUp] Please provide either a selector or collection `.filter()`, not both",this.ERROR_DATASET_NOT_SET="[MixItUp] To use the dataset API with pre-rendered targets, a starting dataset must be set using `load.dataset`",this.ERROR_DATASET_PRERENDERED_MISMATCH="[MixItUp] `load.dataset` does not match pre-rendered targets",this.ERROR_DATASET_RENDERER_NOT_SET="[MixItUp] To insert an element via the dataset API, a target renderer function must be provided to `render.target`",this.ERROR_SORT_NON_EXISTENT_ELEMENT="[MixItUp] An element to be sorted does not already exist in the container",this.WARNING_FACTORY_PREEXISTING_INSTANCE="[MixItUp] WARNING: This element already has an active MixItUp instance. The provided configuration object will be ignored. If you wish to perform additional methods on this instance, please create a reference.",this.WARNING_INSERT_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.insert()`",this.WARNING_REMOVE_NO_ELEMENTS="[MixItUp] WARNING: No valid elements were passed to `.remove()`",this.WARNING_MULTIMIX_INSTANCE_QUEUE_FULL="[MixItUp] WARNING: An operation was requested but the MixItUp instance was busy. The operation was rejected because the queue is full or queuing is disabled.",this.WARNING_GET_OPERATION_INSTANCE_BUSY="[MixItUp] WARNING: Operations can be be created while the MixItUp instance is busy.",this.WARNING_NO_PROMISE_IMPLEMENTATION="[MixItUp] WARNING: No Promise implementations could be found. If you wish to use promises with MixItUp please install an ES6 Promise polyfill.",this.WARNING_INCONSISTENT_SORTING_ATTRIBUTES='[MixItUp] WARNING: The requested sorting data attribute "${attribute}" was not present on one or more target elements which may product unexpected sort output',this.callActions("afterConstruct"),this.compileTemplates(),f.seal(this)},p.BaseStatic.call(p.Messages),p.Messages.prototype=Object.create(p.Base.prototype),p.Messages.prototype.constructor=p.Messages,p.Messages.prototype.compileTemplates=function(){var t="",e="";for(t in this)"string"==typeof(e=this[t])&&(this[f.camelCase(t)]=f.template(e))},p.messages=new p.Messages,p.Facade=function(t){p.Base.call(this),this.callActions("beforeConstruct",arguments),this.configure=t.configure.bind(t),this.show=t.show.bind(t),this.hide=t.hide.bind(t),this.filter=t.filter.bind(t),this.toggleOn=t.toggleOn.bind(t),this.toggleOff=t.toggleOff.bind(t),this.sort=t.sort.bind(t),this.changeLayout=t.changeLayout.bind(t),this.multimix=t.multimix.bind(t),this.dataset=t.dataset.bind(t),this.tween=t.tween.bind(t),this.insert=t.insert.bind(t),this.insertBefore=t.insertBefore.bind(t),this.insertAfter=t.insertAfter.bind(t),this.prepend=t.prepend.bind(t),this.append=t.append.bind(t),this.remove=t.remove.bind(t),this.destroy=t.destroy.bind(t),this.forceRefresh=t.forceRefresh.bind(t),this.forceRender=t.forceRender.bind(t),this.isMixing=t.isMixing.bind(t),this.getOperation=t.getOperation.bind(t),this.getConfig=t.getConfig.bind(t),this.getState=t.getState.bind(t),this.callActions("afterConstruct",arguments),f.freeze(this),f.seal(this)},p.BaseStatic.call(p.Facade),p.Facade.prototype=Object.create(p.Base.prototype),p.Facade.prototype.constructor=p.Facade,"object"==typeof exports&&"object"==typeof module?module.exports=p:"function"==typeof define&&define.amd?define(function(){return p}):void 0!==h.mixitup&&"function"==typeof h.mixitup||(h.mixitup=p),p.BaseStatic.call(p.constructor),p.NAME="mixitup",p.CORE_VERSION="3.3.1"}(window),function(t){"use strict";"function"==typeof define&&define.amd?define(["jquery"],t):"undefined"!=typeof exports?module.exports=t(require("jquery")):t(jQuery)}(function(c){"use strict";var n,r=window.Slick||{};n=0,(r=function(t,e){var i,o=this;o.defaults={accessibility:!0,adaptiveHeight:!1,appendArrows:c(t),appendDots:c(t),arrows:!0,asNavFor:null,prevArrow:'<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',nextArrow:'<button class="slick-next" aria-label="Next" type="button">Next</button>',autoplay:!1,autoplaySpeed:3e3,centerMode:!1,centerPadding:"50px",cssEase:"ease",customPaging:function(t,e){return c('<button type="button" />').text(e+1)},dots:!1,dotsClass:"slick-dots",draggable:!0,easing:"linear",edgeFriction:.35,fade:!1,focusOnSelect:!1,focusOnChange:!1,infinite:!0,initialSlide:0,lazyLoad:"ondemand",mobileFirst:!1,pauseOnHover:!0,pauseOnFocus:!0,pauseOnDotsHover:!1,respondTo:"window",responsive:null,rows:1,rtl:!1,slide:"",slidesPerRow:1,slidesToShow:1,slidesToScroll:1,speed:500,swipe:!0,swipeToSlide:!1,touchMove:!0,touchThreshold:5,useCSS:!0,useTransform:!0,variableWidth:!1,vertical:!1,verticalSwiping:!1,waitForAnimate:!0,zIndex:1e3},o.initials={animating:!1,dragging:!1,autoPlayTimer:null,currentDirection:0,currentLeft:null,currentSlide:0,direction:1,$dots:null,listWidth:null,listHeight:null,loadIndex:0,$nextArrow:null,$prevArrow:null,scrolling:!1,slideCount:null,slideWidth:null,$slideTrack:null,$slides:null,sliding:!1,slideOffset:0,swipeLeft:null,swiping:!1,$list:null,touchObject:{},transformsEnabled:!1,unslicked:!1},c.extend(o,o.initials),o.activeBreakpoint=null,o.animType=null,o.animProp=null,o.breakpoints=[],o.breakpointSettings=[],o.cssTransitions=!1,o.focussed=!1,o.interrupted=!1,o.hidden="hidden",o.paused=!0,o.positionProp=null,o.respondTo=null,o.rowCount=1,o.shouldClick=!0,o.$slider=c(t),o.$slidesCache=null,o.transformType=null,o.transitionType=null,o.visibilityChange="visibilitychange",o.windowWidth=0,o.windowTimer=null,i=c(t).data("slick")||{},o.options=c.extend({},o.defaults,e,i),o.currentSlide=o.options.initialSlide,o.originalSettings=o.options,void 0!==document.mozHidden?(o.hidden="mozHidden",o.visibilityChange="mozvisibilitychange"):void 0!==document.webkitHidden&&(o.hidden="webkitHidden",o.visibilityChange="webkitvisibilitychange"),o.autoPlay=c.proxy(o.autoPlay,o),o.autoPlayClear=c.proxy(o.autoPlayClear,o),o.autoPlayIterator=c.proxy(o.autoPlayIterator,o),o.changeSlide=c.proxy(o.changeSlide,o),o.clickHandler=c.proxy(o.clickHandler,o),o.selectHandler=c.proxy(o.selectHandler,o),o.setPosition=c.proxy(o.setPosition,o),o.swipeHandler=c.proxy(o.swipeHandler,o),o.dragHandler=c.proxy(o.dragHandler,o),o.keyHandler=c.proxy(o.keyHandler,o),o.instanceUid=n++,o.htmlExpr=/^(?:\s*(<[\w\W]+>)[^>]*)$/,o.registerBreakpoints(),o.init(!0)}).prototype.activateADA=function(){this.$slideTrack.find(".slick-active").attr({"aria-hidden":"false"}).find("a, input, button, select").attr({tabindex:"0"})},r.prototype.addSlide=r.prototype.slickAdd=function(t,e,i){var o=this;if("boolean"==typeof e)i=e,e=null;else if(e<0||e>=o.slideCount)return!1;o.unload(),"number"==typeof e?0===e&&0===o.$slides.length?c(t).appendTo(o.$slideTrack):i?c(t).insertBefore(o.$slides.eq(e)):c(t).insertAfter(o.$slides.eq(e)):!0===i?c(t).prependTo(o.$slideTrack):c(t).appendTo(o.$slideTrack),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slides.each(function(t,e){c(e).attr("data-slick-index",t)}),o.$slidesCache=o.$slides,o.reinit()},r.prototype.animateHeight=function(){var t=this;if(1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.animate({height:e},t.options.speed)}},r.prototype.animateSlide=function(t,e){var i={},o=this;o.animateHeight(),!0===o.options.rtl&&!1===o.options.vertical&&(t=-t),!1===o.transformsEnabled?!1===o.options.vertical?o.$slideTrack.animate({left:t},o.options.speed,o.options.easing,e):o.$slideTrack.animate({top:t},o.options.speed,o.options.easing,e):!1===o.cssTransitions?(!0===o.options.rtl&&(o.currentLeft=-o.currentLeft),c({animStart:o.currentLeft}).animate({animStart:t},{duration:o.options.speed,easing:o.options.easing,step:function(t){t=Math.ceil(t),!1===o.options.vertical?i[o.animType]="translate("+t+"px, 0px)":i[o.animType]="translate(0px,"+t+"px)",o.$slideTrack.css(i)},complete:function(){e&&e.call()}})):(o.applyTransition(),t=Math.ceil(t),!1===o.options.vertical?i[o.animType]="translate3d("+t+"px, 0px, 0px)":i[o.animType]="translate3d(0px,"+t+"px, 0px)",o.$slideTrack.css(i),e&&setTimeout(function(){o.disableTransition(),e.call()},o.options.speed))},r.prototype.getNavTarget=function(){var t=this.options.asNavFor;return t&&null!==t&&(t=c(t).not(this.$slider)),t},r.prototype.asNavFor=function(e){var t=this.getNavTarget();null!==t&&"object"==typeof t&&t.each(function(){var t=c(this).slick("getSlick");t.unslicked||t.slideHandler(e,!0)})},r.prototype.applyTransition=function(t){var e=this,i={};!1===e.options.fade?i[e.transitionType]=e.transformType+" "+e.options.speed+"ms "+e.options.cssEase:i[e.transitionType]="opacity "+e.options.speed+"ms "+e.options.cssEase,!1===e.options.fade?e.$slideTrack.css(i):e.$slides.eq(t).css(i)},r.prototype.autoPlay=function(){var t=this;t.autoPlayClear(),t.slideCount>t.options.slidesToShow&&(t.autoPlayTimer=setInterval(t.autoPlayIterator,t.options.autoplaySpeed))},r.prototype.autoPlayClear=function(){this.autoPlayTimer&&clearInterval(this.autoPlayTimer)},r.prototype.autoPlayIterator=function(){var t=this,e=t.currentSlide+t.options.slidesToScroll;t.paused||t.interrupted||t.focussed||(!1===t.options.infinite&&(1===t.direction&&t.currentSlide+1===t.slideCount-1?t.direction=0:0===t.direction&&(e=t.currentSlide-t.options.slidesToScroll,t.currentSlide-1==0&&(t.direction=1))),t.slideHandler(e))},r.prototype.buildArrows=function(){var t=this;!0===t.options.arrows&&(t.$prevArrow=c(t.options.prevArrow).addClass("slick-arrow"),t.$nextArrow=c(t.options.nextArrow).addClass("slick-arrow"),t.slideCount>t.options.slidesToShow?(t.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"),t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.prependTo(t.options.appendArrows),t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.appendTo(t.options.appendArrows),!0!==t.options.infinite&&t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true")):t.$prevArrow.add(t.$nextArrow).addClass("slick-hidden").attr({"aria-disabled":"true",tabindex:"-1"}))},r.prototype.buildDots=function(){var t,e,i=this;if(!0===i.options.dots&&i.slideCount>i.options.slidesToShow){for(i.$slider.addClass("slick-dotted"),e=c("<ul />").addClass(i.options.dotsClass),t=0;t<=i.getDotCount();t+=1)e.append(c("<li />").append(i.options.customPaging.call(this,i,t)));i.$dots=e.appendTo(i.options.appendDots),i.$dots.find("li").first().addClass("slick-active")}},r.prototype.buildOut=function(){var t=this;t.$slides=t.$slider.children(t.options.slide+":not(.slick-cloned)").addClass("slick-slide"),t.slideCount=t.$slides.length,t.$slides.each(function(t,e){c(e).attr("data-slick-index",t).data("originalStyling",c(e).attr("style")||"")}),t.$slider.addClass("slick-slider"),t.$slideTrack=0===t.slideCount?c('<div class="slick-track"/>').appendTo(t.$slider):t.$slides.wrapAll('<div class="slick-track"/>').parent(),t.$list=t.$slideTrack.wrap('<div class="slick-list"/>').parent(),t.$slideTrack.css("opacity",0),!0!==t.options.centerMode&&!0!==t.options.swipeToSlide||(t.options.slidesToScroll=1),c("img[data-lazy]",t.$slider).not("[src]").addClass("slick-loading"),t.setupInfinite(),t.buildArrows(),t.buildDots(),t.updateDots(),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),!0===t.options.draggable&&t.$list.addClass("draggable")},r.prototype.buildRows=function(){var t,e,i,o,n,s,r,a=this;if(o=document.createDocumentFragment(),s=a.$slider.children(),0<a.options.rows){for(r=a.options.slidesPerRow*a.options.rows,n=Math.ceil(s.length/r),t=0;t<n;t++){var l=document.createElement("div");for(e=0;e<a.options.rows;e++){var c=document.createElement("div");for(i=0;i<a.options.slidesPerRow;i++){var d=t*r+(e*a.options.slidesPerRow+i);s.get(d)&&c.appendChild(s.get(d))}l.appendChild(c)}o.appendChild(l)}a.$slider.empty().append(o),a.$slider.children().children().children().css({width:100/a.options.slidesPerRow+"%",display:"inline-block"})}},r.prototype.checkResponsive=function(t,e){var i,o,n,s=this,r=!1,a=s.$slider.width(),l=window.innerWidth||c(window).width();if("window"===s.respondTo?n=l:"slider"===s.respondTo?n=a:"min"===s.respondTo&&(n=Math.min(l,a)),s.options.responsive&&s.options.responsive.length&&null!==s.options.responsive){for(i in o=null,s.breakpoints)s.breakpoints.hasOwnProperty(i)&&(!1===s.originalSettings.mobileFirst?n<s.breakpoints[i]&&(o=s.breakpoints[i]):n>s.breakpoints[i]&&(o=s.breakpoints[i]));null!==o?null!==s.activeBreakpoint&&o===s.activeBreakpoint&&!e||(s.activeBreakpoint=o,"unslick"===s.breakpointSettings[o]?s.unslick(o):(s.options=c.extend({},s.originalSettings,s.breakpointSettings[o]),!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t)),r=o):null!==s.activeBreakpoint&&(s.activeBreakpoint=null,s.options=s.originalSettings,!0===t&&(s.currentSlide=s.options.initialSlide),s.refresh(t),r=o),t||!1===r||s.$slider.trigger("breakpoint",[s,r])}},r.prototype.changeSlide=function(t,e){var i,o,n=this,s=c(t.currentTarget);switch(s.is("a")&&t.preventDefault(),s.is("li")||(s=s.closest("li")),i=n.slideCount%n.options.slidesToScroll!=0?0:(n.slideCount-n.currentSlide)%n.options.slidesToScroll,t.data.message){case"previous":o=0==i?n.options.slidesToScroll:n.options.slidesToShow-i,n.slideCount>n.options.slidesToShow&&n.slideHandler(n.currentSlide-o,!1,e);break;case"next":o=0==i?n.options.slidesToScroll:i,n.slideCount>n.options.slidesToShow&&n.slideHandler(n.currentSlide+o,!1,e);break;case"index":var r=0===t.data.index?0:t.data.index||s.index()*n.options.slidesToScroll;n.slideHandler(n.checkNavigable(r),!1,e),s.children().trigger("focus");break;default:return}},r.prototype.checkNavigable=function(t){var e,i;if(i=0,t>(e=this.getNavigableIndexes())[e.length-1])t=e[e.length-1];else for(var o in e){if(t<e[o]){t=i;break}i=e[o]}return t},r.prototype.cleanUpEvents=function(){var t=this;t.options.dots&&null!==t.$dots&&(c("li",t.$dots).off("click.slick",t.changeSlide).off("mouseenter.slick",c.proxy(t.interrupt,t,!0)).off("mouseleave.slick",c.proxy(t.interrupt,t,!1)),!0===t.options.accessibility&&t.$dots.off("keydown.slick",t.keyHandler)),t.$slider.off("focus.slick blur.slick"),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow&&t.$prevArrow.off("click.slick",t.changeSlide),t.$nextArrow&&t.$nextArrow.off("click.slick",t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow&&t.$prevArrow.off("keydown.slick",t.keyHandler),t.$nextArrow&&t.$nextArrow.off("keydown.slick",t.keyHandler))),t.$list.off("touchstart.slick mousedown.slick",t.swipeHandler),t.$list.off("touchmove.slick mousemove.slick",t.swipeHandler),t.$list.off("touchend.slick mouseup.slick",t.swipeHandler),t.$list.off("touchcancel.slick mouseleave.slick",t.swipeHandler),t.$list.off("click.slick",t.clickHandler),c(document).off(t.visibilityChange,t.visibility),t.cleanUpSlideEvents(),!0===t.options.accessibility&&t.$list.off("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().off("click.slick",t.selectHandler),c(window).off("orientationchange.slick.slick-"+t.instanceUid,t.orientationChange),c(window).off("resize.slick.slick-"+t.instanceUid,t.resize),c("[draggable!=true]",t.$slideTrack).off("dragstart",t.preventDefault),c(window).off("load.slick.slick-"+t.instanceUid,t.setPosition)},r.prototype.cleanUpSlideEvents=function(){var t=this;t.$list.off("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.off("mouseleave.slick",c.proxy(t.interrupt,t,!1))},r.prototype.cleanUpRows=function(){var t;0<this.options.rows&&((t=this.$slides.children().children()).removeAttr("style"),this.$slider.empty().append(t))},r.prototype.clickHandler=function(t){!1===this.shouldClick&&(t.stopImmediatePropagation(),t.stopPropagation(),t.preventDefault())},r.prototype.destroy=function(t){var e=this;e.autoPlayClear(),e.touchObject={},e.cleanUpEvents(),c(".slick-cloned",e.$slider).detach(),e.$dots&&e.$dots.remove(),e.$prevArrow&&e.$prevArrow.length&&(e.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.prevArrow)&&e.$prevArrow.remove()),e.$nextArrow&&e.$nextArrow.length&&(e.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display",""),e.htmlExpr.test(e.options.nextArrow)&&e.$nextArrow.remove()),e.$slides&&(e.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function(){c(this).attr("style",c(this).data("originalStyling"))}),e.$slideTrack.children(this.options.slide).detach(),e.$slideTrack.detach(),e.$list.detach(),e.$slider.append(e.$slides)),e.cleanUpRows(),e.$slider.removeClass("slick-slider"),e.$slider.removeClass("slick-initialized"),e.$slider.removeClass("slick-dotted"),e.unslicked=!0,t||e.$slider.trigger("destroy",[e])},r.prototype.disableTransition=function(t){var e={};e[this.transitionType]="",!1===this.options.fade?this.$slideTrack.css(e):this.$slides.eq(t).css(e)},r.prototype.fadeSlide=function(t,e){var i=this;!1===i.cssTransitions?(i.$slides.eq(t).css({zIndex:i.options.zIndex}),i.$slides.eq(t).animate({opacity:1},i.options.speed,i.options.easing,e)):(i.applyTransition(t),i.$slides.eq(t).css({opacity:1,zIndex:i.options.zIndex}),e&&setTimeout(function(){i.disableTransition(t),e.call()},i.options.speed))},r.prototype.fadeSlideOut=function(t){var e=this;!1===e.cssTransitions?e.$slides.eq(t).animate({opacity:0,zIndex:e.options.zIndex-2},e.options.speed,e.options.easing):(e.applyTransition(t),e.$slides.eq(t).css({opacity:0,zIndex:e.options.zIndex-2}))},r.prototype.filterSlides=r.prototype.slickFilter=function(t){var e=this;null!==t&&(e.$slidesCache=e.$slides,e.unload(),e.$slideTrack.children(this.options.slide).detach(),e.$slidesCache.filter(t).appendTo(e.$slideTrack),e.reinit())},r.prototype.focusHandler=function(){var i=this;i.$slider.off("focus.slick blur.slick").on("focus.slick blur.slick","*",function(t){t.stopImmediatePropagation();var e=c(this);setTimeout(function(){i.options.pauseOnFocus&&(i.focussed=e.is(":focus"),i.autoPlay())},0)})},r.prototype.getCurrent=r.prototype.slickCurrentSlide=function(){return this.currentSlide},r.prototype.getDotCount=function(){var t=this,e=0,i=0,o=0;if(!0===t.options.infinite)if(t.slideCount<=t.options.slidesToShow)++o;else for(;e<t.slideCount;)++o,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else if(!0===t.options.centerMode)o=t.slideCount;else if(t.options.asNavFor)for(;e<t.slideCount;)++o,e=i+t.options.slidesToScroll,i+=t.options.slidesToScroll<=t.options.slidesToShow?t.options.slidesToScroll:t.options.slidesToShow;else o=1+Math.ceil((t.slideCount-t.options.slidesToShow)/t.options.slidesToScroll);return o-1},r.prototype.getLeft=function(t){var e,i,o,n,s=this,r=0;return s.slideOffset=0,i=s.$slides.first().outerHeight(!0),!0===s.options.infinite?(s.slideCount>s.options.slidesToShow&&(s.slideOffset=s.slideWidth*s.options.slidesToShow*-1,n=-1,!0===s.options.vertical&&!0===s.options.centerMode&&(2===s.options.slidesToShow?n=-1.5:1===s.options.slidesToShow&&(n=-2)),r=i*s.options.slidesToShow*n),s.slideCount%s.options.slidesToScroll!=0&&t+s.options.slidesToScroll>s.slideCount&&s.slideCount>s.options.slidesToShow&&(r=t>s.slideCount?(s.slideOffset=(s.options.slidesToShow-(t-s.slideCount))*s.slideWidth*-1,(s.options.slidesToShow-(t-s.slideCount))*i*-1):(s.slideOffset=s.slideCount%s.options.slidesToScroll*s.slideWidth*-1,s.slideCount%s.options.slidesToScroll*i*-1))):t+s.options.slidesToShow>s.slideCount&&(s.slideOffset=(t+s.options.slidesToShow-s.slideCount)*s.slideWidth,r=(t+s.options.slidesToShow-s.slideCount)*i),s.slideCount<=s.options.slidesToShow&&(r=s.slideOffset=0),!0===s.options.centerMode&&s.slideCount<=s.options.slidesToShow?s.slideOffset=s.slideWidth*Math.floor(s.options.slidesToShow)/2-s.slideWidth*s.slideCount/2:!0===s.options.centerMode&&!0===s.options.infinite?s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)-s.slideWidth:!0===s.options.centerMode&&(s.slideOffset=0,s.slideOffset+=s.slideWidth*Math.floor(s.options.slidesToShow/2)),e=!1===s.options.vertical?t*s.slideWidth*-1+s.slideOffset:t*i*-1+r,!0===s.options.variableWidth&&(o=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(t):s.$slideTrack.children(".slick-slide").eq(t+s.options.slidesToShow),e=!0===s.options.rtl?o[0]?-1*(s.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,!0===s.options.centerMode&&(o=s.slideCount<=s.options.slidesToShow||!1===s.options.infinite?s.$slideTrack.children(".slick-slide").eq(t):s.$slideTrack.children(".slick-slide").eq(t+s.options.slidesToShow+1),e=!0===s.options.rtl?o[0]?-1*(s.$slideTrack.width()-o[0].offsetLeft-o.width()):0:o[0]?-1*o[0].offsetLeft:0,e+=(s.$list.width()-o.outerWidth())/2)),e},r.prototype.getOption=r.prototype.slickGetOption=function(t){return this.options[t]},r.prototype.getNavigableIndexes=function(){var t,e=this,i=0,o=0,n=[];for(t=!1===e.options.infinite?e.slideCount:(i=-1*e.options.slidesToScroll,o=-1*e.options.slidesToScroll,2*e.slideCount);i<t;)n.push(i),i=o+e.options.slidesToScroll,o+=e.options.slidesToScroll<=e.options.slidesToShow?e.options.slidesToScroll:e.options.slidesToShow;return n},r.prototype.getSlick=function(){return this},r.prototype.getSlideCount=function(){var i,o,n=this;return o=!0===n.options.centerMode?n.slideWidth*Math.floor(n.options.slidesToShow/2):0,!0===n.options.swipeToSlide?(n.$slideTrack.find(".slick-slide").each(function(t,e){if(e.offsetLeft-o+c(e).outerWidth()/2>-1*n.swipeLeft)return i=e,!1}),Math.abs(c(i).attr("data-slick-index")-n.currentSlide)||1):n.options.slidesToScroll},r.prototype.goTo=r.prototype.slickGoTo=function(t,e){this.changeSlide({data:{message:"index",index:parseInt(t)}},e)},r.prototype.init=function(t){var e=this;c(e.$slider).hasClass("slick-initialized")||(c(e.$slider).addClass("slick-initialized"),e.buildRows(),e.buildOut(),e.setProps(),e.startLoad(),e.loadSlider(),e.initializeEvents(),e.updateArrows(),e.updateDots(),e.checkResponsive(!0),e.focusHandler()),t&&e.$slider.trigger("init",[e]),!0===e.options.accessibility&&e.initADA(),e.options.autoplay&&(e.paused=!1,e.autoPlay())},r.prototype.initADA=function(){var o=this,i=Math.ceil(o.slideCount/o.options.slidesToShow),n=o.getNavigableIndexes().filter(function(t){return 0<=t&&t<o.slideCount});o.$slides.add(o.$slideTrack.find(".slick-cloned")).attr({"aria-hidden":"true",tabindex:"-1"}).find("a, input, button, select").attr({tabindex:"-1"}),null!==o.$dots&&(o.$slides.not(o.$slideTrack.find(".slick-cloned")).each(function(t){var e=n.indexOf(t);if(c(this).attr({role:"tabpanel",id:"slick-slide"+o.instanceUid+t,tabindex:-1}),-1!==e){var i="slick-slide-control"+o.instanceUid+e;c("#"+i).length&&c(this).attr({"aria-describedby":i})}}),o.$dots.attr("role","tablist").find("li").each(function(t){var e=n[t];c(this).attr({role:"presentation"}),c(this).find("button").first().attr({role:"tab",id:"slick-slide-control"+o.instanceUid+t,"aria-controls":"slick-slide"+o.instanceUid+e,"aria-label":t+1+" of "+i,"aria-selected":null,tabindex:"-1"})}).eq(o.currentSlide).find("button").attr({"aria-selected":"true",tabindex:"0"}).end());for(var t=o.currentSlide,e=t+o.options.slidesToShow;t<e;t++)o.options.focusOnChange?o.$slides.eq(t).attr({tabindex:"0"}):o.$slides.eq(t).removeAttr("tabindex");o.activateADA()},r.prototype.initArrowEvents=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.off("click.slick").on("click.slick",{message:"previous"},t.changeSlide),t.$nextArrow.off("click.slick").on("click.slick",{message:"next"},t.changeSlide),!0===t.options.accessibility&&(t.$prevArrow.on("keydown.slick",t.keyHandler),t.$nextArrow.on("keydown.slick",t.keyHandler)))},r.prototype.initDotEvents=function(){var t=this;!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&(c("li",t.$dots).on("click.slick",{message:"index"},t.changeSlide),!0===t.options.accessibility&&t.$dots.on("keydown.slick",t.keyHandler)),!0===t.options.dots&&!0===t.options.pauseOnDotsHover&&t.slideCount>t.options.slidesToShow&&c("li",t.$dots).on("mouseenter.slick",c.proxy(t.interrupt,t,!0)).on("mouseleave.slick",c.proxy(t.interrupt,t,!1))},r.prototype.initSlideEvents=function(){var t=this;t.options.pauseOnHover&&(t.$list.on("mouseenter.slick",c.proxy(t.interrupt,t,!0)),t.$list.on("mouseleave.slick",c.proxy(t.interrupt,t,!1)))},r.prototype.initializeEvents=function(){var t=this;t.initArrowEvents(),t.initDotEvents(),t.initSlideEvents(),t.$list.on("touchstart.slick mousedown.slick",{action:"start"},t.swipeHandler),t.$list.on("touchmove.slick mousemove.slick",{action:"move"},t.swipeHandler),t.$list.on("touchend.slick mouseup.slick",{action:"end"},t.swipeHandler),t.$list.on("touchcancel.slick mouseleave.slick",{action:"end"},t.swipeHandler),t.$list.on("click.slick",t.clickHandler),c(document).on(t.visibilityChange,c.proxy(t.visibility,t)),!0===t.options.accessibility&&t.$list.on("keydown.slick",t.keyHandler),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),c(window).on("orientationchange.slick.slick-"+t.instanceUid,c.proxy(t.orientationChange,t)),c(window).on("resize.slick.slick-"+t.instanceUid,c.proxy(t.resize,t)),c("[draggable!=true]",t.$slideTrack).on("dragstart",t.preventDefault),c(window).on("load.slick.slick-"+t.instanceUid,t.setPosition),c(t.setPosition)},r.prototype.initUI=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.show(),t.$nextArrow.show()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.show()},r.prototype.keyHandler=function(t){var e=this;t.target.tagName.match("TEXTAREA|INPUT|SELECT")||(37===t.keyCode&&!0===e.options.accessibility?e.changeSlide({data:{message:!0===e.options.rtl?"next":"previous"}}):39===t.keyCode&&!0===e.options.accessibility&&e.changeSlide({data:{message:!0===e.options.rtl?"previous":"next"}}))},r.prototype.lazyLoad=function(){var t,e,i,s=this;function o(t){c("img[data-lazy]",t).each(function(){var t=c(this),e=c(this).attr("data-lazy"),i=c(this).attr("data-srcset"),o=c(this).attr("data-sizes")||s.$slider.attr("data-sizes"),n=document.createElement("img");n.onload=function(){t.animate({opacity:0},100,function(){i&&(t.attr("srcset",i),o&&t.attr("sizes",o)),t.attr("src",e).animate({opacity:1},200,function(){t.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading")}),s.$slider.trigger("lazyLoaded",[s,t,e])})},n.onerror=function(){t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),s.$slider.trigger("lazyLoadError",[s,t,e])},n.src=e})}if(!0===s.options.centerMode?i=!0===s.options.infinite?(e=s.currentSlide+(s.options.slidesToShow/2+1))+s.options.slidesToShow+2:(e=Math.max(0,s.currentSlide-(s.options.slidesToShow/2+1)),s.options.slidesToShow/2+1+2+s.currentSlide):(e=s.options.infinite?s.options.slidesToShow+s.currentSlide:s.currentSlide,i=Math.ceil(e+s.options.slidesToShow),!0===s.options.fade&&(0<e&&e--,i<=s.slideCount&&i++)),t=s.$slider.find(".slick-slide").slice(e,i),"anticipated"===s.options.lazyLoad)for(var n=e-1,r=i,a=s.$slider.find(".slick-slide"),l=0;l<s.options.slidesToScroll;l++)n<0&&(n=s.slideCount-1),t=(t=t.add(a.eq(n))).add(a.eq(r)),n--,r++;o(t),s.slideCount<=s.options.slidesToShow?o(s.$slider.find(".slick-slide")):s.currentSlide>=s.slideCount-s.options.slidesToShow?o(s.$slider.find(".slick-cloned").slice(0,s.options.slidesToShow)):0===s.currentSlide&&o(s.$slider.find(".slick-cloned").slice(-1*s.options.slidesToShow))},r.prototype.loadSlider=function(){var t=this;t.setPosition(),t.$slideTrack.css({opacity:1}),t.$slider.removeClass("slick-loading"),t.initUI(),"progressive"===t.options.lazyLoad&&t.progressiveLazyLoad()},r.prototype.next=r.prototype.slickNext=function(){this.changeSlide({data:{message:"next"}})},r.prototype.orientationChange=function(){this.checkResponsive(),this.setPosition()},r.prototype.pause=r.prototype.slickPause=function(){this.autoPlayClear(),this.paused=!0},r.prototype.play=r.prototype.slickPlay=function(){var t=this;t.autoPlay(),t.options.autoplay=!0,t.paused=!1,t.focussed=!1,t.interrupted=!1},r.prototype.postSlide=function(t){var e=this;e.unslicked||(e.$slider.trigger("afterChange",[e,t]),e.animating=!1,e.slideCount>e.options.slidesToShow&&e.setPosition(),e.swipeLeft=null,e.options.autoplay&&e.autoPlay(),!0===e.options.accessibility&&(e.initADA(),e.options.focusOnChange&&c(e.$slides.get(e.currentSlide)).attr("tabindex",0).focus()))},r.prototype.prev=r.prototype.slickPrev=function(){this.changeSlide({data:{message:"previous"}})},r.prototype.preventDefault=function(t){t.preventDefault()},r.prototype.progressiveLazyLoad=function(t){t=t||1;var e,i,o,n,s,r=this,a=c("img[data-lazy]",r.$slider);a.length?(e=a.first(),i=e.attr("data-lazy"),o=e.attr("data-srcset"),n=e.attr("data-sizes")||r.$slider.attr("data-sizes"),(s=document.createElement("img")).onload=function(){o&&(e.attr("srcset",o),n&&e.attr("sizes",n)),e.attr("src",i).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"),!0===r.options.adaptiveHeight&&r.setPosition(),r.$slider.trigger("lazyLoaded",[r,e,i]),r.progressiveLazyLoad()},s.onerror=function(){t<3?setTimeout(function(){r.progressiveLazyLoad(t+1)},500):(e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"),r.$slider.trigger("lazyLoadError",[r,e,i]),r.progressiveLazyLoad())},s.src=i):r.$slider.trigger("allImagesLoaded",[r])},r.prototype.refresh=function(t){var e,i,o=this;i=o.slideCount-o.options.slidesToShow,!o.options.infinite&&o.currentSlide>i&&(o.currentSlide=i),o.slideCount<=o.options.slidesToShow&&(o.currentSlide=0),e=o.currentSlide,o.destroy(!0),c.extend(o,o.initials,{currentSlide:e}),o.init(),t||o.changeSlide({data:{message:"index",index:e}},!1)},r.prototype.registerBreakpoints=function(){var t,e,i,o=this,n=o.options.responsive||null;if("array"===c.type(n)&&n.length){for(t in o.respondTo=o.options.respondTo||"window",n)if(i=o.breakpoints.length-1,n.hasOwnProperty(t)){for(e=n[t].breakpoint;0<=i;)o.breakpoints[i]&&o.breakpoints[i]===e&&o.breakpoints.splice(i,1),i--;o.breakpoints.push(e),o.breakpointSettings[e]=n[t].settings}o.breakpoints.sort(function(t,e){return o.options.mobileFirst?t-e:e-t})}},r.prototype.reinit=function(){var t=this;t.$slides=t.$slideTrack.children(t.options.slide).addClass("slick-slide"),t.slideCount=t.$slides.length,t.currentSlide>=t.slideCount&&0!==t.currentSlide&&(t.currentSlide=t.currentSlide-t.options.slidesToScroll),t.slideCount<=t.options.slidesToShow&&(t.currentSlide=0),t.registerBreakpoints(),t.setProps(),t.setupInfinite(),t.buildArrows(),t.updateArrows(),t.initArrowEvents(),t.buildDots(),t.updateDots(),t.initDotEvents(),t.cleanUpSlideEvents(),t.initSlideEvents(),t.checkResponsive(!1,!0),!0===t.options.focusOnSelect&&c(t.$slideTrack).children().on("click.slick",t.selectHandler),t.setSlideClasses("number"==typeof t.currentSlide?t.currentSlide:0),t.setPosition(),t.focusHandler(),t.paused=!t.options.autoplay,t.autoPlay(),t.$slider.trigger("reInit",[t])},r.prototype.resize=function(){var t=this;c(window).width()!==t.windowWidth&&(clearTimeout(t.windowDelay),t.windowDelay=window.setTimeout(function(){t.windowWidth=c(window).width(),t.checkResponsive(),t.unslicked||t.setPosition()},50))},r.prototype.removeSlide=r.prototype.slickRemove=function(t,e,i){var o=this;if(t="boolean"==typeof t?!0===(e=t)?0:o.slideCount-1:!0===e?--t:t,o.slideCount<1||t<0||t>o.slideCount-1)return!1;o.unload(),!0===i?o.$slideTrack.children().remove():o.$slideTrack.children(this.options.slide).eq(t).remove(),o.$slides=o.$slideTrack.children(this.options.slide),o.$slideTrack.children(this.options.slide).detach(),o.$slideTrack.append(o.$slides),o.$slidesCache=o.$slides,o.reinit()},r.prototype.setCSS=function(t){var e,i,o=this,n={};!0===o.options.rtl&&(t=-t),e="left"==o.positionProp?Math.ceil(t)+"px":"0px",i="top"==o.positionProp?Math.ceil(t)+"px":"0px",n[o.positionProp]=t,!1===o.transformsEnabled||(!(n={})===o.cssTransitions?n[o.animType]="translate("+e+", "+i+")":n[o.animType]="translate3d("+e+", "+i+", 0px)"),o.$slideTrack.css(n)},r.prototype.setDimensions=function(){var t=this;!1===t.options.vertical?!0===t.options.centerMode&&t.$list.css({padding:"0px "+t.options.centerPadding}):(t.$list.height(t.$slides.first().outerHeight(!0)*t.options.slidesToShow),!0===t.options.centerMode&&t.$list.css({padding:t.options.centerPadding+" 0px"})),t.listWidth=t.$list.width(),t.listHeight=t.$list.height(),!1===t.options.vertical&&!1===t.options.variableWidth?(t.slideWidth=Math.ceil(t.listWidth/t.options.slidesToShow),t.$slideTrack.width(Math.ceil(t.slideWidth*t.$slideTrack.children(".slick-slide").length))):!0===t.options.variableWidth?t.$slideTrack.width(5e3*t.slideCount):(t.slideWidth=Math.ceil(t.listWidth),t.$slideTrack.height(Math.ceil(t.$slides.first().outerHeight(!0)*t.$slideTrack.children(".slick-slide").length)));var e=t.$slides.first().outerWidth(!0)-t.$slides.first().width();!1===t.options.variableWidth&&t.$slideTrack.children(".slick-slide").width(t.slideWidth-e)},r.prototype.setFade=function(){var i,o=this;o.$slides.each(function(t,e){i=o.slideWidth*t*-1,!0===o.options.rtl?c(e).css({position:"relative",right:i,top:0,zIndex:o.options.zIndex-2,opacity:0}):c(e).css({position:"relative",left:i,top:0,zIndex:o.options.zIndex-2,opacity:0})}),o.$slides.eq(o.currentSlide).css({zIndex:o.options.zIndex-1,opacity:1})},r.prototype.setHeight=function(){var t=this;if(1===t.options.slidesToShow&&!0===t.options.adaptiveHeight&&!1===t.options.vertical){var e=t.$slides.eq(t.currentSlide).outerHeight(!0);t.$list.css("height",e)}},r.prototype.setOption=r.prototype.slickSetOption=function(){var t,e,i,o,n,s=this,r=!1;if("object"===c.type(arguments[0])?(i=arguments[0],r=arguments[1],n="multiple"):"string"===c.type(arguments[0])&&(o=arguments[1],r=arguments[2],"responsive"===(i=arguments[0])&&"array"===c.type(arguments[1])?n="responsive":void 0!==arguments[1]&&(n="single")),"single"===n)s.options[i]=o;else if("multiple"===n)c.each(i,function(t,e){s.options[t]=e});else if("responsive"===n)for(e in o)if("array"!==c.type(s.options.responsive))s.options.responsive=[o[e]];else{for(t=s.options.responsive.length-1;0<=t;)s.options.responsive[t].breakpoint===o[e].breakpoint&&s.options.responsive.splice(t,1),t--;s.options.responsive.push(o[e])}r&&(s.unload(),s.reinit())},r.prototype.setPosition=function(){var t=this;t.setDimensions(),t.setHeight(),!1===t.options.fade?t.setCSS(t.getLeft(t.currentSlide)):t.setFade(),t.$slider.trigger("setPosition",[t])},r.prototype.setProps=function(){var t=this,e=document.body.style;t.positionProp=!0===t.options.vertical?"top":"left","top"===t.positionProp?t.$slider.addClass("slick-vertical"):t.$slider.removeClass("slick-vertical"),void 0===e.WebkitTransition&&void 0===e.MozTransition&&void 0===e.msTransition||!0===t.options.useCSS&&(t.cssTransitions=!0),t.options.fade&&("number"==typeof t.options.zIndex?t.options.zIndex<3&&(t.options.zIndex=3):t.options.zIndex=t.defaults.zIndex),void 0!==e.OTransform&&(t.animType="OTransform",t.transformType="-o-transform",t.transitionType="OTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.MozTransform&&(t.animType="MozTransform",t.transformType="-moz-transform",t.transitionType="MozTransition",void 0===e.perspectiveProperty&&void 0===e.MozPerspective&&(t.animType=!1)),void 0!==e.webkitTransform&&(t.animType="webkitTransform",t.transformType="-webkit-transform",t.transitionType="webkitTransition",void 0===e.perspectiveProperty&&void 0===e.webkitPerspective&&(t.animType=!1)),void 0!==e.msTransform&&(t.animType="msTransform",t.transformType="-ms-transform",t.transitionType="msTransition",void 0===e.msTransform&&(t.animType=!1)),void 0!==e.transform&&!1!==t.animType&&(t.animType="transform",t.transformType="transform",t.transitionType="transition"),t.transformsEnabled=t.options.useTransform&&null!==t.animType&&!1!==t.animType},r.prototype.setSlideClasses=function(t){var e,i,o,n,s=this;if(i=s.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden","true"),s.$slides.eq(t).addClass("slick-current"),!0===s.options.centerMode){var r=s.options.slidesToShow%2==0?1:0;e=Math.floor(s.options.slidesToShow/2),!0===s.options.infinite&&(e<=t&&t<=s.slideCount-1-e?s.$slides.slice(t-e+r,t+e+1).addClass("slick-active").attr("aria-hidden","false"):(o=s.options.slidesToShow+t,i.slice(o-e+1+r,o+e+2).addClass("slick-active").attr("aria-hidden","false")),0===t?i.eq(i.length-1-s.options.slidesToShow).addClass("slick-center"):t===s.slideCount-1&&i.eq(s.options.slidesToShow).addClass("slick-center")),s.$slides.eq(t).addClass("slick-center")}else 0<=t&&t<=s.slideCount-s.options.slidesToShow?s.$slides.slice(t,t+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"):i.length<=s.options.slidesToShow?i.addClass("slick-active").attr("aria-hidden","false"):(n=s.slideCount%s.options.slidesToShow,o=!0===s.options.infinite?s.options.slidesToShow+t:t,s.options.slidesToShow==s.options.slidesToScroll&&s.slideCount-t<s.options.slidesToShow?i.slice(o-(s.options.slidesToShow-n),o+n).addClass("slick-active").attr("aria-hidden","false"):i.slice(o,o+s.options.slidesToShow).addClass("slick-active").attr("aria-hidden","false"));"ondemand"!==s.options.lazyLoad&&"anticipated"!==s.options.lazyLoad||s.lazyLoad()},r.prototype.setupInfinite=function(){var t,e,i,o=this;if(!0===o.options.fade&&(o.options.centerMode=!1),!0===o.options.infinite&&!1===o.options.fade&&(e=null,o.slideCount>o.options.slidesToShow)){for(i=!0===o.options.centerMode?o.options.slidesToShow+1:o.options.slidesToShow,t=o.slideCount;t>o.slideCount-i;--t)e=t-1,c(o.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e-o.slideCount).prependTo(o.$slideTrack).addClass("slick-cloned");for(t=0;t<i+o.slideCount;t+=1)e=t,c(o.$slides[e]).clone(!0).attr("id","").attr("data-slick-index",e+o.slideCount).appendTo(o.$slideTrack).addClass("slick-cloned");o.$slideTrack.find(".slick-cloned").find("[id]").each(function(){c(this).attr("id","")})}},r.prototype.interrupt=function(t){t||this.autoPlay(),this.interrupted=t},r.prototype.selectHandler=function(t){var e=c(t.target).is(".slick-slide")?c(t.target):c(t.target).parents(".slick-slide"),i=parseInt(e.attr("data-slick-index"));i=i||0,this.slideCount<=this.options.slidesToShow?this.slideHandler(i,!1,!0):this.slideHandler(i)},r.prototype.slideHandler=function(t,e,i){var o,n,s,r,a,l,c=this;if(e=e||!1,!(!0===c.animating&&!0===c.options.waitForAnimate||!0===c.options.fade&&c.currentSlide===t))if(!1===e&&c.asNavFor(t),o=t,a=c.getLeft(o),r=c.getLeft(c.currentSlide),c.currentLeft=null===c.swipeLeft?r:c.swipeLeft,!1===c.options.infinite&&!1===c.options.centerMode&&(t<0||t>c.getDotCount()*c.options.slidesToScroll))!1===c.options.fade&&(o=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,function(){c.postSlide(o)}):c.postSlide(o));else if(!1===c.options.infinite&&!0===c.options.centerMode&&(t<0||t>c.slideCount-c.options.slidesToScroll))!1===c.options.fade&&(o=c.currentSlide,!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(r,function(){c.postSlide(o)}):c.postSlide(o));else{if(c.options.autoplay&&clearInterval(c.autoPlayTimer),n=o<0?c.slideCount%c.options.slidesToScroll!=0?c.slideCount-c.slideCount%c.options.slidesToScroll:c.slideCount+o:o>=c.slideCount?c.slideCount%c.options.slidesToScroll!=0?0:o-c.slideCount:o,c.animating=!0,c.$slider.trigger("beforeChange",[c,c.currentSlide,n]),s=c.currentSlide,c.currentSlide=n,c.setSlideClasses(c.currentSlide),c.options.asNavFor&&(l=(l=c.getNavTarget()).slick("getSlick")).slideCount<=l.options.slidesToShow&&l.setSlideClasses(c.currentSlide),c.updateDots(),c.updateArrows(),!0===c.options.fade)return!0!==i?(c.fadeSlideOut(s),c.fadeSlide(n,function(){c.postSlide(n)})):c.postSlide(n),void c.animateHeight();!0!==i&&c.slideCount>c.options.slidesToShow?c.animateSlide(a,function(){c.postSlide(n)}):c.postSlide(n)}},r.prototype.startLoad=function(){var t=this;!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&(t.$prevArrow.hide(),t.$nextArrow.hide()),!0===t.options.dots&&t.slideCount>t.options.slidesToShow&&t.$dots.hide(),t.$slider.addClass("slick-loading")},r.prototype.swipeDirection=function(){var t,e,i,o,n=this;return t=n.touchObject.startX-n.touchObject.curX,e=n.touchObject.startY-n.touchObject.curY,i=Math.atan2(e,t),(o=Math.round(180*i/Math.PI))<0&&(o=360-Math.abs(o)),o<=45&&0<=o||o<=360&&315<=o?!1===n.options.rtl?"left":"right":135<=o&&o<=225?!1===n.options.rtl?"right":"left":!0===n.options.verticalSwiping?35<=o&&o<=135?"down":"up":"vertical"},r.prototype.swipeEnd=function(t){var e,i,o=this;if(o.dragging=!1,o.swiping=!1,o.scrolling)return o.scrolling=!1;if(o.interrupted=!1,o.shouldClick=!(10<o.touchObject.swipeLength),void 0===o.touchObject.curX)return!1;if(!0===o.touchObject.edgeHit&&o.$slider.trigger("edge",[o,o.swipeDirection()]),o.touchObject.swipeLength>=o.touchObject.minSwipe){switch(i=o.swipeDirection()){case"left":case"down":e=o.options.swipeToSlide?o.checkNavigable(o.currentSlide+o.getSlideCount()):o.currentSlide+o.getSlideCount(),o.currentDirection=0;break;case"right":case"up":e=o.options.swipeToSlide?o.checkNavigable(o.currentSlide-o.getSlideCount()):o.currentSlide-o.getSlideCount(),o.currentDirection=1}"vertical"!=i&&(o.slideHandler(e),o.touchObject={},o.$slider.trigger("swipe",[o,i]))}else o.touchObject.startX!==o.touchObject.curX&&(o.slideHandler(o.currentSlide),o.touchObject={})},r.prototype.swipeHandler=function(t){var e=this;if(!(!1===e.options.swipe||"ontouchend"in document&&!1===e.options.swipe||!1===e.options.draggable&&-1!==t.type.indexOf("mouse")))switch(e.touchObject.fingerCount=t.originalEvent&&void 0!==t.originalEvent.touches?t.originalEvent.touches.length:1,e.touchObject.minSwipe=e.listWidth/e.options.touchThreshold,!0===e.options.verticalSwiping&&(e.touchObject.minSwipe=e.listHeight/e.options.touchThreshold),t.data.action){case"start":e.swipeStart(t);break;case"move":e.swipeMove(t);break;case"end":e.swipeEnd(t)}},r.prototype.swipeMove=function(t){var e,i,o,n,s,r,a=this;return s=void 0!==t.originalEvent?t.originalEvent.touches:null,!(!a.dragging||a.scrolling||s&&1!==s.length)&&(e=a.getLeft(a.currentSlide),a.touchObject.curX=void 0!==s?s[0].pageX:t.clientX,a.touchObject.curY=void 0!==s?s[0].pageY:t.clientY,a.touchObject.swipeLength=Math.round(Math.sqrt(Math.pow(a.touchObject.curX-a.touchObject.startX,2))),r=Math.round(Math.sqrt(Math.pow(a.touchObject.curY-a.touchObject.startY,2))),!a.options.verticalSwiping&&!a.swiping&&4<r?!(a.scrolling=!0):(!0===a.options.verticalSwiping&&(a.touchObject.swipeLength=r),i=a.swipeDirection(),void 0!==t.originalEvent&&4<a.touchObject.swipeLength&&(a.swiping=!0,t.preventDefault()),n=(!1===a.options.rtl?1:-1)*(a.touchObject.curX>a.touchObject.startX?1:-1),!0===a.options.verticalSwiping&&(n=a.touchObject.curY>a.touchObject.startY?1:-1),o=a.touchObject.swipeLength,(a.touchObject.edgeHit=!1)===a.options.infinite&&(0===a.currentSlide&&"right"===i||a.currentSlide>=a.getDotCount()&&"left"===i)&&(o=a.touchObject.swipeLength*a.options.edgeFriction,a.touchObject.edgeHit=!0),!1===a.options.vertical?a.swipeLeft=e+o*n:a.swipeLeft=e+o*(a.$list.height()/a.listWidth)*n,!0===a.options.verticalSwiping&&(a.swipeLeft=e+o*n),!0!==a.options.fade&&!1!==a.options.touchMove&&(!0===a.animating?(a.swipeLeft=null,!1):void a.setCSS(a.swipeLeft))))},r.prototype.swipeStart=function(t){var e,i=this;if(i.interrupted=!0,1!==i.touchObject.fingerCount||i.slideCount<=i.options.slidesToShow)return!(i.touchObject={});void 0!==t.originalEvent&&void 0!==t.originalEvent.touches&&(e=t.originalEvent.touches[0]),i.touchObject.startX=i.touchObject.curX=void 0!==e?e.pageX:t.clientX,i.touchObject.startY=i.touchObject.curY=void 0!==e?e.pageY:t.clientY,i.dragging=!0},r.prototype.unfilterSlides=r.prototype.slickUnfilter=function(){var t=this;null!==t.$slidesCache&&(t.unload(),t.$slideTrack.children(this.options.slide).detach(),t.$slidesCache.appendTo(t.$slideTrack),t.reinit())},r.prototype.unload=function(){var t=this;c(".slick-cloned",t.$slider).remove(),t.$dots&&t.$dots.remove(),t.$prevArrow&&t.htmlExpr.test(t.options.prevArrow)&&t.$prevArrow.remove(),t.$nextArrow&&t.htmlExpr.test(t.options.nextArrow)&&t.$nextArrow.remove(),t.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden","true").css("width","")},r.prototype.unslick=function(t){this.$slider.trigger("unslick",[this,t]),this.destroy()},r.prototype.updateArrows=function(){var t=this;Math.floor(t.options.slidesToShow/2),!0===t.options.arrows&&t.slideCount>t.options.slidesToShow&&!t.options.infinite&&(t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false"),0===t.currentSlide?(t.$prevArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$nextArrow.removeClass("slick-disabled").attr("aria-disabled","false")):t.currentSlide>=t.slideCount-t.options.slidesToShow&&!1===t.options.centerMode?(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")):t.currentSlide>=t.slideCount-1&&!0===t.options.centerMode&&(t.$nextArrow.addClass("slick-disabled").attr("aria-disabled","true"),t.$prevArrow.removeClass("slick-disabled").attr("aria-disabled","false")))},r.prototype.updateDots=function(){var t=this;null!==t.$dots&&(t.$dots.find("li").removeClass("slick-active").end(),t.$dots.find("li").eq(Math.floor(t.currentSlide/t.options.slidesToScroll)).addClass("slick-active"))},r.prototype.visibility=function(){this.options.autoplay&&(document[this.hidden]?this.interrupted=!0:this.interrupted=!1)},c.fn.slick=function(){var t,e,i=this,o=arguments[0],n=Array.prototype.slice.call(arguments,1),s=i.length;for(t=0;t<s;t++)if("object"==typeof o||void 0===o?i[t].slick=new r(i[t],o):e=i[t].slick[o].apply(i[t].slick,n),void 0!==e)return e;return i}}),function(q){"use strict";var z='<?xml version="1.0" encoding="utf-8"?><svg version="1.1"xmlns="http://www.w3.org/2000/svg"viewBox="0 12.705 512 486.59"x="0px" y="0px"xml:space="preserve"><polygon points="256.814,12.705 317.205,198.566 512.631,198.566 354.529,313.435 414.918,499.295 256.814,384.427 98.713,499.295 159.102,313.435 1,198.566 196.426,198.566 "/></svg>',o={starWidth:"32px",normalFill:"gray",ratedFill:"#f39c12",numStars:5,maxValue:5,precision:1,rating:0,fullStar:!1,halfStar:!1,readOnly:!1,spacing:"0px",rtl:!1,multiColor:null,onInit:null,onChange:null,onSet:null,starSvg:null},W={startColor:"#c0392b",endColor:"#f1c40f"};function U(t,e,i){return t===e?t=e:t===i&&(t=i),t}function X(t){return void 0!==t}var i=/^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i,Y=function(t){if(!i.test(t))return null;var e=i.exec(t);return{r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)}};function V(t,e,i){var o=i/100*(e-t);return 1===(o=Math.round(t+o).toString(16)).length&&(o="0"+o),o}function G(s,p){this.node=s.get(0);var i=this;s.empty().addClass("jq-ry-container");var f,o,m,g,v,t,e=q("<div/>").addClass("jq-ry-group-wrapper").appendTo(s),y=q("<div/>").addClass("jq-ry-normal-group").addClass("jq-ry-group").appendTo(e),n=q("<div/>").addClass("jq-ry-rated-group").addClass("jq-ry-group").appendTo(e),b=0,r=p.rating,a=!1;function l(t){X(t)||(t=p.rating);var e=(r=t)/f,i=e*m;1<e&&(i+=(Math.ceil(e)-1)*v),w(p.ratedFill),(i=p.rtl?100-i:i)<0?i=0:100<i&&(i=100),n.css("width",i+"%")}function c(){t=o*p.numStars+g*(p.numStars-1),m=o/t*100,v=g/t*100,s.width(t),l()}function d(t){var e=p.starWidth=t;return o=window.parseFloat(p.starWidth.replace("px","")),y.find("svg").attr({width:p.starWidth,height:e}),n.find("svg").attr({width:p.starWidth,height:e}),c(),s}function u(t){return p.spacing=t,g=parseFloat(p.spacing.replace("px","")),y.find("svg:not(:first-child)").css({"margin-left":t}),n.find("svg:not(:first-child)").css({"margin-left":t}),c(),s}function h(t){return p.normalFill=t,(p.rtl?n:y).find("svg").attr({fill:p.normalFill}),s}var x=p.ratedFill;function w(t){if(p.multiColor){var e=(r-b)/p.maxValue*100,i=p.multiColor||{};t=function(t,e,i){if(!t||!e)return null;i=X(i)?i:0,t=Y(t),e=Y(e);var o=V(t.r,e.r,i),n=V(t.b,e.b,i);return"#"+o+V(t.g,e.g,i)+n}(i.startColor||W.startColor,i.endColor||W.endColor,e)}else x=t;return p.ratedFill=t,(p.rtl?y:n).find("svg").attr({fill:p.ratedFill}),s}function C(t){t=!!t,p.rtl=t,h(p.normalFill),l()}function _(t){w((p.multiColor=t)||x)}function S(t){p.numStars=t,f=p.maxValue/p.numStars,y.empty(),n.empty();for(var e=0;e<p.numStars;e++)y.append(q(p.starSvg||z)),n.append(q(p.starSvg||z));return d(p.starWidth),h(p.normalFill),u(p.spacing),l(),s}function T(t){return p.maxValue=t,f=p.maxValue/p.numStars,p.rating>t&&I(t),l(),s}function k(t){return p.precision=t,I(p.rating),s}function A(t){return p.halfStar=t,s}function $(t){return p.fullStar=t,s}function E(t){var e,i,o,n,s,r=y.offset().left,a=r+y.width(),l=p.maxValue,c=t.pageX,d=0;if(c<r)d=b;else if(a<c)d=l;else{var u=(c-r)/(a-r);if(0<g)for(var h=u*=100;0<h;)m<h?(d+=f,h-=m+v):(d+=h/m*f,h=0);else d=u*p.maxValue;i=(e=d)%f,o=f/2,n=p.halfStar,((s=p.fullStar)||n)&&(s||n&&o<i?e+=f-i:(e-=i,0<i&&(e+=o))),d=e}return p.rtl&&(d=l-d),parseFloat(d)}function P(t){return p.readOnly=t,s.attr("readonly",!0),B(),t||(s.removeAttr("readonly"),s.on("mousemove",M).on("mouseenter",M).on("mouseleave",N).on("click",j).on("rateyo.init",L).on("rateyo.change",R).on("rateyo.set",H)),s}function I(t){var e=t,i=p.maxValue;return"string"==typeof e&&("%"===e[e.length-1]&&(e=e.substr(0,e.length-1),T(i=100)),e=parseFloat(e)),function(t,e,i){if(!(e<=t&&t<=i))throw Error("Invalid Rating, expected value between "+e+" and "+i)}(e,b,i),e=parseFloat(e.toFixed(p.precision)),U(parseFloat(e),b,i),p.rating=e,l(),a&&s.trigger("rateyo.set",{rating:e}),s}function D(t){return p.onInit=t,s}function O(t){return p.onSet=t,s}function F(t){return p.onChange=t,s}function M(t){var e=E(t).toFixed(p.precision),i=p.maxValue;l(e=U(parseFloat(e),b,i)),s.trigger("rateyo.change",{rating:e})}function N(){var t,e;e=!1,t=navigator.userAgent||navigator.vendor||window.opera,(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4)))&&(e=!0),e||(l(),s.trigger("rateyo.change",{rating:p.rating}))}function j(t){var e=E(t).toFixed(p.precision);e=parseFloat(e),i.rating(e)}function L(t,e){p.onInit&&"function"==typeof p.onInit&&p.onInit.apply(this,[e.rating,i])}function R(t,e){p.onChange&&"function"==typeof p.onChange&&p.onChange.apply(this,[e.rating,i])}function H(t,e){p.onSet&&"function"==typeof p.onSet&&p.onSet.apply(this,[e.rating,i])}function B(){s.off("mousemove",M).off("mouseenter",M).off("mouseleave",N).off("click",j).off("rateyo.init",L).off("rateyo.change",R).off("rateyo.set",H)}this.rating=function(t){return X(t)?(I(t),s):p.rating},this.destroy=function(){var o,n;return p.readOnly||B(),G.prototype.collection=(o=s.get(0),n=this.collection,q.each(n,function(t){if(o===this.node){var e=n.slice(0,t),i=n.slice(t+1,n.length);return n=e.concat(i),!1}}),n),s.removeClass("jq-ry-container").children().remove(),s},this.method=function(t){if(!t)throw Error("Method name not specified!");if(!X(this[t]))throw Error("Method "+t+" doesn't exist!");var e=Array.prototype.slice.apply(arguments,[]).slice(1);return this[t].apply(this,e)},this.option=function(t,e){if(!X(t))return p;var i;switch(t){case"starWidth":i=d;break;case"numStars":i=S;break;case"normalFill":i=h;break;case"ratedFill":i=w;break;case"multiColor":i=_;break;case"maxValue":i=T;break;case"precision":i=k;break;case"rating":i=I;break;case"halfStar":i=A;break;case"fullStar":i=$;break;case"readOnly":i=P;break;case"spacing":i=u;break;case"rtl":i=C;break;case"onInit":i=D;break;case"onSet":i=O;break;case"onChange":i=F;break;default:throw Error("No such option as "+t)}return X(e)?i(e):p[t]},S(p.numStars),P(p.readOnly),p.rtl&&C(p.rtl),this.collection.push(this),this.rating(p.rating,!0),a=!0,s.trigger("rateyo.init",{rating:p.rating})}function c(t,e){var i;return q.each(e,function(){if(t===this.node)return i=this,!1}),i}G.prototype.collection=[],window.RateYo=G,q.fn.rateYo=function(){return function(i){var s=G.prototype.collection,t=q(this);if(0===t.length)return t;var e=Array.prototype.slice.apply(arguments,[]);if(0===e.length)i=e[0]={};else{if(1!==e.length||"object"!=typeof e[0]){if(1<=e.length&&"string"==typeof e[0]){var r=e[0],a=e.slice(1),l=[];return q.each(t,function(t,e){var i=c(e,s);if(!i)throw Error("Trying to set options before even initialization");var o=i[r];if(!o)throw Error("Method "+r+" does not exist!");var n=o.apply(i,a);l.push(n)}),l=1===l.length?l[0]:l}throw Error("Invalid Arguments")}i=e[0]}return i=q.extend({},o,i),q.each(t,function(){var t=c(this,s);if(t)return t;var e=q(this),o={},n=q.extend({},i);return q.each(e.data(),function(t,e){if(0===t.indexOf("rateyo")){var i=t.replace(/^rateyo/,"");i=i[0].toLowerCase()+i.slice(1),o[i]=e,delete n[i]}}),new G(q(this),q.extend({},o,n))})}.apply(this,Array.prototype.slice.apply(arguments,[]))}}(window.jQuery),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?t(require("jquery")):t(window.jQuery||window.Zepto)}(function(d){function t(){}function u(t,e){m.ev.on("mfp"+t+x,e)}function h(t,e,i,o){var n=document.createElement("div");return n.className="mfp-"+t,i&&(n.innerHTML=i),o?e&&e.appendChild(n):(n=d(n),e&&n.appendTo(e)),n}function p(t,e){m.ev.triggerHandler("mfp"+t,e),m.st.callbacks&&(t=t.charAt(0).toLowerCase()+t.slice(1),m.st.callbacks[t]&&m.st.callbacks[t].apply(m,d.isArray(e)?e:[e]))}function f(t){return t===e&&m.currTemplate.closeBtn||(m.currTemplate.closeBtn=d(m.st.closeMarkup.replace("%title%",m.st.tClose)),e=t),m.currTemplate.closeBtn}function s(){d.magnificPopup.instance||((m=new t).init(),d.magnificPopup.instance=m)}var m,o,g,n,v,e,l="Close",c="BeforeClose",y="MarkupParse",b="Open",x=".mfp",w="mfp-ready",i="mfp-removing",r="mfp-prevent-close",a=!!window.jQuery,C=d(window);t.prototype={constructor:t,init:function(){var t=navigator.appVersion;m.isLowIE=m.isIE8=document.all&&!document.addEventListener,m.isAndroid=/android/gi.test(t),m.isIOS=/iphone|ipad|ipod/gi.test(t),m.supportsTransition=function(){var t=document.createElement("p").style,e=["ms","O","Moz","Webkit"];if(void 0!==t.transition)return!0;for(;e.length;)if(e.pop()+"Transition"in t)return!0;return!1}(),m.probablyMobile=m.isAndroid||m.isIOS||/(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent),g=d(document),m.popupsCache={}},open:function(t){var e;if(!1===t.isObj){m.items=t.items.toArray(),m.index=0;var i,o=t.items;for(e=0;e<o.length;e++)if((i=o[e]).parsed&&(i=i.el[0]),i===t.el[0]){m.index=e;break}}else m.items=d.isArray(t.items)?t.items:[t.items],m.index=t.index||0;if(!m.isOpen){m.types=[],v="",t.mainEl&&t.mainEl.length?m.ev=t.mainEl.eq(0):m.ev=g,t.key?(m.popupsCache[t.key]||(m.popupsCache[t.key]={}),m.currTemplate=m.popupsCache[t.key]):m.currTemplate={},m.st=d.extend(!0,{},d.magnificPopup.defaults,t),m.fixedContentPos="auto"===m.st.fixedContentPos?!m.probablyMobile:m.st.fixedContentPos,m.st.modal&&(m.st.closeOnContentClick=!1,m.st.closeOnBgClick=!1,m.st.showCloseBtn=!1,m.st.enableEscapeKey=!1),m.bgOverlay||(m.bgOverlay=h("bg").on("click"+x,function(){m.close()}),m.wrap=h("wrap").attr("tabindex",-1).on("click"+x,function(t){m._checkIfClose(t.target)&&m.close()}),m.container=h("container",m.wrap)),m.contentContainer=h("content"),m.st.preloader&&(m.preloader=h("preloader",m.container,m.st.tLoading));var n=d.magnificPopup.modules;for(e=0;e<n.length;e++){var s=n[e];s=s.charAt(0).toUpperCase()+s.slice(1),m["init"+s].call(m)}p("BeforeOpen"),m.st.showCloseBtn&&(m.st.closeBtnInside?(u(y,function(t,e,i,o){i.close_replaceWith=f(o.type)}),v+=" mfp-close-btn-in"):m.wrap.append(f())),m.st.alignTop&&(v+=" mfp-align-top"),m.fixedContentPos?m.wrap.css({overflow:m.st.overflowY,overflowX:"hidden",overflowY:m.st.overflowY}):m.wrap.css({top:C.scrollTop(),position:"absolute"}),!1!==m.st.fixedBgPos&&("auto"!==m.st.fixedBgPos||m.fixedContentPos)||m.bgOverlay.css({height:g.height(),position:"absolute"}),m.st.enableEscapeKey&&g.on("keyup"+x,function(t){27===t.keyCode&&m.close()}),C.on("resize"+x,function(){m.updateSize()}),m.st.closeOnContentClick||(v+=" mfp-auto-cursor"),v&&m.wrap.addClass(v);var r=m.wH=C.height(),a={};if(m.fixedContentPos&&m._hasScrollBar(r)){var l=m._getScrollbarSize();l&&(a.marginRight=l)}m.fixedContentPos&&(m.isIE7?d("body, html").css("overflow","hidden"):a.overflow="hidden");var c=m.st.mainClass;return m.isIE7&&(c+=" mfp-ie7"),c&&m._addClassToMFP(c),m.updateItemHTML(),p("BuildControls"),d("html").css(a),m.bgOverlay.add(m.wrap).prependTo(m.st.prependTo||d(document.body)),m._lastFocusedEl=document.activeElement,setTimeout(function(){m.content?(m._addClassToMFP(w),m._setFocus()):m.bgOverlay.addClass(w),g.on("focusin"+x,m._onFocusIn)},16),m.isOpen=!0,m.updateSize(r),p(b),t}m.updateItemHTML()},close:function(){m.isOpen&&(p(c),m.isOpen=!1,m.st.removalDelay&&!m.isLowIE&&m.supportsTransition?(m._addClassToMFP(i),setTimeout(function(){m._close()},m.st.removalDelay)):m._close())},_close:function(){p(l);var t=i+" "+w+" ";if(m.bgOverlay.detach(),m.wrap.detach(),m.container.empty(),m.st.mainClass&&(t+=m.st.mainClass+" "),m._removeClassFromMFP(t),m.fixedContentPos){var e={marginRight:""};m.isIE7?d("body, html").css("overflow",""):e.overflow="",d("html").css(e)}g.off("keyup.mfp focusin"+x),m.ev.off(x),m.wrap.attr("class","mfp-wrap").removeAttr("style"),m.bgOverlay.attr("class","mfp-bg"),m.container.attr("class","mfp-container"),!m.st.showCloseBtn||m.st.closeBtnInside&&!0!==m.currTemplate[m.currItem.type]||m.currTemplate.closeBtn&&m.currTemplate.closeBtn.detach(),m.st.autoFocusLast&&m._lastFocusedEl&&d(m._lastFocusedEl).focus(),m.currItem=null,m.content=null,m.currTemplate=null,m.prevHeight=0,p("AfterClose")},updateSize:function(t){if(m.isIOS){var e=document.documentElement.clientWidth/window.innerWidth,i=window.innerHeight*e;m.wrap.css("height",i),m.wH=i}else m.wH=t||C.height();m.fixedContentPos||m.wrap.css("height",m.wH),p("Resize")},updateItemHTML:function(){var t=m.items[m.index];m.contentContainer.detach(),m.content&&m.content.detach(),t.parsed||(t=m.parseEl(m.index));var e=t.type;if(p("BeforeChange",[m.currItem?m.currItem.type:"",e]),m.currItem=t,!m.currTemplate[e]){var i=!!m.st[e]&&m.st[e].markup;p("FirstMarkupParse",i),m.currTemplate[e]=!i||d(i)}n&&n!==t.type&&m.container.removeClass("mfp-"+n+"-holder");var o=m["get"+e.charAt(0).toUpperCase()+e.slice(1)](t,m.currTemplate[e]);m.appendContent(o,e),t.preloaded=!0,p("Change",t),n=t.type,m.container.prepend(m.contentContainer),p("AfterChange")},appendContent:function(t,e){(m.content=t)?m.st.showCloseBtn&&m.st.closeBtnInside&&!0===m.currTemplate[e]?m.content.find(".mfp-close").length||m.content.append(f()):m.content=t:m.content="",p("BeforeAppend"),m.container.addClass("mfp-"+e+"-holder"),m.contentContainer.append(m.content)},parseEl:function(t){var e,i=m.items[t];if((i=i.tagName?{el:d(i)}:(e=i.type,{data:i,src:i.src})).el){for(var o=m.types,n=0;n<o.length;n++)if(i.el.hasClass("mfp-"+o[n])){e=o[n];break}i.src=i.el.attr("data-mfp-src"),i.src||(i.src=i.el.attr("href"))}return i.type=e||m.st.type||"inline",i.index=t,i.parsed=!0,m.items[t]=i,p("ElementParse",i),m.items[t]},addGroup:function(e,i){function t(t){t.mfpEl=this,m._openClick(t,e,i)}var o="click.magnificPopup";(i=i||{}).mainEl=e,i.items?(i.isObj=!0,e.off(o).on(o,t)):(i.isObj=!1,i.delegate?e.off(o).on(o,i.delegate,t):(i.items=e).off(o).on(o,t))},_openClick:function(t,e,i){if((void 0!==i.midClick?i.midClick:d.magnificPopup.defaults.midClick)||!(2===t.which||t.ctrlKey||t.metaKey||t.altKey||t.shiftKey)){var o=void 0!==i.disableOn?i.disableOn:d.magnificPopup.defaults.disableOn;if(o)if(d.isFunction(o)){if(!o.call(m))return!0}else if(C.width()<o)return!0;t.type&&(t.preventDefault(),m.isOpen&&t.stopPropagation()),i.el=d(t.mfpEl),i.delegate&&(i.items=e.find(i.delegate)),m.open(i)}},updateStatus:function(t,e){if(m.preloader){o!==t&&m.container.removeClass("mfp-s-"+o),e||"loading"!==t||(e=m.st.tLoading);var i={status:t,text:e};p("UpdateStatus",i),t=i.status,e=i.text,m.preloader.html(e),m.preloader.find("a").on("click",function(t){t.stopImmediatePropagation()}),m.container.addClass("mfp-s-"+t),o=t}},_checkIfClose:function(t){if(!d(t).hasClass(r)){var e=m.st.closeOnContentClick,i=m.st.closeOnBgClick;if(e&&i)return!0;if(!m.content||d(t).hasClass("mfp-close")||m.preloader&&t===m.preloader[0])return!0;if(t===m.content[0]||d.contains(m.content[0],t)){if(e)return!0}else if(i&&d.contains(document,t))return!0;return!1}},_addClassToMFP:function(t){m.bgOverlay.addClass(t),m.wrap.addClass(t)},_removeClassFromMFP:function(t){this.bgOverlay.removeClass(t),m.wrap.removeClass(t)},_hasScrollBar:function(t){return(m.isIE7?g.height():document.body.scrollHeight)>(t||C.height())},_setFocus:function(){(m.st.focus?m.content.find(m.st.focus).eq(0):m.wrap).focus()},_onFocusIn:function(t){if(t.target!==m.wrap[0]&&!d.contains(m.wrap[0],t.target))return m._setFocus(),!1},_parseMarkup:function(n,t,e){var s;e.data&&(t=d.extend(e.data,t)),p(y,[n,t,e]),d.each(t,function(t,e){if(void 0===e||!1===e)return!0;if(1<(s=t.split("_")).length){var i=n.find(x+"-"+s[0]);if(0<i.length){var o=s[1];"replaceWith"===o?i[0]!==e[0]&&i.replaceWith(e):"img"===o?i.is("img")?i.attr("src",e):i.replaceWith(d("<img>").attr("src",e).attr("class",i.attr("class"))):i.attr(s[1],e)}}else n.find(x+"-"+t).html(e)})},_getScrollbarSize:function(){if(void 0===m.scrollbarSize){var t=document.createElement("div");t.style.cssText="width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;",document.body.appendChild(t),m.scrollbarSize=t.offsetWidth-t.clientWidth,document.body.removeChild(t)}return m.scrollbarSize}},d.magnificPopup={instance:null,proto:t.prototype,modules:[],open:function(t,e){return s(),(t=t?d.extend(!0,{},t):{}).isObj=!0,t.index=e||0,this.instance.open(t)},close:function(){return d.magnificPopup.instance&&d.magnificPopup.instance.close()},registerModule:function(t,e){e.options&&(d.magnificPopup.defaults[t]=e.options),d.extend(this.proto,e.proto),this.modules.push(t)},defaults:{disableOn:0,key:null,midClick:!1,mainClass:"",preloader:!0,focus:"",closeOnContentClick:!1,closeOnBgClick:!0,closeBtnInside:!0,showCloseBtn:!0,enableEscapeKey:!0,modal:!1,alignTop:!1,removalDelay:0,prependTo:null,fixedContentPos:"auto",fixedBgPos:"auto",overflowY:"auto",closeMarkup:'<button title="%title%" type="button" class="mfp-close">&#215;</button>',tClose:"Close (Esc)",tLoading:"Loading...",autoFocusLast:!0}},d.fn.magnificPopup=function(t){s();var e=d(this);if("string"==typeof t)if("open"===t){var i,o=a?e.data("magnificPopup"):e[0].magnificPopup,n=parseInt(arguments[1],10)||0;i=o.items?o.items[n]:(i=e,o.delegate&&(i=i.find(o.delegate)),i.eq(n)),m._openClick({mfpEl:i},e,o)}else m.isOpen&&m[t].apply(m,Array.prototype.slice.call(arguments,1));else t=d.extend(!0,{},t),a?e.data("magnificPopup",t):e[0].magnificPopup=t,m.addGroup(e,t);return e};function _(){k&&(T.after(k.addClass(S)).detach(),k=null)}var S,T,k,A="inline";d.magnificPopup.registerModule(A,{options:{hiddenClass:"hide",markup:"",tNotFound:"Content not found"},proto:{initInline:function(){m.types.push(A),u(l+"."+A,function(){_()})},getInline:function(t,e){if(_(),t.src){var i=m.st.inline,o=d(t.src);if(o.length){var n=o[0].parentNode;n&&n.tagName&&(T||(S=i.hiddenClass,T=h(S),S="mfp-"+S),k=o.after(T).detach().removeClass(S)),m.updateStatus("ready")}else m.updateStatus("error",i.tNotFound),o=d("<div>");return t.inlineElement=o}return m.updateStatus("ready"),m._parseMarkup(e,{},t),e}}});function $(){P&&d(document.body).removeClass(P)}function E(){$(),m.req&&m.req.abort()}var P,I="ajax";d.magnificPopup.registerModule(I,{options:{settings:null,cursor:"mfp-ajax-cur",tError:'<a href="%url%">The content</a> could not be loaded.'},proto:{initAjax:function(){m.types.push(I),P=m.st.ajax.cursor,u(l+"."+I,E),u("BeforeChange."+I,E)},getAjax:function(n){P&&d(document.body).addClass(P),m.updateStatus("loading");var t=d.extend({url:n.src,success:function(t,e,i){var o={data:t,xhr:i};p("ParseAjax",o),m.appendContent(d(o.data),I),n.finished=!0,$(),m._setFocus(),setTimeout(function(){m.wrap.addClass(w)},16),m.updateStatus("ready"),p("AjaxContentAdded")},error:function(){$(),n.finished=n.loadError=!0,m.updateStatus("error",m.st.ajax.tError.replace("%url%",n.src))}},m.st.ajax.settings);return m.req=d.ajax(t),""}}});var D;d.magnificPopup.registerModule("image",{options:{markup:'<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>',cursor:"mfp-zoom-out-cur",titleSrc:"title",verticalFit:!0,tError:'<a href="%url%">The image</a> could not be loaded.'},proto:{initImage:function(){var t=m.st.image,e=".image";m.types.push("image"),u(b+e,function(){"image"===m.currItem.type&&t.cursor&&d(document.body).addClass(t.cursor)}),u(l+e,function(){t.cursor&&d(document.body).removeClass(t.cursor),C.off("resize"+x)}),u("Resize"+e,m.resizeImage),m.isLowIE&&u("AfterChange",m.resizeImage)},resizeImage:function(){var t=m.currItem;if(t&&t.img&&m.st.image.verticalFit){var e=0;m.isLowIE&&(e=parseInt(t.img.css("padding-top"),10)+parseInt(t.img.css("padding-bottom"),10)),t.img.css("max-height",m.wH-e)}},_onImageHasSize:function(t){t.img&&(t.hasSize=!0,D&&clearInterval(D),t.isCheckingImgSize=!1,p("ImageHasSize",t),t.imgHidden&&(m.content&&m.content.removeClass("mfp-loading"),t.imgHidden=!1))},findImageSize:function(e){var i=0,o=e.img[0],n=function(t){D&&clearInterval(D),D=setInterval(function(){0<o.naturalWidth?m._onImageHasSize(e):(200<i&&clearInterval(D),3===++i?n(10):40===i?n(50):100===i&&n(500))},t)};n(1)},getImage:function(t,e){var i=0,o=function(){t&&(t.img[0].complete?(t.img.off(".mfploader"),t===m.currItem&&(m._onImageHasSize(t),m.updateStatus("ready")),t.hasSize=!0,t.loaded=!0,p("ImageLoadComplete")):++i<200?setTimeout(o,100):n())},n=function(){t&&(t.img.off(".mfploader"),t===m.currItem&&(m._onImageHasSize(t),m.updateStatus("error",s.tError.replace("%url%",t.src))),t.hasSize=!0,t.loaded=!0,t.loadError=!0)},s=m.st.image,r=e.find(".mfp-img");if(r.length){var a=document.createElement("img");a.className="mfp-img",t.el&&t.el.find("img").length&&(a.alt=t.el.find("img").attr("alt")),t.img=d(a).on("load.mfploader",o).on("error.mfploader",n),a.src=t.src,r.is("img")&&(t.img=t.img.clone()),0<(a=t.img[0]).naturalWidth?t.hasSize=!0:a.width||(t.hasSize=!1)}return m._parseMarkup(e,{title:function(t){if(t.data&&void 0!==t.data.title)return t.data.title;var e=m.st.image.titleSrc;if(e){if(d.isFunction(e))return e.call(m,t);if(t.el)return t.el.attr(e)||""}return""}(t),img_replaceWith:t.img},t),m.resizeImage(),t.hasSize?(D&&clearInterval(D),t.loadError?(e.addClass("mfp-loading"),m.updateStatus("error",s.tError.replace("%url%",t.src))):(e.removeClass("mfp-loading"),m.updateStatus("ready"))):(m.updateStatus("loading"),t.loading=!0,t.hasSize||(t.imgHidden=!0,e.addClass("mfp-loading"),m.findImageSize(t))),e}}});var O;d.magnificPopup.registerModule("zoom",{options:{enabled:!1,easing:"ease-in-out",duration:300,opener:function(t){return t.is("img")?t:t.find("img")}},proto:{initZoom:function(){var t,s=m.st.zoom,e=".zoom";if(s.enabled&&m.supportsTransition){function i(t){var e=t.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"),i="all "+s.duration/1e3+"s "+s.easing,o={position:"fixed",zIndex:9999,left:0,top:0,"-webkit-backface-visibility":"hidden"},n="transition";return o["-webkit-"+n]=o["-moz-"+n]=o["-o-"+n]=o[n]=i,e.css(o),e}function o(){m.content.css("visibility","visible")}var n,r,a=s.duration;u("BuildControls"+e,function(){if(m._allowZoom()){if(clearTimeout(n),m.content.css("visibility","hidden"),!(t=m._getItemToZoom()))return void o();(r=i(t)).css(m._getOffset()),m.wrap.append(r),n=setTimeout(function(){r.css(m._getOffset(!0)),n=setTimeout(function(){o(),setTimeout(function(){r.remove(),t=r=null,p("ZoomAnimationEnded")},16)},a)},16)}}),u(c+e,function(){if(m._allowZoom()){if(clearTimeout(n),m.st.removalDelay=a,!t){if(!(t=m._getItemToZoom()))return;r=i(t)}r.css(m._getOffset(!0)),m.wrap.append(r),m.content.css("visibility","hidden"),setTimeout(function(){r.css(m._getOffset())},16)}}),u(l+e,function(){m._allowZoom()&&(o(),r&&r.remove(),t=null)})}},_allowZoom:function(){return"image"===m.currItem.type},_getItemToZoom:function(){return!!m.currItem.hasSize&&m.currItem.img},_getOffset:function(t){var e,i=(e=t?m.currItem.img:m.st.zoom.opener(m.currItem.el||m.currItem)).offset(),o=parseInt(e.css("padding-top"),10),n=parseInt(e.css("padding-bottom"),10);i.top-=d(window).scrollTop()-o;var s={width:e.width(),height:(a?e.innerHeight():e[0].offsetHeight)-n-o};return void 0===O&&(O=void 0!==document.createElement("p").style.MozTransform),O?s["-moz-transform"]=s.transform="translate("+i.left+"px,"+i.top+"px)":(s.left=i.left,s.top=i.top),s}}});function F(t){if(m.currTemplate[M]){var e=m.currTemplate[M].find("iframe");e.length&&(t||(e[0].src="//about:blank"),m.isIE8&&e.css("display",t?"block":"none"))}}var M="iframe";d.magnificPopup.registerModule(M,{options:{markup:'<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>',srcAction:"iframe_src",patterns:{youtube:{index:"youtube.com",id:"v=",src:"//www.youtube.com/embed/%id%?autoplay=1"},vimeo:{index:"vimeo.com/",id:"/",src:"//player.vimeo.com/video/%id%?autoplay=1"},gmaps:{index:"//maps.google.",src:"%id%&output=embed"}}},proto:{initIframe:function(){m.types.push(M),u("BeforeChange",function(t,e,i){e!==i&&(e===M?F():i===M&&F(!0))}),u(l+"."+M,function(){F()})},getIframe:function(t,e){var i=t.src,o=m.st.iframe;d.each(o.patterns,function(){if(-1<i.indexOf(this.index))return this.id&&(i="string"==typeof this.id?i.substr(i.lastIndexOf(this.id)+this.id.length,i.length):this.id.call(this,i)),i=this.src.replace("%id%",i),!1});var n={};return o.srcAction&&(n[o.srcAction]=i),m._parseMarkup(e,n,t),m.updateStatus("ready"),e}}});function N(t){var e=m.items.length;return e-1<t?t-e:t<0?e+t:t}function j(t,e,i){return t.replace(/%curr%/gi,e+1).replace(/%total%/gi,i)}d.magnificPopup.registerModule("gallery",{options:{enabled:!1,arrowMarkup:'<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>',preload:[0,2],navigateByImgClick:!0,arrows:!0,tPrev:"Previous (Left arrow key)",tNext:"Next (Right arrow key)",tCounter:"%curr% of %total%"},proto:{initGallery:function(){var s=m.st.gallery,t=".mfp-gallery";if(m.direction=!0,!s||!s.enabled)return!1;v+=" mfp-gallery",u(b+t,function(){s.navigateByImgClick&&m.wrap.on("click"+t,".mfp-img",function(){if(1<m.items.length)return m.next(),!1}),g.on("keydown"+t,function(t){37===t.keyCode?m.prev():39===t.keyCode&&m.next()})}),u("UpdateStatus"+t,function(t,e){e.text&&(e.text=j(e.text,m.currItem.index,m.items.length))}),u(y+t,function(t,e,i,o){var n=m.items.length;i.counter=1<n?j(s.tCounter,o.index,n):""}),u("BuildControls"+t,function(){if(1<m.items.length&&s.arrows&&!m.arrowLeft){var t=s.arrowMarkup,e=m.arrowLeft=d(t.replace(/%title%/gi,s.tPrev).replace(/%dir%/gi,"left")).addClass(r),i=m.arrowRight=d(t.replace(/%title%/gi,s.tNext).replace(/%dir%/gi,"right")).addClass(r);e.click(function(){m.prev()}),i.click(function(){m.next()}),m.container.append(e.add(i))}}),u("Change"+t,function(){m._preloadTimeout&&clearTimeout(m._preloadTimeout),m._preloadTimeout=setTimeout(function(){m.preloadNearbyImages(),m._preloadTimeout=null},16)}),u(l+t,function(){g.off(t),m.wrap.off("click"+t),m.arrowRight=m.arrowLeft=null})},next:function(){m.direction=!0,m.index=N(m.index+1),m.updateItemHTML()},prev:function(){m.direction=!1,m.index=N(m.index-1),m.updateItemHTML()},goTo:function(t){m.direction=t>=m.index,m.index=t,m.updateItemHTML()},preloadNearbyImages:function(){var t,e=m.st.gallery.preload,i=Math.min(e[0],m.items.length),o=Math.min(e[1],m.items.length);for(t=1;t<=(m.direction?o:i);t++)m._preloadItem(m.index+t);for(t=1;t<=(m.direction?i:o);t++)m._preloadItem(m.index-t)},_preloadItem:function(t){if(t=N(t),!m.items[t].preloaded){var e=m.items[t];e.parsed||(e=m.parseEl(t)),p("LazyLoad",e),"image"===e.type&&(e.img=d('<img class="mfp-img" />').on("load.mfploader",function(){e.hasSize=!0}).on("error.mfploader",function(){e.hasSize=!0,e.loadError=!0,p("LazyLoadError",e)}).attr("src",e.src)),e.preloaded=!0}}}});var L="retina";d.magnificPopup.registerModule(L,{options:{replaceSrc:function(t){return t.src.replace(/\.\w+$/,function(t){return"@2x"+t})},ratio:1},proto:{initRetina:function(){if(1<window.devicePixelRatio){var i=m.st.retina,o=i.ratio;1<(o=isNaN(o)?o():o)&&(u("ImageHasSize."+L,function(t,e){e.img.css({"max-width":e.img[0].naturalWidth/o,width:"100%"})}),u("ElementParse."+L,function(t,e){e.src=i.replaceSrc(e,o)}))}}}}),s()}),function(e){"undefined"!=typeof jQuery&&jQuery||"function"!=typeof define||!define.amd?"undefined"!=typeof jQuery&&jQuery||"object"!=typeof exports?e(jQuery,document,window,navigator):e(require("jquery"),document,window,navigator):define(["jquery"],function(t){return e(t,document,window,navigator)})}(function(l,c,d,t,u){"use strict";var e,i,o=0,n=(e=t.userAgent,i=/msie\s\d+/i,0<e.search(i)&&i.exec(e).toString().split(" ")[1]<9&&(l("html").addClass("lt-ie9"),!0));Function.prototype.bind||(Function.prototype.bind=function(o){var n=this,s=[].slice;if("function"!=typeof n)throw new TypeError;var r=s.call(arguments,1),a=function(){if(this instanceof a){var t=function(){};t.prototype=n.prototype;var e=new t,i=n.apply(e,r.concat(s.call(arguments)));return Object(i)===i?i:e}return n.apply(o,r.concat(s.call(arguments)))};return a}),Array.prototype.indexOf||(Array.prototype.indexOf=function(t,e){var i;if(null==this)throw new TypeError('"this" is null or not defined');var o=Object(this),n=o.length>>>0;if(0==n)return-1;var s=+e||0;if(Math.abs(s)===1/0&&(s=0),n<=s)return-1;for(i=Math.max(0<=s?s:n-Math.abs(s),0);i<n;){if(i in o&&o[i]===t)return i;i++}return-1});function s(t,e,i){this.VERSION="2.3.1",this.input=t,this.plugin_count=i,this.current_plugin=0,this.calc_count=0,this.update_tm=0,this.old_from=0,this.old_to=0,this.old_min_interval=null,this.raf_id=null,this.dragging=!1,this.force_redraw=!1,this.no_diapason=!1,this.has_tab_index=!0,this.is_key=!1,this.is_update=!1,this.is_start=!0,this.is_finish=!1,this.is_active=!1,this.is_resize=!1,this.is_click=!1,e=e||{},this.$cache={win:l(d),body:l(c.body),input:l(t),cont:null,rs:null,min:null,max:null,from:null,to:null,single:null,bar:null,line:null,s_single:null,s_from:null,s_to:null,shad_single:null,shad_from:null,shad_to:null,edge:null,grid:null,grid_labels:[]},this.coords={x_gap:0,x_pointer:0,w_rs:0,w_rs_old:0,w_handle:0,p_gap:0,p_gap_left:0,p_gap_right:0,p_step:0,p_pointer:0,p_handle:0,p_single_fake:0,p_single_real:0,p_from_fake:0,p_from_real:0,p_to_fake:0,p_to_real:0,p_bar_x:0,p_bar_w:0,grid_gap:0,big_num:0,big:[],big_w:[],big_p:[],big_x:[]},this.labels={w_min:0,w_max:0,w_from:0,w_to:0,w_single:0,p_min:0,p_max:0,p_from_fake:0,p_from_left:0,p_to_fake:0,p_to_left:0,p_single_fake:0,p_single_left:0};var o,n,s,r=this.$cache.input,a=r.prop("value");for(s in o={skin:"flat",type:"single",min:10,max:100,from:null,to:null,step:1,min_interval:0,max_interval:0,drag_interval:!1,values:[],p_values:[],from_fixed:!1,from_min:null,from_max:null,from_shadow:!1,to_fixed:!1,to_min:null,to_max:null,to_shadow:!1,prettify_enabled:!0,prettify_separator:" ",prettify:null,force_edges:!1,keyboard:!0,grid:!1,grid_margin:!0,grid_num:4,grid_snap:!1,hide_min_max:!1,hide_from_to:!1,prefix:"",postfix:"",max_postfix:"",decorate_both:!0,values_separator:" â ",input_values_separator:";",disable:!1,block:!1,extra_classes:"",scope:null,onStart:null,onChange:null,onFinish:null,onUpdate:null},"INPUT"!==r[0].nodeName&&console&&console.warn&&console.warn("Base element should be <input>!",r[0]),(n={skin:r.data("skin"),type:r.data("type"),min:r.data("min"),max:r.data("max"),from:r.data("from"),to:r.data("to"),step:r.data("step"),min_interval:r.data("minInterval"),max_interval:r.data("maxInterval"),drag_interval:r.data("dragInterval"),values:r.data("values"),from_fixed:r.data("fromFixed"),from_min:r.data("fromMin"),from_max:r.data("fromMax"),from_shadow:r.data("fromShadow"),to_fixed:r.data("toFixed"),to_min:r.data("toMin"),to_max:r.data("toMax"),to_shadow:r.data("toShadow"),prettify_enabled:r.data("prettifyEnabled"),prettify_separator:r.data("prettifySeparator"),force_edges:r.data("forceEdges"),keyboard:r.data("keyboard"),grid:r.data("grid"),grid_margin:r.data("gridMargin"),grid_num:r.data("gridNum"),grid_snap:r.data("gridSnap"),hide_min_max:r.data("hideMinMax"),hide_from_to:r.data("hideFromTo"),prefix:r.data("prefix"),postfix:r.data("postfix"),max_postfix:r.data("maxPostfix"),decorate_both:r.data("decorateBoth"),values_separator:r.data("valuesSeparator"),input_values_separator:r.data("inputValuesSeparator"),disable:r.data("disable"),block:r.data("block"),extra_classes:r.data("extraClasses")}).values=n.values&&n.values.split(","),n)n.hasOwnProperty(s)&&(n[s]!==u&&""!==n[s]||delete n[s]);a!==u&&""!==a&&((a=a.split(n.input_values_separator||e.input_values_separator||";"))[0]&&a[0]==+a[0]&&(a[0]=+a[0]),a[1]&&a[1]==+a[1]&&(a[1]=+a[1]),e&&e.values&&e.values.length?(o.from=a[0]&&e.values.indexOf(a[0]),o.to=a[1]&&e.values.indexOf(a[1])):(o.from=a[0]&&+a[0],o.to=a[1]&&+a[1])),l.extend(o,e),l.extend(o,n),this.options=o,this.update_check={},this.validate(),this.result={input:this.$cache.input,slider:null,min:this.options.min,max:this.options.max,from:this.options.from,from_percent:0,from_value:null,to:this.options.to,to_percent:0,to_value:null},this.init()}s.prototype={init:function(t){this.no_diapason=!1,this.coords.p_step=this.convertToPercent(this.options.step,!0),this.target="base",this.toggleInput(),this.append(),this.setMinMax(),t?(this.force_redraw=!0,this.calc(!0),this.callOnUpdate()):(this.force_redraw=!0,this.calc(!0),this.callOnStart()),this.updateScene()},append:function(){var t='<span class="irs irs--'+this.options.skin+" js-irs-"+this.plugin_count+" "+this.options.extra_classes+'"></span>';this.$cache.input.before(t),this.$cache.input.prop("readonly",!0),this.$cache.cont=this.$cache.input.prev(),this.result.slider=this.$cache.cont,this.$cache.cont.html('<span class="irs"><span class="irs-line" tabindex="0"></span><span class="irs-min">0</span><span class="irs-max">1</span><span class="irs-from">0</span><span class="irs-to">0</span><span class="irs-single">0</span></span><span class="irs-grid"></span>'),this.$cache.rs=this.$cache.cont.find(".irs"),this.$cache.min=this.$cache.cont.find(".irs-min"),this.$cache.max=this.$cache.cont.find(".irs-max"),this.$cache.from=this.$cache.cont.find(".irs-from"),this.$cache.to=this.$cache.cont.find(".irs-to"),this.$cache.single=this.$cache.cont.find(".irs-single"),this.$cache.line=this.$cache.cont.find(".irs-line"),this.$cache.grid=this.$cache.cont.find(".irs-grid"),"single"===this.options.type?(this.$cache.cont.append('<span class="irs-bar irs-bar--single"></span><span class="irs-shadow shadow-single"></span><span class="irs-handle single"><i></i><i></i><i></i></span>'),this.$cache.bar=this.$cache.cont.find(".irs-bar"),this.$cache.edge=this.$cache.cont.find(".irs-bar-edge"),this.$cache.s_single=this.$cache.cont.find(".single"),this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.shad_single=this.$cache.cont.find(".shadow-single")):(this.$cache.cont.append('<span class="irs-bar"></span><span class="irs-shadow shadow-from"></span><span class="irs-shadow shadow-to"></span><span class="irs-handle from"><i></i><i></i><i></i></span><span class="irs-handle to"><i></i><i></i><i></i></span>'),this.$cache.bar=this.$cache.cont.find(".irs-bar"),this.$cache.s_from=this.$cache.cont.find(".from"),this.$cache.s_to=this.$cache.cont.find(".to"),this.$cache.shad_from=this.$cache.cont.find(".shadow-from"),this.$cache.shad_to=this.$cache.cont.find(".shadow-to"),this.setTopHandler()),this.options.hide_from_to&&(this.$cache.from[0].style.display="none",this.$cache.to[0].style.display="none",this.$cache.single[0].style.display="none"),this.appendGrid(),this.options.disable?(this.appendDisableMask(),this.$cache.input[0].disabled=!0):(this.$cache.input[0].disabled=!1,this.removeDisableMask(),this.bindEvents()),this.options.disable||(this.options.block?this.appendDisableMask():this.removeDisableMask()),this.options.drag_interval&&(this.$cache.bar[0].style.cursor="ew-resize")},setTopHandler:function(){var t=this.options.min,e=this.options.max,i=this.options.from,o=this.options.to;t<i&&o===e?this.$cache.s_from.addClass("type_last"):o<e&&this.$cache.s_to.addClass("type_last")},changeLevel:function(t){switch(t){case"single":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_single_fake),this.$cache.s_single.addClass("state_hover");break;case"from":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.$cache.s_from.addClass("state_hover"),this.$cache.s_from.addClass("type_last"),this.$cache.s_to.removeClass("type_last");break;case"to":this.coords.p_gap=this.toFixed(this.coords.p_pointer-this.coords.p_to_fake),this.$cache.s_to.addClass("state_hover"),this.$cache.s_to.addClass("type_last"),this.$cache.s_from.removeClass("type_last");break;case"both":this.coords.p_gap_left=this.toFixed(this.coords.p_pointer-this.coords.p_from_fake),this.coords.p_gap_right=this.toFixed(this.coords.p_to_fake-this.coords.p_pointer),this.$cache.s_to.removeClass("type_last"),this.$cache.s_from.removeClass("type_last")}},appendDisableMask:function(){this.$cache.cont.append('<span class="irs-disable-mask"></span>'),this.$cache.cont.addClass("irs-disabled")},removeDisableMask:function(){this.$cache.cont.remove(".irs-disable-mask"),this.$cache.cont.removeClass("irs-disabled")},remove:function(){this.$cache.cont.remove(),this.$cache.cont=null,this.$cache.line.off("keydown.irs_"+this.plugin_count),this.$cache.body.off("touchmove.irs_"+this.plugin_count),this.$cache.body.off("mousemove.irs_"+this.plugin_count),this.$cache.win.off("touchend.irs_"+this.plugin_count),this.$cache.win.off("mouseup.irs_"+this.plugin_count),n&&(this.$cache.body.off("mouseup.irs_"+this.plugin_count),this.$cache.body.off("mouseleave.irs_"+this.plugin_count)),this.$cache.grid_labels=[],this.coords.big=[],this.coords.big_w=[],this.coords.big_p=[],this.coords.big_x=[],cancelAnimationFrame(this.raf_id)},bindEvents:function(){this.no_diapason||(this.$cache.body.on("touchmove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.body.on("mousemove.irs_"+this.plugin_count,this.pointerMove.bind(this)),this.$cache.win.on("touchend.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.win.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.line.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.line.on("focus.irs_"+this.plugin_count,this.pointerFocus.bind(this)),this.options.drag_interval&&"double"===this.options.type?(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"both")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"both"))):(this.$cache.bar.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.bar.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),"single"===this.options.type?(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.shad_single.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.s_single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"single")),this.$cache.edge.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_single.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))):(this.$cache.single.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.single.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,null)),this.$cache.from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("touchstart.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("touchstart.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.s_from.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"from")),this.$cache.to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.s_to.on("mousedown.irs_"+this.plugin_count,this.pointerDown.bind(this,"to")),this.$cache.shad_from.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click")),this.$cache.shad_to.on("mousedown.irs_"+this.plugin_count,this.pointerClick.bind(this,"click"))),this.options.keyboard&&this.$cache.line.on("keydown.irs_"+this.plugin_count,this.key.bind(this,"keyboard")),n&&(this.$cache.body.on("mouseup.irs_"+this.plugin_count,this.pointerUp.bind(this)),this.$cache.body.on("mouseleave.irs_"+this.plugin_count,this.pointerUp.bind(this))))},pointerFocus:function(t){var e,i;this.target||(e=(i="single"===this.options.type?this.$cache.single:this.$cache.from).offset().left,e+=i.width()/2-1,this.pointerClick("single",{preventDefault:function(){},pageX:e}))},pointerMove:function(t){if(this.dragging){var e=t.pageX||t.originalEvent.touches&&t.originalEvent.touches[0].pageX;this.coords.x_pointer=e-this.coords.x_gap,this.calc()}},pointerUp:function(t){this.current_plugin===this.plugin_count&&this.is_active&&(this.is_active=!1,this.$cache.cont.find(".state_hover").removeClass("state_hover"),this.force_redraw=!0,n&&l("*").prop("unselectable",!1),this.updateScene(),this.restoreOriginalMinInterval(),(l.contains(this.$cache.cont[0],t.target)||this.dragging)&&this.callOnFinish(),this.dragging=!1)},pointerDown:function(t,e){e.preventDefault();var i=e.pageX||e.originalEvent.touches&&e.originalEvent.touches[0].pageX;2!==e.button&&("both"===t&&this.setTempMinInterval(),t=t||(this.target||"from"),this.current_plugin=this.plugin_count,this.target=t,this.is_active=!0,this.dragging=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=i-this.coords.x_gap,this.calcPointerPercent(),this.changeLevel(t),n&&l("*").prop("unselectable",!0),this.$cache.line.trigger("focus"),this.updateScene())},pointerClick:function(t,e){e.preventDefault();var i=e.pageX||e.originalEvent.touches&&e.originalEvent.touches[0].pageX;2!==e.button&&(this.current_plugin=this.plugin_count,this.target=t,this.is_click=!0,this.coords.x_gap=this.$cache.rs.offset().left,this.coords.x_pointer=+(i-this.coords.x_gap).toFixed(),this.force_redraw=!0,this.calc(),this.$cache.line.trigger("focus"))},key:function(t,e){if(!(this.current_plugin!==this.plugin_count||e.altKey||e.ctrlKey||e.shiftKey||e.metaKey)){switch(e.which){case 83:case 65:case 40:case 37:e.preventDefault(),this.moveByKey(!1);break;case 87:case 68:case 38:case 39:e.preventDefault(),this.moveByKey(!0)}return!0}},moveByKey:function(t){var e=this.coords.p_pointer,i=(this.options.max-this.options.min)/100;i=this.options.step/i,t?e+=i:e-=i,this.coords.x_pointer=this.toFixed(this.coords.w_rs/100*e),this.is_key=!0,this.calc()},setMinMax:function(){if(this.options){if(this.options.hide_min_max)return this.$cache.min[0].style.display="none",void(this.$cache.max[0].style.display="none");if(this.options.values.length)this.$cache.min.html(this.decorate(this.options.p_values[this.options.min])),this.$cache.max.html(this.decorate(this.options.p_values[this.options.max]));else{var t=this._prettify(this.options.min),e=this._prettify(this.options.max);this.result.min_pretty=t,this.result.max_pretty=e,this.$cache.min.html(this.decorate(t,this.options.min)),this.$cache.max.html(this.decorate(e,this.options.max))}this.labels.w_min=this.$cache.min.outerWidth(!1),this.labels.w_max=this.$cache.max.outerWidth(!1)}},setTempMinInterval:function(){var t=this.result.to-this.result.from;null===this.old_min_interval&&(this.old_min_interval=this.options.min_interval),this.options.min_interval=t},restoreOriginalMinInterval:function(){null!==this.old_min_interval&&(this.options.min_interval=this.old_min_interval,this.old_min_interval=null)},calc:function(t){if(this.options&&(this.calc_count++,10!==this.calc_count&&!t||(this.calc_count=0,this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.calcHandlePercent()),this.coords.w_rs)){this.calcPointerPercent();var e=this.getHandleX();switch("both"===this.target&&(this.coords.p_gap=0,e=this.getHandleX()),"click"===this.target&&(this.coords.p_gap=this.coords.p_handle/2,e=this.getHandleX(),this.options.drag_interval?this.target="both_one":this.target=this.chooseHandle(e)),this.target){case"base":var i=(this.options.max-this.options.min)/100,o=(this.result.from-this.options.min)/i,n=(this.result.to-this.options.min)/i;this.coords.p_single_real=this.toFixed(o),this.coords.p_from_real=this.toFixed(o),this.coords.p_to_real=this.toFixed(n),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real),this.target=null;break;case"single":if(this.options.from_fixed)break;this.coords.p_single_real=this.convertToRealPercent(e),this.coords.p_single_real=this.calcWithStep(this.coords.p_single_real),this.coords.p_single_real=this.checkDiapason(this.coords.p_single_real,this.options.from_min,this.options.from_max),this.coords.p_single_fake=this.convertToFakePercent(this.coords.p_single_real);break;case"from":if(this.options.from_fixed)break;this.coords.p_from_real=this.convertToRealPercent(e),this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real>this.coords.p_to_real&&(this.coords.p_from_real=this.coords.p_to_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_real=this.checkMaxInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real);break;case"to":if(this.options.to_fixed)break;this.coords.p_to_real=this.convertToRealPercent(e),this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real<this.coords.p_from_real&&(this.coords.p_to_real=this.coords.p_from_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_real=this.checkMaxInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case"both":if(this.options.from_fixed||this.options.to_fixed)break;e=this.toFixed(e+.001*this.coords.p_handle),this.coords.p_from_real=this.convertToRealPercent(e)-this.coords.p_gap_left,this.coords.p_from_real=this.calcWithStep(this.coords.p_from_real),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_real=this.checkMinInterval(this.coords.p_from_real,this.coords.p_to_real,"from"),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.convertToRealPercent(e)+this.coords.p_gap_right,this.coords.p_to_real=this.calcWithStep(this.coords.p_to_real),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_real=this.checkMinInterval(this.coords.p_to_real,this.coords.p_from_real,"to"),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real);break;case"both_one":if(this.options.from_fixed||this.options.to_fixed)break;var s=this.convertToRealPercent(e),r=this.result.from_percent,a=this.result.to_percent-r,l=a/2,c=s-l,d=s+l;c<0&&(d=(c=0)+a),100<d&&(c=(d=100)-a),this.coords.p_from_real=this.calcWithStep(c),this.coords.p_from_real=this.checkDiapason(this.coords.p_from_real,this.options.from_min,this.options.from_max),this.coords.p_from_fake=this.convertToFakePercent(this.coords.p_from_real),this.coords.p_to_real=this.calcWithStep(d),this.coords.p_to_real=this.checkDiapason(this.coords.p_to_real,this.options.to_min,this.options.to_max),this.coords.p_to_fake=this.convertToFakePercent(this.coords.p_to_real)}"single"===this.options.type?(this.coords.p_bar_x=this.coords.p_handle/2,this.coords.p_bar_w=this.coords.p_single_fake,this.result.from_percent=this.coords.p_single_real,this.result.from=this.convertToValue(this.coords.p_single_real),this.result.from_pretty=this._prettify(this.result.from),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from])):(this.coords.p_bar_x=this.toFixed(this.coords.p_from_fake+this.coords.p_handle/2),this.coords.p_bar_w=this.toFixed(this.coords.p_to_fake-this.coords.p_from_fake),this.result.from_percent=this.coords.p_from_real,this.result.from=this.convertToValue(this.coords.p_from_real),this.result.from_pretty=this._prettify(this.result.from),this.result.to_percent=this.coords.p_to_real,this.result.to=this.convertToValue(this.coords.p_to_real),this.result.to_pretty=this._prettify(this.result.to),this.options.values.length&&(this.result.from_value=this.options.values[this.result.from],this.result.to_value=this.options.values[this.result.to])),this.calcMinMax(),this.calcLabels()}},calcPointerPercent:function(){this.coords.w_rs?(this.coords.x_pointer<0||isNaN(this.coords.x_pointer)?this.coords.x_pointer=0:this.coords.x_pointer>this.coords.w_rs&&(this.coords.x_pointer=this.coords.w_rs),this.coords.p_pointer=this.toFixed(this.coords.x_pointer/this.coords.w_rs*100)):this.coords.p_pointer=0},convertToRealPercent:function(t){return t/(100-this.coords.p_handle)*100},convertToFakePercent:function(t){return t/100*(100-this.coords.p_handle)},getHandleX:function(){var t=100-this.coords.p_handle,e=this.toFixed(this.coords.p_pointer-this.coords.p_gap);return e<0?e=0:t<e&&(e=t),e},calcHandlePercent:function(){"single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100)},chooseHandle:function(t){return"single"===this.options.type?"single":this.coords.p_from_real+(this.coords.p_to_real-this.coords.p_from_real)/2<=t?this.options.to_fixed?"from":"to":this.options.from_fixed?"to":"from"},calcMinMax:function(){this.coords.w_rs&&(this.labels.p_min=this.labels.w_min/this.coords.w_rs*100,this.labels.p_max=this.labels.w_max/this.coords.w_rs*100)},calcLabels:function(){this.coords.w_rs&&!this.options.hide_from_to&&("single"===this.options.type?(this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=this.coords.p_single_fake+this.coords.p_handle/2-this.labels.p_single_fake/2):(this.labels.w_from=this.$cache.from.outerWidth(!1),this.labels.p_from_fake=this.labels.w_from/this.coords.w_rs*100,this.labels.p_from_left=this.coords.p_from_fake+this.coords.p_handle/2-this.labels.p_from_fake/2,this.labels.p_from_left=this.toFixed(this.labels.p_from_left),this.labels.p_from_left=this.checkEdges(this.labels.p_from_left,this.labels.p_from_fake),this.labels.w_to=this.$cache.to.outerWidth(!1),this.labels.p_to_fake=this.labels.w_to/this.coords.w_rs*100,this.labels.p_to_left=this.coords.p_to_fake+this.coords.p_handle/2-this.labels.p_to_fake/2,this.labels.p_to_left=this.toFixed(this.labels.p_to_left),this.labels.p_to_left=this.checkEdges(this.labels.p_to_left,this.labels.p_to_fake),this.labels.w_single=this.$cache.single.outerWidth(!1),this.labels.p_single_fake=this.labels.w_single/this.coords.w_rs*100,this.labels.p_single_left=(this.labels.p_from_left+this.labels.p_to_left+this.labels.p_to_fake)/2-this.labels.p_single_fake/2,this.labels.p_single_left=this.toFixed(this.labels.p_single_left)),this.labels.p_single_left=this.checkEdges(this.labels.p_single_left,this.labels.p_single_fake))},updateScene:function(){this.raf_id&&(cancelAnimationFrame(this.raf_id),this.raf_id=null),clearTimeout(this.update_tm),this.update_tm=null,this.options&&(this.drawHandles(),this.is_active?this.raf_id=requestAnimationFrame(this.updateScene.bind(this)):this.update_tm=setTimeout(this.updateScene.bind(this),300))},drawHandles:function(){this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&(this.coords.w_rs!==this.coords.w_rs_old&&(this.target="base",this.is_resize=!0),this.coords.w_rs===this.coords.w_rs_old&&!this.force_redraw||(this.setMinMax(),this.calc(!0),this.drawLabels(),this.options.grid&&(this.calcGridMargin(),this.calcGridLabels()),this.force_redraw=!0,this.coords.w_rs_old=this.coords.w_rs,this.drawShadow()),this.coords.w_rs&&(this.dragging||this.force_redraw||this.is_key)&&((this.old_from!==this.result.from||this.old_to!==this.result.to||this.force_redraw||this.is_key)&&(this.drawLabels(),this.$cache.bar[0].style.left=this.coords.p_bar_x+"%",this.$cache.bar[0].style.width=this.coords.p_bar_w+"%","single"===this.options.type?(this.$cache.bar[0].style.left=0,this.$cache.bar[0].style.width=this.coords.p_bar_w+this.coords.p_bar_x+"%",this.$cache.s_single[0].style.left=this.coords.p_single_fake+"%"):(this.$cache.s_from[0].style.left=this.coords.p_from_fake+"%",this.$cache.s_to[0].style.left=this.coords.p_to_fake+"%",this.old_from===this.result.from&&!this.force_redraw||(this.$cache.from[0].style.left=this.labels.p_from_left+"%"),this.old_to===this.result.to&&!this.force_redraw||(this.$cache.to[0].style.left=this.labels.p_to_left+"%")),this.$cache.single[0].style.left=this.labels.p_single_left+"%",this.writeToInput(),this.old_from===this.result.from&&this.old_to===this.result.to||this.is_start||(this.$cache.input.trigger("change"),this.$cache.input.trigger("input")),this.old_from=this.result.from,this.old_to=this.result.to,this.is_resize||this.is_update||this.is_start||this.is_finish||this.callOnChange(),(this.is_key||this.is_click)&&(this.is_key=!1,this.is_click=!1,this.callOnFinish()),this.is_update=!1,this.is_resize=!1,this.is_finish=!1),this.is_start=!1,this.is_key=!1,this.is_click=!1,this.force_redraw=!1))},drawLabels:function(){if(this.options){var t,e,i,o,n,s=this.options.values.length,r=this.options.p_values;if(!this.options.hide_from_to)if("single"===this.options.type)t=s?this.decorate(r[this.result.from]):(o=this._prettify(this.result.from),this.decorate(o,this.result.from)),this.$cache.single.html(t),this.calcLabels(),this.labels.p_single_left<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",this.labels.p_single_left+this.labels.p_single_fake>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible";else{i=s?(this.options.decorate_both?(t=this.decorate(r[this.result.from]),t+=this.options.values_separator,t+=this.decorate(r[this.result.to])):t=this.decorate(r[this.result.from]+this.options.values_separator+r[this.result.to]),e=this.decorate(r[this.result.from]),this.decorate(r[this.result.to])):(o=this._prettify(this.result.from),n=this._prettify(this.result.to),this.options.decorate_both?(t=this.decorate(o,this.result.from),t+=this.options.values_separator,t+=this.decorate(n,this.result.to)):t=this.decorate(o+this.options.values_separator+n,this.result.to),e=this.decorate(o,this.result.from),this.decorate(n,this.result.to)),this.$cache.single.html(t),this.$cache.from.html(e),this.$cache.to.html(i),this.calcLabels();var a=Math.min(this.labels.p_single_left,this.labels.p_from_left),l=this.labels.p_single_left+this.labels.p_single_fake,c=this.labels.p_to_left+this.labels.p_to_fake,d=Math.max(l,c);this.labels.p_from_left+this.labels.p_from_fake>=this.labels.p_to_left?(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",d=this.result.from===this.result.to?("from"===this.target?this.$cache.from[0].style.visibility="visible":"to"===this.target?this.$cache.to[0].style.visibility="visible":this.target||(this.$cache.from[0].style.visibility="visible"),this.$cache.single[0].style.visibility="hidden",c):(this.$cache.from[0].style.visibility="hidden",this.$cache.to[0].style.visibility="hidden",this.$cache.single[0].style.visibility="visible",Math.max(l,c))):(this.$cache.from[0].style.visibility="visible",this.$cache.to[0].style.visibility="visible",this.$cache.single[0].style.visibility="hidden"),a<this.labels.p_min+1?this.$cache.min[0].style.visibility="hidden":this.$cache.min[0].style.visibility="visible",d>100-this.labels.p_max-1?this.$cache.max[0].style.visibility="hidden":this.$cache.max[0].style.visibility="visible"}}},drawShadow:function(){var t,e,i,o,n=this.options,s=this.$cache,r="number"==typeof n.from_min&&!isNaN(n.from_min),a="number"==typeof n.from_max&&!isNaN(n.from_max),l="number"==typeof n.to_min&&!isNaN(n.to_min),c="number"==typeof n.to_max&&!isNaN(n.to_max);"single"===n.type?n.from_shadow&&(r||a)?(t=this.convertToPercent(r?n.from_min:n.min),e=this.convertToPercent(a?n.from_max:n.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,s.shad_single[0].style.display="block",s.shad_single[0].style.left=t+"%",s.shad_single[0].style.width=e+"%"):s.shad_single[0].style.display="none":(n.from_shadow&&(r||a)?(t=this.convertToPercent(r?n.from_min:n.min),e=this.convertToPercent(a?n.from_max:n.max)-t,t=this.toFixed(t-this.coords.p_handle/100*t),e=this.toFixed(e-this.coords.p_handle/100*e),t+=this.coords.p_handle/2,s.shad_from[0].style.display="block",s.shad_from[0].style.left=t+"%",s.shad_from[0].style.width=e+"%"):s.shad_from[0].style.display="none",n.to_shadow&&(l||c)?(i=this.convertToPercent(l?n.to_min:n.min),o=this.convertToPercent(c?n.to_max:n.max)-i,i=this.toFixed(i-this.coords.p_handle/100*i),o=this.toFixed(o-this.coords.p_handle/100*o),i+=this.coords.p_handle/2,s.shad_to[0].style.display="block",s.shad_to[0].style.left=i+"%",s.shad_to[0].style.width=o+"%"):s.shad_to[0].style.display="none")},writeToInput:function(){"single"===this.options.type?(this.options.values.length?this.$cache.input.prop("value",this.result.from_value):this.$cache.input.prop("value",this.result.from),this.$cache.input.data("from",this.result.from)):(this.options.values.length?this.$cache.input.prop("value",this.result.from_value+this.options.input_values_separator+this.result.to_value):this.$cache.input.prop("value",this.result.from+this.options.input_values_separator+this.result.to),this.$cache.input.data("from",this.result.from),this.$cache.input.data("to",this.result.to))},callOnStart:function(){this.writeToInput(),this.options.onStart&&"function"==typeof this.options.onStart&&(this.options.scope?this.options.onStart.call(this.options.scope,this.result):this.options.onStart(this.result))},callOnChange:function(){this.writeToInput(),this.options.onChange&&"function"==typeof this.options.onChange&&(this.options.scope?this.options.onChange.call(this.options.scope,this.result):this.options.onChange(this.result))},callOnFinish:function(){this.writeToInput(),this.options.onFinish&&"function"==typeof this.options.onFinish&&(this.options.scope?this.options.onFinish.call(this.options.scope,this.result):this.options.onFinish(this.result))},callOnUpdate:function(){this.writeToInput(),this.options.onUpdate&&"function"==typeof this.options.onUpdate&&(this.options.scope?this.options.onUpdate.call(this.options.scope,this.result):this.options.onUpdate(this.result))},toggleInput:function(){this.$cache.input.toggleClass("irs-hidden-input"),this.has_tab_index?this.$cache.input.prop("tabindex",-1):this.$cache.input.removeProp("tabindex"),this.has_tab_index=!this.has_tab_index},convertToPercent:function(t,e){var i,o=this.options.max-this.options.min,n=o/100;return o?(i=(e?t:t-this.options.min)/n,this.toFixed(i)):(this.no_diapason=!0,0)},convertToValue:function(t){var e,i,o=this.options.min,n=this.options.max,s=o.toString().split(".")[1],r=n.toString().split(".")[1],a=0,l=0;if(0===t)return this.options.min;if(100===t)return this.options.max;s&&(a=e=s.length),r&&(a=i=r.length),e&&i&&(a=i<=e?e:i),o<0&&(o=+(o+(l=Math.abs(o))).toFixed(a),n=+(n+l).toFixed(a));var c,d=(n-o)/100*t+o,u=this.options.step.toString().split(".")[1];return d=u?+d.toFixed(u.length):(d/=this.options.step,+(d*=this.options.step).toFixed(0)),l&&(d-=l),(c=u?+d.toFixed(u.length):this.toFixed(d))<this.options.min?c=this.options.min:c>this.options.max&&(c=this.options.max),c},calcWithStep:function(t){var e=Math.round(t/this.coords.p_step)*this.coords.p_step;return 100<e&&(e=100),100===t&&(e=100),this.toFixed(e)},checkMinInterval:function(t,e,i){var o,n,s=this.options;return s.min_interval?(o=this.convertToValue(t),n=this.convertToValue(e),"from"===i?n-o<s.min_interval&&(o=n-s.min_interval):o-n<s.min_interval&&(o=n+s.min_interval),this.convertToPercent(o)):t},checkMaxInterval:function(t,e,i){var o,n,s=this.options;return s.max_interval?(o=this.convertToValue(t),n=this.convertToValue(e),"from"===i?n-o>s.max_interval&&(o=n-s.max_interval):o-n>s.max_interval&&(o=n+s.max_interval),this.convertToPercent(o)):t},checkDiapason:function(t,e,i){var o=this.convertToValue(t),n=this.options;return"number"!=typeof e&&(e=n.min),"number"!=typeof i&&(i=n.max),o<e&&(o=e),i<o&&(o=i),this.convertToPercent(o)},toFixed:function(t){return+(t=t.toFixed(20))},_prettify:function(t){return this.options.prettify_enabled?this.options.prettify&&"function"==typeof this.options.prettify?this.options.prettify(t):this.prettify(t):t},prettify:function(t){return t.toString().replace(/(\d{1,3}(?=(?:\d\d\d)+(?!\d)))/g,"$1"+this.options.prettify_separator)},checkEdges:function(t,e){return this.options.force_edges&&(t<0?t=0:100-e<t&&(t=100-e)),this.toFixed(t)},validate:function(){var t,e,i=this.options,o=this.result,n=i.values,s=n.length;if("string"==typeof i.min&&(i.min=+i.min),"string"==typeof i.max&&(i.max=+i.max),"string"==typeof i.from&&(i.from=+i.from),"string"==typeof i.to&&(i.to=+i.to),"string"==typeof i.step&&(i.step=+i.step),"string"==typeof i.from_min&&(i.from_min=+i.from_min),"string"==typeof i.from_max&&(i.from_max=+i.from_max),"string"==typeof i.to_min&&(i.to_min=+i.to_min),"string"==typeof i.to_max&&(i.to_max=+i.to_max),"string"==typeof i.grid_num&&(i.grid_num=+i.grid_num),i.max<i.min&&(i.max=i.min),s)for(i.p_values=[],i.min=0,i.max=s-1,i.step=1,i.grid_num=i.max,i.grid_snap=!0,e=0;e<s;e++)t=+n[e],t=isNaN(t)?n[e]:(n[e]=t,this._prettify(t)),i.p_values.push(t);"number"==typeof i.from&&!isNaN(i.from)||(i.from=i.min),"number"==typeof i.to&&!isNaN(i.to)||(i.to=i.max),"single"===i.type?(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max)):(i.from<i.min&&(i.from=i.min),i.from>i.max&&(i.from=i.max),i.to<i.min&&(i.to=i.min),i.to>i.max&&(i.to=i.max),this.update_check.from&&(this.update_check.from!==i.from&&i.from>i.to&&(i.from=i.to),this.update_check.to!==i.to&&i.to<i.from&&(i.to=i.from)),i.from>i.to&&(i.from=i.to),i.to<i.from&&(i.to=i.from)),("number"!=typeof i.step||isNaN(i.step)||!i.step||i.step<0)&&(i.step=1),"number"==typeof i.from_min&&i.from<i.from_min&&(i.from=i.from_min),"number"==typeof i.from_max&&i.from>i.from_max&&(i.from=i.from_max),"number"==typeof i.to_min&&i.to<i.to_min&&(i.to=i.to_min),"number"==typeof i.to_max&&i.from>i.to_max&&(i.to=i.to_max),o&&(o.min!==i.min&&(o.min=i.min),o.max!==i.max&&(o.max=i.max),(o.from<o.min||o.from>o.max)&&(o.from=i.from),(o.to<o.min||o.to>o.max)&&(o.to=i.to)),("number"!=typeof i.min_interval||isNaN(i.min_interval)||!i.min_interval||i.min_interval<0)&&(i.min_interval=0),("number"!=typeof i.max_interval||isNaN(i.max_interval)||!i.max_interval||i.max_interval<0)&&(i.max_interval=0),i.min_interval&&i.min_interval>i.max-i.min&&(i.min_interval=i.max-i.min),i.max_interval&&i.max_interval>i.max-i.min&&(i.max_interval=i.max-i.min)},decorate:function(t,e){var i="",o=this.options;return o.prefix&&(i+=o.prefix),i+=t,o.max_postfix&&(o.values.length&&t===o.p_values[o.max]?(i+=o.max_postfix,o.postfix&&(i+=" ")):e===o.max&&(i+=o.max_postfix,o.postfix&&(i+=" "))),o.postfix&&(i+=o.postfix),i},updateFrom:function(){this.result.from=this.options.from,this.result.from_percent=this.convertToPercent(this.result.from),this.result.from_pretty=this._prettify(this.result.from),this.options.values&&(this.result.from_value=this.options.values[this.result.from])},updateTo:function(){this.result.to=this.options.to,this.result.to_percent=this.convertToPercent(this.result.to),this.result.to_pretty=this._prettify(this.result.to),this.options.values&&(this.result.to_value=this.options.values[this.result.to])},updateResult:function(){this.result.min=this.options.min,this.result.max=this.options.max,this.updateFrom(),this.updateTo()},appendGrid:function(){if(this.options.grid){var t,e,i,o,n,s,r=this.options,a=r.max-r.min,l=r.grid_num,c=0,d=4,u="";for(this.calcGridMargin(),r.grid_snap&&(l=a/r.step),50<l&&(l=50),i=this.toFixed(100/l),4<l&&(d=3),7<l&&(d=2),14<l&&(d=1),28<l&&(d=0),t=0;t<l+1;t++){for(o=d,100<(c=this.toFixed(i*t))&&(c=100),n=((this.coords.big[t]=c)-i*(t-1))/(o+1),e=1;e<=o&&0!==c;e++)u+='<span class="irs-grid-pol small" style="left: '+this.toFixed(c-n*e)+'%"></span>';u+='<span class="irs-grid-pol" style="left: '+c+'%"></span>',s=this.convertToValue(c),u+='<span class="irs-grid-text js-grid-text-'+t+'" style="left: '+c+'%">'+(s=r.values.length?r.p_values[s]:this._prettify(s))+"</span>"}this.coords.big_num=Math.ceil(l+1),this.$cache.cont.addClass("irs-with-grid"),this.$cache.grid.html(u),this.cacheGridLabels()}},cacheGridLabels:function(){var t,e,i=this.coords.big_num;for(e=0;e<i;e++)t=this.$cache.grid.find(".js-grid-text-"+e),this.$cache.grid_labels.push(t);this.calcGridLabels()},calcGridLabels:function(){var t,e,i=[],o=[],n=this.coords.big_num;for(t=0;t<n;t++)this.coords.big_w[t]=this.$cache.grid_labels[t].outerWidth(!1),this.coords.big_p[t]=this.toFixed(this.coords.big_w[t]/this.coords.w_rs*100),this.coords.big_x[t]=this.toFixed(this.coords.big_p[t]/2),i[t]=this.toFixed(this.coords.big[t]-this.coords.big_x[t]),o[t]=this.toFixed(i[t]+this.coords.big_p[t]);for(this.options.force_edges&&(i[0]<-this.coords.grid_gap&&(i[0]=-this.coords.grid_gap,o[0]=this.toFixed(i[0]+this.coords.big_p[0]),this.coords.big_x[0]=this.coords.grid_gap),o[n-1]>100+this.coords.grid_gap&&(o[n-1]=100+this.coords.grid_gap,i[n-1]=this.toFixed(o[n-1]-this.coords.big_p[n-1]),this.coords.big_x[n-1]=this.toFixed(this.coords.big_p[n-1]-this.coords.grid_gap))),this.calcGridCollision(2,i,o),this.calcGridCollision(4,i,o),t=0;t<n;t++)e=this.$cache.grid_labels[t][0],this.coords.big_x[t]!==Number.POSITIVE_INFINITY&&(e.style.marginLeft=-this.coords.big_x[t]+"%")},calcGridCollision:function(t,e,i){var o,n,s,r=this.coords.big_num;for(o=0;o<r&&!(r<=(n=o+t/2));o+=t)s=this.$cache.grid_labels[n][0],i[o]<=e[n]?s.style.visibility="visible":s.style.visibility="hidden"},calcGridMargin:function(){this.options.grid_margin&&(this.coords.w_rs=this.$cache.rs.outerWidth(!1),this.coords.w_rs&&("single"===this.options.type?this.coords.w_handle=this.$cache.s_single.outerWidth(!1):this.coords.w_handle=this.$cache.s_from.outerWidth(!1),this.coords.p_handle=this.toFixed(this.coords.w_handle/this.coords.w_rs*100),this.coords.grid_gap=this.toFixed(this.coords.p_handle/2-.1),this.$cache.grid[0].style.width=this.toFixed(100-this.coords.p_handle)+"%",this.$cache.grid[0].style.left=this.coords.grid_gap+"%"))},update:function(t){this.input&&(this.is_update=!0,this.options.from=this.result.from,this.options.to=this.result.to,this.update_check.from=this.result.from,this.update_check.to=this.result.to,this.options=l.extend(this.options,t),this.validate(),this.updateResult(t),this.toggleInput(),this.remove(),this.init(!0))},reset:function(){this.input&&(this.updateResult(),this.update())},destroy:function(){this.input&&(this.toggleInput(),this.$cache.input.prop("readonly",!1),l.data(this.input,"ionRangeSlider",null),this.remove(),this.input=null,this.options=null)}},l.fn.ionRangeSlider=function(t){return this.each(function(){l.data(this,"ionRangeSlider")||l.data(this,"ionRangeSlider",new s(this,t,o++))})},function(){for(var s=0,t=["ms","moz","webkit","o"],e=0;e<t.length&&!d.requestAnimationFrame;++e)d.requestAnimationFrame=d[t[e]+"RequestAnimationFrame"],d.cancelAnimationFrame=d[t[e]+"CancelAnimationFrame"]||d[t[e]+"CancelRequestAnimationFrame"];d.requestAnimationFrame||(d.requestAnimationFrame=function(t,e){var i=(new Date).getTime(),o=Math.max(0,16-(i-s)),n=d.setTimeout(function(){t(i+o)},o);return s=i+o,n}),d.cancelAnimationFrame||(d.cancelAnimationFrame=function(t){clearTimeout(t)})}()}),function(l,u,m,g){"use strict";if(l.console=l.console||{info:function(t){}},m)if(m.fn.fancybox)console.info("fancyBox already initialized");else{var t,e,i,o,n={closeExisting:!1,loop:!1,gutter:50,keyboard:!0,preventCaptionOverlap:!0,arrows:!0,infobar:!0,smallBtn:"auto",toolbar:"auto",buttons:["zoom","slideShow","thumbs","close"],idleTime:3,protect:!1,modal:!1,image:{preload:!1},ajax:{settings:{data:{fancybox:!0}}},iframe:{tpl:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" allowfullscreen="allowfullscreen" allow="autoplay; fullscreen" src=""></iframe>',preload:!0,css:{},attr:{scrolling:"auto"}},video:{tpl:'<video class="fancybox-video" controls controlsList="nodownload" poster="{{poster}}"><source src="{{src}}" type="{{format}}" />Sorry, your browser doesn\'t support embedded videos, <a href="{{src}}">download</a> and watch with your favorite video player!</video>',format:"",autoStart:!0},defaultType:"image",animationEffect:"zoom",animationDuration:366,zoomOpacity:"auto",transitionEffect:"fade",transitionDuration:366,slideClass:"",baseClass:"",baseTpl:'<div class="fancybox-container" role="dialog" tabindex="-1"><div class="fancybox-bg"></div><div class="fancybox-inner"><div class="fancybox-infobar"><span data-fancybox-index></span>&nbsp;/&nbsp;<span data-fancybox-count></span></div><div class="fancybox-toolbar">{{buttons}}</div><div class="fancybox-navigation">{{arrows}}</div><div class="fancybox-stage"></div><div class="fancybox-caption"><div class="fancybox-caption__body"></div></div></div></div>',spinnerTpl:'<div class="fancybox-loading"></div>',errorTpl:'<div class="fancybox-error"><p>{{ERROR}}</p></div>',btnTpl:{download:'<a download data-fancybox-download class="fancybox-button fancybox-button--download" title="{{DOWNLOAD}}" href="javascript:;"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.62 17.09V19H5.38v-1.91zm-2.97-6.96L17 11.45l-5 4.87-5-4.87 1.36-1.32 2.68 2.64V5h1.92v7.77z"/></svg></a>',zoom:'<button data-fancybox-zoom class="fancybox-button fancybox-button--zoom" title="{{ZOOM}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.7 17.3l-3-3a5.9 5.9 0 0 0-.6-7.6 5.9 5.9 0 0 0-8.4 0 5.9 5.9 0 0 0 0 8.4 5.9 5.9 0 0 0 7.7.7l3 3a1 1 0 0 0 1.3 0c.4-.5.4-1 0-1.5zM8.1 13.8a4 4 0 0 1 0-5.7 4 4 0 0 1 5.7 0 4 4 0 0 1 0 5.7 4 4 0 0 1-5.7 0z"/></svg></button>',close:'<button data-fancybox-close class="fancybox-button fancybox-button--close" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M12 10.6L6.6 5.2 5.2 6.6l5.4 5.4-5.4 5.4 1.4 1.4 5.4-5.4 5.4 5.4 1.4-1.4-5.4-5.4 5.4-5.4-1.4-1.4-5.4 5.4z"/></svg></button>',arrowLeft:'<button data-fancybox-prev class="fancybox-button fancybox-button--arrow_left" title="{{PREV}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M11.28 15.7l-1.34 1.37L5 12l4.94-5.07 1.34 1.38-2.68 2.72H19v1.94H8.6z"/></svg></div></button>',arrowRight:'<button data-fancybox-next class="fancybox-button fancybox-button--arrow_right" title="{{NEXT}}"><div><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M15.4 12.97l-2.68 2.72 1.34 1.38L19 12l-4.94-5.07-1.34 1.38 2.68 2.72H5v1.94z"/></svg></div></button>',smallBtn:'<button type="button" data-fancybox-close class="fancybox-button fancybox-close-small" title="{{CLOSE}}"><svg xmlns="http://www.w3.org/2000/svg" version="1" viewBox="0 0 24 24"><path d="M13 12l5-5-1-1-5 5-5-5-1 1 5 5-5 5 1 1 5-5 5 5 1-1z"/></svg></button>'},parentEl:"body",hideScrollbar:!0,autoFocus:!0,backFocus:!0,trapFocus:!0,fullScreen:{autoStart:!1},touch:{vertical:!0,momentum:!0},hash:null,media:{},slideShow:{autoStart:!1,speed:3e3},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"},wheel:"auto",onInit:m.noop,beforeLoad:m.noop,afterLoad:m.noop,beforeShow:m.noop,afterShow:m.noop,beforeClose:m.noop,afterClose:m.noop,onActivate:m.noop,onDeactivate:m.noop,clickContent:function(t,e){return"image"===t.type&&"zoom"},clickSlide:"close",clickOutside:"close",dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1,mobile:{preventCaptionOverlap:!1,idleTime:!1,clickContent:function(t,e){return"image"===t.type&&"toggleControls"},clickSlide:function(t,e){return"image"===t.type?"toggleControls":"close"},dblclickContent:function(t,e){return"image"===t.type&&"zoom"},dblclickSlide:function(t,e){return"image"===t.type&&"zoom"}},lang:"en",i18n:{en:{CLOSE:"Close",NEXT:"Next",PREV:"Previous",ERROR:"The requested content cannot be loaded. <br/> Please try again later.",PLAY_START:"Start slideshow",PLAY_STOP:"Pause slideshow",FULL_SCREEN:"Full screen",THUMBS:"Thumbnails",DOWNLOAD:"Download",SHARE:"Share",ZOOM:"Zoom"},de:{CLOSE:"Schlie&szlig;en",NEXT:"Weiter",PREV:"Zur&uuml;ck",ERROR:"Die angeforderten Daten konnten nicht geladen werden. <br/> Bitte versuchen Sie es sp&auml;ter nochmal.",PLAY_START:"Diaschau starten",PLAY_STOP:"Diaschau beenden",FULL_SCREEN:"Vollbild",THUMBS:"Vorschaubilder",DOWNLOAD:"Herunterladen",SHARE:"Teilen",ZOOM:"Vergr&ouml;&szlig;ern"}}},s=m(l),r=m(u),a=0,h=l.requestAnimationFrame||l.webkitRequestAnimationFrame||l.mozRequestAnimationFrame||l.oRequestAnimationFrame||function(t){return l.setTimeout(t,1e3/60)},c=l.cancelAnimationFrame||l.webkitCancelAnimationFrame||l.mozCancelAnimationFrame||l.oCancelAnimationFrame||function(t){l.clearTimeout(t)},d=function(){var t,e=u.createElement("fakeelement"),i={transition:"transitionend",OTransition:"oTransitionEnd",MozTransition:"transitionend",WebkitTransition:"webkitTransitionEnd"};for(t in i)if(e.style[t]!==g)return i[t];return"transitionend"}(),p=function(t){return t&&t.length&&t[0].offsetHeight},f=function(t,e){var i=m.extend(!0,{},t,e);return m.each(e,function(t,e){m.isArray(e)&&(i[t]=e)}),i},v=function(t,e,i){var o=this;o.opts=f({index:i},m.fancybox.defaults),m.isPlainObject(e)&&(o.opts=f(o.opts,e)),m.fancybox.isMobile&&(o.opts=f(o.opts,o.opts.mobile)),o.id=o.opts.id||++a,o.currIndex=parseInt(o.opts.index,10)||0,o.prevIndex=null,o.prevPos=null,o.currPos=0,o.firstRun=!0,o.group=[],o.slides={},o.addContent(t),o.group.length&&o.init()};m.extend(v.prototype,{init:function(){var e,i,o=this,n=o.group[o.currIndex].opts;n.closeExisting&&m.fancybox.close(!0),m("body").addClass("fancybox-active"),!m.fancybox.getInstance()&&!1!==n.hideScrollbar&&!m.fancybox.isMobile&&u.body.scrollHeight>l.innerHeight&&(m("head").append('<style id="fancybox-style-noscroll" type="text/css">.compensate-for-scrollbar{margin-right:'+(l.innerWidth-u.documentElement.clientWidth)+"px;}</style>"),m("body").addClass("compensate-for-scrollbar")),i="",m.each(n.buttons,function(t,e){i+=n.btnTpl[e]||""}),e=m(o.translate(o,n.baseTpl.replace("{{buttons}}",i).replace("{{arrows}}",n.btnTpl.arrowLeft+n.btnTpl.arrowRight))).attr("id","fancybox-container-"+o.id).addClass(n.baseClass).data("FancyBox",o).appendTo(n.parentEl),o.$refs={container:e},["bg","inner","infobar","toolbar","stage","caption","navigation"].forEach(function(t){o.$refs[t]=e.find(".fancybox-"+t)}),o.trigger("onInit"),o.activate(),o.jumpTo(o.currIndex)},translate:function(t,e){var i=t.opts.i18n[t.opts.lang]||t.opts.i18n.en;return e.replace(/\{\{(\w+)\}\}/g,function(t,e){return i[e]===g?t:i[e]})},addContent:function(t){var e,c=this,i=m.makeArray(t);m.each(i,function(t,e){var i,o,n,s,r,a={},l={};m.isPlainObject(e)?l=(a=e).opts||e:"object"===m.type(e)&&m(e).length?(l=(i=m(e)).data()||{},(l=m.extend(!0,{},l,l.options)).$orig=i,a.src=c.opts.src||l.src||i.attr("href"),a.type||a.src||(a.type="inline",a.src=e)):a={type:"html",src:e+""},a.opts=m.extend(!0,{},c.opts,l),m.isArray(l.buttons)&&(a.opts.buttons=l.buttons),m.fancybox.isMobile&&a.opts.mobile&&(a.opts=f(a.opts,a.opts.mobile)),o=a.type||a.opts.type,s=a.src||"",!o&&s&&((n=s.match(/\.(mp4|mov|ogv|webm)((\?|#).*)?$/i))?(o="video",a.opts.video.format||(a.opts.video.format="video/"+("ogv"===n[1]?"ogg":n[1]))):s.match(/(^data:image\/[a-z0-9+\/=]*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg|ico)((\?|#).*)?$)/i)?o="image":s.match(/\.(pdf)((\?|#).*)?$/i)?(o="iframe",a=m.extend(!0,a,{contentType:"pdf",opts:{iframe:{preload:!1}}})):"#"===s.charAt(0)&&(o="inline")),o?a.type=o:c.trigger("objectNeedsType",a),a.contentType||(a.contentType=-1<m.inArray(a.type,["html","inline","ajax"])?"html":a.type),a.index=c.group.length,"auto"==a.opts.smallBtn&&(a.opts.smallBtn=-1<m.inArray(a.type,["html","inline","ajax"])),"auto"===a.opts.toolbar&&(a.opts.toolbar=!a.opts.smallBtn),a.$thumb=a.opts.$thumb||null,a.opts.$trigger&&a.index===c.opts.index&&(a.$thumb=a.opts.$trigger.find("img:first"),a.$thumb.length&&(a.opts.$orig=a.opts.$trigger)),a.$thumb&&a.$thumb.length||!a.opts.$orig||(a.$thumb=a.opts.$orig.find("img:first")),a.$thumb&&!a.$thumb.length&&(a.$thumb=null),a.thumb=a.opts.thumb||(a.$thumb?a.$thumb[0].src:null),"function"===m.type(a.opts.caption)&&(a.opts.caption=a.opts.caption.apply(e,[c,a])),"function"===m.type(c.opts.caption)&&(a.opts.caption=c.opts.caption.apply(e,[c,a])),a.opts.caption instanceof m||(a.opts.caption=a.opts.caption===g?"":a.opts.caption+""),"ajax"===a.type&&1<(r=s.split(/\s+/,2)).length&&(a.src=r.shift(),a.opts.filter=r.shift()),a.opts.modal&&(a.opts=m.extend(!0,a.opts,{trapFocus:!0,infobar:0,toolbar:0,smallBtn:0,keyboard:0,slideShow:0,fullScreen:0,thumbs:0,touch:0,clickContent:!1,clickSlide:!1,clickOutside:!1,dblclickContent:!1,dblclickSlide:!1,dblclickOutside:!1})),c.group.push(a)}),Object.keys(c.slides).length&&(c.updateControls(),(e=c.Thumbs)&&e.isActive&&(e.create(),e.focus()))},addEvents:function(){var o=this;o.removeEvents(),o.$refs.container.on("click.fb-close","[data-fancybox-close]",function(t){t.stopPropagation(),t.preventDefault(),o.close(t)}).on("touchstart.fb-prev click.fb-prev","[data-fancybox-prev]",function(t){t.stopPropagation(),t.preventDefault(),o.previous()}).on("touchstart.fb-next click.fb-next","[data-fancybox-next]",function(t){t.stopPropagation(),t.preventDefault(),o.next()}).on("click.fb","[data-fancybox-zoom]",function(t){o[o.isScaledDown()?"scaleToActual":"scaleToFit"]()}),s.on("orientationchange.fb resize.fb",function(t){t&&t.originalEvent&&"resize"===t.originalEvent.type?(o.requestId&&c(o.requestId),o.requestId=h(function(){o.update(t)})):(o.current&&"iframe"===o.current.type&&o.$refs.stage.hide(),setTimeout(function(){o.$refs.stage.show(),o.update(t)},m.fancybox.isMobile?600:250))}),r.on("keydown.fb",function(t){var e=(m.fancybox?m.fancybox.getInstance():null).current,i=t.keyCode||t.which;if(9!=i){if(!(!e.opts.keyboard||t.ctrlKey||t.altKey||t.shiftKey||m(t.target).is("input,textarea,video,audio,select")))return 8===i||27===i?(t.preventDefault(),void o.close(t)):37===i||38===i?(t.preventDefault(),void o.previous()):39===i||40===i?(t.preventDefault(),void o.next()):void o.trigger("afterKeydown",t,i)}else e.opts.trapFocus&&o.focus(t)}),o.group[o.currIndex].opts.idleTime&&(o.idleSecondsCounter=0,r.on("mousemove.fb-idle mouseleave.fb-idle mousedown.fb-idle touchstart.fb-idle touchmove.fb-idle scroll.fb-idle keydown.fb-idle",function(t){o.idleSecondsCounter=0,o.isIdle&&o.showControls(),o.isIdle=!1}),o.idleInterval=l.setInterval(function(){o.idleSecondsCounter++,o.idleSecondsCounter>=o.group[o.currIndex].opts.idleTime&&!o.isDragging&&(o.isIdle=!0,o.idleSecondsCounter=0,o.hideControls())},1e3))},removeEvents:function(){s.off("orientationchange.fb resize.fb"),r.off("keydown.fb .fb-idle"),this.$refs.container.off(".fb-close .fb-prev .fb-next"),this.idleInterval&&(l.clearInterval(this.idleInterval),this.idleInterval=null)},previous:function(t){return this.jumpTo(this.currPos-1,t)},next:function(t){return this.jumpTo(this.currPos+1,t)},jumpTo:function(t,o){var e,i,n,s,r,a,l,c,d,u=this,h=u.group.length;if(!(u.isDragging||u.isClosing||u.isAnimating&&u.firstRun)){if(t=parseInt(t,10),!(n=u.current?u.current.opts.loop:u.opts.loop)&&(t<0||h<=t))return!1;if(e=u.firstRun=!Object.keys(u.slides).length,r=u.current,u.prevIndex=u.currIndex,u.prevPos=u.currPos,s=u.createSlide(t),1<h&&((n||s.index<h-1)&&u.createSlide(t+1),(n||0<s.index)&&u.createSlide(t-1)),u.current=s,u.currIndex=s.index,u.currPos=s.pos,u.trigger("beforeShow",e),u.updateControls(),s.forcedDuration=g,m.isNumeric(o)?s.forcedDuration=o:o=s.opts[e?"animationDuration":"transitionDuration"],o=parseInt(o,10),i=u.isMoved(s),s.$slide.addClass("fancybox-slide--current"),e)return s.opts.animationEffect&&o&&u.$refs.container.css("transition-duration",o+"ms"),u.$refs.container.addClass("fancybox-is-open").trigger("focus"),u.loadSlide(s),void u.preload("image");a=m.fancybox.getTranslate(r.$slide),l=m.fancybox.getTranslate(u.$refs.stage),m.each(u.slides,function(t,e){m.fancybox.stop(e.$slide,!0)}),r.pos!==s.pos&&(r.isComplete=!1),r.$slide.removeClass("fancybox-slide--complete fancybox-slide--current"),i?(d=a.left-(r.pos*a.width+r.pos*r.opts.gutter),m.each(u.slides,function(t,e){e.$slide.removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")});var i=e.pos*a.width+e.pos*e.opts.gutter;m.fancybox.setTranslate(e.$slide,{top:0,left:i-l.left+d}),e.pos!==s.pos&&e.$slide.addClass("fancybox-slide--"+(e.pos>s.pos?"next":"previous")),p(e.$slide),m.fancybox.animate(e.$slide,{top:0,left:(e.pos-s.pos)*a.width+(e.pos-s.pos)*e.opts.gutter},o,function(){e.$slide.css({transform:"",opacity:""}).removeClass("fancybox-slide--next fancybox-slide--previous"),e.pos===u.currPos&&u.complete()})})):o&&s.opts.transitionEffect&&(c="fancybox-animated fancybox-fx-"+s.opts.transitionEffect,r.$slide.addClass("fancybox-slide--"+(r.pos>s.pos?"next":"previous")),m.fancybox.animate(r.$slide,c,o,function(){r.$slide.removeClass(c).removeClass("fancybox-slide--next fancybox-slide--previous")},!1)),s.isLoaded?u.revealContent(s):u.loadSlide(s),u.preload("image")}},createSlide:function(t){var e,i,o=this;return i=(i=t%o.group.length)<0?o.group.length+i:i,!o.slides[t]&&o.group[i]&&(e=m('<div class="fancybox-slide"></div>').appendTo(o.$refs.stage),o.slides[t]=m.extend(!0,{},o.group[i],{pos:t,$slide:e,isLoaded:!1}),o.updateSlide(o.slides[t])),o.slides[t]},scaleToActual:function(t,e,i){var o,n,s,r,a,l=this,c=l.current,d=c.$content,u=m.fancybox.getTranslate(c.$slide).width,h=m.fancybox.getTranslate(c.$slide).height,p=c.width,f=c.height;l.isAnimating||l.isMoved()||!d||"image"!=c.type||!c.isLoaded||c.hasError||(l.isAnimating=!0,m.fancybox.stop(d),t=t===g?.5*u:t,e=e===g?.5*h:e,(o=m.fancybox.getTranslate(d)).top-=m.fancybox.getTranslate(c.$slide).top,o.left-=m.fancybox.getTranslate(c.$slide).left,r=p/o.width,a=f/o.height,n=.5*u-.5*p,s=.5*h-.5*f,u<p&&(0<(n=o.left*r-(t*r-t))&&(n=0),n<u-p&&(n=u-p)),h<f&&(0<(s=o.top*a-(e*a-e))&&(s=0),s<h-f&&(s=h-f)),l.updateCursor(p,f),m.fancybox.animate(d,{top:s,left:n,scaleX:r,scaleY:a},i||366,function(){l.isAnimating=!1}),l.SlideShow&&l.SlideShow.isActive&&l.SlideShow.stop())},scaleToFit:function(t){var e,i=this,o=i.current,n=o.$content;i.isAnimating||i.isMoved()||!n||"image"!=o.type||!o.isLoaded||o.hasError||(i.isAnimating=!0,m.fancybox.stop(n),e=i.getFitPos(o),i.updateCursor(e.width,e.height),m.fancybox.animate(n,{top:e.top,left:e.left,scaleX:e.width/n.width(),scaleY:e.height/n.height()},t||366,function(){i.isAnimating=!1}))},getFitPos:function(t){var e,i,o,n,s=t.$content,r=t.$slide,a=t.width||t.opts.width,l=t.height||t.opts.height,c={};return!!(t.isLoaded&&s&&s.length)&&(e=m.fancybox.getTranslate(this.$refs.stage).width,i=m.fancybox.getTranslate(this.$refs.stage).height,e-=parseFloat(r.css("paddingLeft"))+parseFloat(r.css("paddingRight"))+parseFloat(s.css("marginLeft"))+parseFloat(s.css("marginRight")),i-=parseFloat(r.css("paddingTop"))+parseFloat(r.css("paddingBottom"))+parseFloat(s.css("marginTop"))+parseFloat(s.css("marginBottom")),a&&l||(a=e,l=i),e-.5<(a*=o=Math.min(1,e/a,i/l))&&(a=e),i-.5<(l*=o)&&(l=i),"image"===t.type?(c.top=Math.floor(.5*(i-l))+parseFloat(r.css("paddingTop")),c.left=Math.floor(.5*(e-a))+parseFloat(r.css("paddingLeft"))):"video"===t.contentType&&(a/(n=t.opts.width&&t.opts.height?a/l:t.opts.ratio||16/9)<l?l=a/n:l*n<a&&(a=l*n)),c.width=a,c.height=l,c)},update:function(i){var o=this;m.each(o.slides,function(t,e){o.updateSlide(e,i)})},updateSlide:function(t,e){var i=this,o=t&&t.$content,n=t.width||t.opts.width,s=t.height||t.opts.height,r=t.$slide;i.adjustCaption(t),o&&(n||s||"video"===t.contentType)&&!t.hasError&&(m.fancybox.stop(o),m.fancybox.setTranslate(o,i.getFitPos(t)),t.pos===i.currPos&&(i.isAnimating=!1,i.updateCursor())),i.adjustLayout(t),r.length&&(r.trigger("refresh"),t.pos===i.currPos&&i.$refs.toolbar.add(i.$refs.navigation.find(".fancybox-button--arrow_right")).toggleClass("compensate-for-scrollbar",r.get(0).scrollHeight>r.get(0).clientHeight)),i.trigger("onUpdate",t,e)},centerSlide:function(t){var e=this,i=e.current,o=i.$slide;!e.isClosing&&i&&(o.siblings().css({transform:"",opacity:""}),o.parent().children().removeClass("fancybox-slide--previous fancybox-slide--next"),m.fancybox.animate(o,{top:0,left:0,opacity:1},t===g?0:t,function(){o.css({transform:"",opacity:""}),i.isComplete||e.complete()},!1))},isMoved:function(t){var e,i,o=t||this.current;return!!o&&(i=m.fancybox.getTranslate(this.$refs.stage),e=m.fancybox.getTranslate(o.$slide),!o.$slide.hasClass("fancybox-animated")&&(.5<Math.abs(e.top-i.top)||.5<Math.abs(e.left-i.left)))},updateCursor:function(t,e){var i,o,n=this.current,s=this.$refs.container;n&&!this.isClosing&&this.Guestures&&(s.removeClass("fancybox-is-zoomable fancybox-can-zoomIn fancybox-can-zoomOut fancybox-can-swipe fancybox-can-pan"),o=!!(i=this.canPan(t,e))||this.isZoomable(),s.toggleClass("fancybox-is-zoomable",o),m("[data-fancybox-zoom]").prop("disabled",!o),i?s.addClass("fancybox-can-pan"):o&&("zoom"===n.opts.clickContent||m.isFunction(n.opts.clickContent)&&"zoom"==n.opts.clickContent(n))?s.addClass("fancybox-can-zoomIn"):n.opts.touch&&(n.opts.touch.vertical||1<this.group.length)&&"video"!==n.contentType&&s.addClass("fancybox-can-swipe"))},isZoomable:function(){var t,e=this.current;if(e&&!this.isClosing&&"image"===e.type&&!e.hasError){if(!e.isLoaded)return!0;if((t=this.getFitPos(e))&&(e.width>t.width||e.height>t.height))return!0}return!1},isScaledDown:function(t,e){var i=!1,o=this.current,n=o.$content;return t!==g&&e!==g?i=t<o.width&&e<o.height:n&&(i=(i=m.fancybox.getTranslate(n)).width<o.width&&i.height<o.height),i},canPan:function(t,e){var i=this.current,o=null,n=!1;return"image"===i.type&&(i.isComplete||t&&e)&&!i.hasError&&(n=this.getFitPos(i),t!==g&&e!==g?o={width:t,height:e}:i.isComplete&&(o=m.fancybox.getTranslate(i.$content)),o&&n&&(n=1.5<Math.abs(o.width-n.width)||1.5<Math.abs(o.height-n.height))),n},loadSlide:function(i){var t,e,o,n=this;if(!i.isLoading&&!i.isLoaded){if(!(i.isLoading=!0)===n.trigger("beforeLoad",i))return i.isLoading=!1;switch(t=i.type,(e=i.$slide).off("refresh").trigger("onReset").addClass(i.opts.slideClass),t){case"image":n.setImage(i);break;case"iframe":n.setIframe(i);break;case"html":n.setContent(i,i.src||i.content);break;case"video":n.setContent(i,i.opts.video.tpl.replace(/\{\{src\}\}/gi,i.src).replace("{{format}}",i.opts.videoFormat||i.opts.video.format||"").replace("{{poster}}",i.thumb||""));break;case"inline":m(i.src).length?n.setContent(i,m(i.src)):n.setError(i);break;case"ajax":n.showLoading(i),o=m.ajax(m.extend({},i.opts.ajax.settings,{url:i.src,success:function(t,e){"success"===e&&n.setContent(i,t)},error:function(t,e){t&&"abort"!==e&&n.setError(i)}})),e.one("onReset",function(){o.abort()});break;default:n.setError(i)}return!0}},setImage:function(e){var t,i=this;setTimeout(function(){var t=e.$image;i.isClosing||!e.isLoading||t&&t.length&&t[0].complete||e.hasError||i.showLoading(e)},50),i.checkSrcset(e),e.$content=m('<div class="fancybox-content"></div>').addClass("fancybox-is-hidden").appendTo(e.$slide.addClass("fancybox-slide--image")),!1!==e.opts.preload&&e.opts.width&&e.opts.height&&e.thumb&&(e.width=e.opts.width,e.height=e.opts.height,(t=u.createElement("img")).onerror=function(){m(this).remove(),e.$ghost=null},t.onload=function(){i.afterLoad(e)},e.$ghost=m(t).addClass("fancybox-image").appendTo(e.$content).attr("src",e.thumb)),i.setBigImage(e)},checkSrcset:function(t){var e,i,o,n,s=t.opts.srcset||t.opts.image.srcset;if(s){o=l.devicePixelRatio||1,n=l.innerWidth*o,(i=s.split(",").map(function(t){var o={};return t.trim().split(/\s+/).forEach(function(t,e){var i=parseInt(t.substring(0,t.length-1),10);if(0===e)return o.url=t;i&&(o.value=i,o.postfix=t[t.length-1])}),o})).sort(function(t,e){return t.value-e.value});for(var r=0;r<i.length;r++){var a=i[r];if("w"===a.postfix&&a.value>=n||"x"===a.postfix&&a.value>=o){e=a;break}}!e&&i.length&&(e=i[i.length-1]),e&&(t.src=e.url,t.width&&t.height&&"w"==e.postfix&&(t.height=t.width/t.height*e.value,t.width=e.value),t.opts.srcset=s)}},setBigImage:function(e){var i=this,t=u.createElement("img"),o=m(t);e.$image=o.one("error",function(){i.setError(e)}).one("load",function(){var t;e.$ghost||(i.resolveImageSlideSize(e,this.naturalWidth,this.naturalHeight),i.afterLoad(e)),i.isClosing||(e.opts.srcset&&((t=e.opts.sizes)&&"auto"!==t||(t=(1<e.width/e.height&&1<s.width()/s.height()?"100":Math.round(e.width/e.height*100))+"vw"),o.attr("sizes",t).attr("srcset",e.opts.srcset)),e.$ghost&&setTimeout(function(){e.$ghost&&!i.isClosing&&e.$ghost.hide()},Math.min(300,Math.max(1e3,e.height/1600))),i.hideLoading(e))}).addClass("fancybox-image").attr("src",e.src).appendTo(e.$content),(t.complete||"complete"==t.readyState)&&o.naturalWidth&&o.naturalHeight?o.trigger("load"):t.error&&o.trigger("error")},resolveImageSlideSize:function(t,e,i){var o=parseInt(t.opts.width,10),n=parseInt(t.opts.height,10);t.width=e,t.height=i,0<o&&(t.width=o,t.height=Math.floor(o*i/e)),0<n&&(t.width=Math.floor(n*e/i),t.height=n)},setIframe:function(n){var s,e=this,r=n.opts.iframe,a=n.$slide;n.$content=m('<div class="fancybox-content'+(r.preload?" fancybox-is-hidden":"")+'"></div>').css(r.css).appendTo(a),a.addClass("fancybox-slide--"+n.contentType),n.$iframe=s=m(r.tpl.replace(/\{rnd\}/g,(new Date).getTime())).attr(r.attr).appendTo(n.$content),r.preload?(e.showLoading(n),s.on("load.fb error.fb",function(t){this.isReady=1,n.$slide.trigger("refresh"),e.afterLoad(n)}),a.on("refresh.fb",function(){var t,e=n.$content,i=r.css.width,o=r.css.height;if(1===s[0].isReady){try{t=s.contents().find("body")}catch(t){}t&&t.length&&t.children().length&&(a.css("overflow","visible"),e.css({width:"100%","max-width":"100%",height:"9999px"}),i===g&&(i=Math.ceil(Math.max(t[0].clientWidth,t.outerWidth(!0)))),e.css("width",i||"").css("max-width",""),o===g&&(o=Math.ceil(Math.max(t[0].clientHeight,t.outerHeight(!0)))),e.css("height",o||""),a.css("overflow","auto")),e.removeClass("fancybox-is-hidden")}})):e.afterLoad(n),s.attr("src",n.src),a.one("onReset",function(){try{m(this).find("iframe").hide().unbind().attr("src","//about:blank")}catch(t){}m(this).off("refresh.fb").empty(),n.isLoaded=!1,n.isRevealed=!1})},setContent:function(t,e){var i;this.isClosing||(this.hideLoading(t),t.$content&&m.fancybox.stop(t.$content),t.$slide.empty(),(i=e)&&i.hasOwnProperty&&i instanceof m&&e.parent().length?((e.hasClass("fancybox-content")||e.parent().hasClass("fancybox-content"))&&e.parents(".fancybox-slide").trigger("onReset"),t.$placeholder=m("<div>").hide().insertAfter(e),e.css("display","inline-block")):t.hasError||("string"===m.type(e)&&(e=m("<div>").append(m.trim(e)).contents()),t.opts.filter&&(e=m("<div>").html(e).find(t.opts.filter))),t.$slide.one("onReset",function(){m(this).find("video,audio").trigger("pause"),t.$placeholder&&(t.$placeholder.after(e.removeClass("fancybox-content").hide()).remove(),t.$placeholder=null),t.$smallBtn&&(t.$smallBtn.remove(),t.$smallBtn=null),t.hasError||(m(this).empty(),t.isLoaded=!1,t.isRevealed=!1)}),m(e).appendTo(t.$slide),m(e).is("video,audio")&&(m(e).addClass("fancybox-video"),m(e).wrap("<div></div>"),t.contentType="video",t.opts.width=t.opts.width||m(e).attr("width"),t.opts.height=t.opts.height||m(e).attr("height")),t.$content=t.$slide.children().filter("div,form,main,video,audio,article,.fancybox-content").first(),t.$content.siblings().hide(),t.$content.length||(t.$content=t.$slide.wrapInner("<div></div>").children().first()),t.$content.addClass("fancybox-content"),t.$slide.addClass("fancybox-slide--"+t.contentType),this.afterLoad(t))},setError:function(t){t.hasError=!0,t.$slide.trigger("onReset").removeClass("fancybox-slide--"+t.contentType).addClass("fancybox-slide--error"),t.contentType="html",this.setContent(t,this.translate(t,t.opts.errorTpl)),t.pos===this.currPos&&(this.isAnimating=!1)},showLoading:function(t){(t=t||this.current)&&!t.$spinner&&(t.$spinner=m(this.translate(this,this.opts.spinnerTpl)).appendTo(t.$slide).hide().fadeIn("fast"))},hideLoading:function(t){(t=t||this.current)&&t.$spinner&&(t.$spinner.stop().remove(),delete t.$spinner)},afterLoad:function(t){this.isClosing||(t.isLoading=!1,t.isLoaded=!0,this.trigger("afterLoad",t),this.hideLoading(t),!t.opts.smallBtn||t.$smallBtn&&t.$smallBtn.length||(t.$smallBtn=m(this.translate(t,t.opts.btnTpl.smallBtn)).appendTo(t.$content)),t.opts.protect&&t.$content&&!t.hasError&&(t.$content.on("contextmenu.fb",function(t){return 2==t.button&&t.preventDefault(),!0}),"image"===t.type&&m('<div class="fancybox-spaceball"></div>').appendTo(t.$content)),this.adjustCaption(t),this.adjustLayout(t),t.pos===this.currPos&&this.updateCursor(),this.revealContent(t))},adjustCaption:function(t){var e,i=t||this.current,o=i.opts.caption,n=i.opts.preventCaptionOverlap,s=this.$refs.caption,r=!1;s.toggleClass("fancybox-caption--separate",n),n&&o&&o.length&&(i.pos!==this.currPos?((e=s.clone().appendTo(s.parent())).children().eq(0).empty().html(o),r=e.outerHeight(!0),e.empty().remove()):this.$caption&&(r=this.$caption.outerHeight(!0)),i.$slide.css("padding-bottom",r||""))},adjustLayout:function(t){var e,i,o,n,s=t||this.current;s.isLoaded&&!0!==s.opts.disableLayoutFix&&(s.$content.css("margin-bottom",""),s.$content.outerHeight()>s.$slide.height()+.5&&(o=s.$slide[0].style["padding-bottom"],n=s.$slide.css("padding-bottom"),0<parseFloat(n)&&(e=s.$slide[0].scrollHeight,s.$slide.css("padding-bottom",0),Math.abs(e-s.$slide[0].scrollHeight)<1&&(i=n),s.$slide.css("padding-bottom",o))),s.$content.css("margin-bottom",i))},revealContent:function(t){var e,i,o,n,s=this,r=t.$slide,a=!1,l=!1,c=s.isMoved(t),d=t.isRevealed;return t.isRevealed=!0,e=t.opts[s.firstRun?"animationEffect":"transitionEffect"],o=t.opts[s.firstRun?"animationDuration":"transitionDuration"],o=parseInt(t.forcedDuration===g?o:t.forcedDuration,10),!c&&t.pos===s.currPos&&o||(e=!1),"zoom"===e&&(t.pos===s.currPos&&o&&"image"===t.type&&!t.hasError&&(l=s.getThumbPos(t))?a=s.getFitPos(t):e="fade"),"zoom"===e?(s.isAnimating=!0,a.scaleX=a.width/l.width,a.scaleY=a.height/l.height,"auto"==(n=t.opts.zoomOpacity)&&(n=.1<Math.abs(t.width/t.height-l.width/l.height)),n&&(l.opacity=.1,a.opacity=1),m.fancybox.setTranslate(t.$content.removeClass("fancybox-is-hidden"),l),p(t.$content),void m.fancybox.animate(t.$content,a,o,function(){s.isAnimating=!1,s.complete()})):(s.updateSlide(t),e?(m.fancybox.stop(r),i="fancybox-slide--"+(t.pos>=s.prevPos?"next":"previous")+" fancybox-animated fancybox-fx-"+e,r.addClass(i).removeClass("fancybox-slide--current"),t.$content.removeClass("fancybox-is-hidden"),p(r),"image"!==t.type&&t.$content.hide().show(0),void m.fancybox.animate(r,"fancybox-slide--current",o,function(){r.removeClass(i).css({transform:"",opacity:""}),t.pos===s.currPos&&s.complete()},!0)):(t.$content.removeClass("fancybox-is-hidden"),d||!c||"image"!==t.type||t.hasError||t.$content.hide().fadeIn("fast"),void(t.pos===s.currPos&&s.complete())))},getThumbPos:function(t){var e,i,o,n,s,r,a,l,c,d=t.$thumb;return!!(d&&(a=d[0])&&a.ownerDocument===u&&(m(".fancybox-container").css("pointer-events","none"),l={x:a.getBoundingClientRect().left+a.offsetWidth/2,y:a.getBoundingClientRect().top+a.offsetHeight/2},c=u.elementFromPoint(l.x,l.y)===a,m(".fancybox-container").css("pointer-events",""),c))&&(i=m.fancybox.getTranslate(d),o=parseFloat(d.css("border-top-width")||0),n=parseFloat(d.css("border-right-width")||0),s=parseFloat(d.css("border-bottom-width")||0),r=parseFloat(d.css("border-left-width")||0),e={top:i.top+o,left:i.left+r,width:i.width-n-r,height:i.height-o-s,scaleX:1,scaleY:1},0<i.width&&0<i.height&&e)},complete:function(){var t,i=this,e=i.current,o={};!i.isMoved()&&e.isLoaded&&(e.isComplete||(e.isComplete=!0,e.$slide.siblings().trigger("onReset"),i.preload("inline"),p(e.$slide),e.$slide.addClass("fancybox-slide--complete"),m.each(i.slides,function(t,e){e.pos>=i.currPos-1&&e.pos<=i.currPos+1?o[e.pos]=e:e&&(m.fancybox.stop(e.$slide),e.$slide.off().remove())}),i.slides=o),i.isAnimating=!1,i.updateCursor(),i.trigger("afterShow"),e.opts.video.autoStart&&e.$slide.find("video,audio").filter(":visible:first").trigger("play").one("ended",function(){Document.exitFullscreen?Document.exitFullscreen():this.webkitExitFullscreen&&this.webkitExitFullscreen(),i.next()}),e.opts.autoFocus&&"html"===e.contentType&&((t=e.$content.find("input[autofocus]:enabled:visible:first")).length?t.trigger("focus"):i.focus(null,!0)),e.$slide.scrollTop(0).scrollLeft(0))},preload:function(t){var e,i;this.group.length<2||(i=this.slides[this.currPos+1],(e=this.slides[this.currPos-1])&&e.type===t&&this.loadSlide(e),i&&i.type===t&&this.loadSlide(i))},focus:function(t,e){var i,o,n=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","video","audio","[contenteditable]",'[tabindex]:not([tabindex^="-"])'].join(",");this.isClosing||((i=(i=!t&&this.current&&this.current.isComplete?this.current.$slide.find("*:visible"+(e?":not(.fancybox-close-small)":"")):this.$refs.container.find("*:visible")).filter(n).filter(function(){return"hidden"!==m(this).css("visibility")&&!m(this).hasClass("disabled")})).length?(o=i.index(u.activeElement),t&&t.shiftKey?(o<0||0==o)&&(t.preventDefault(),i.eq(i.length-1).trigger("focus")):(o<0||o==i.length-1)&&(t&&t.preventDefault(),i.eq(0).trigger("focus"))):this.$refs.container.trigger("focus"))},activate:function(){var e=this;m(".fancybox-container").each(function(){var t=m(this).data("FancyBox");t&&t.id!==e.id&&!t.isClosing&&(t.trigger("onDeactivate"),t.removeEvents(),t.isVisible=!1)}),e.isVisible=!0,(e.current||e.isIdle)&&(e.update(),e.updateControls()),e.trigger("onActivate"),e.addEvents()},close:function(t,e){function i(){d.cleanUp(t)}var o,n,s,r,a,l,c,d=this,u=d.current;return!d.isClosing&&(!(d.isClosing=!0)===d.trigger("beforeClose",t)?(d.isClosing=!1,h(function(){d.update()}),!1):(d.removeEvents(),s=u.$content,o=u.opts.animationEffect,n=m.isNumeric(e)?e:o?u.opts.animationDuration:0,u.$slide.removeClass("fancybox-slide--complete fancybox-slide--next fancybox-slide--previous fancybox-animated"),!0!==t?m.fancybox.stop(u.$slide):o=!1,u.$slide.siblings().trigger("onReset").remove(),n&&d.$refs.container.removeClass("fancybox-is-open").addClass("fancybox-is-closing").css("transition-duration",n+"ms"),d.hideLoading(u),d.hideControls(!0),d.updateCursor(),"zoom"!==o||s&&n&&"image"===u.type&&!d.isMoved()&&!u.hasError&&(c=d.getThumbPos(u))||(o="fade"),"zoom"===o?(m.fancybox.stop(s),l={top:(r=m.fancybox.getTranslate(s)).top,left:r.left,scaleX:r.width/c.width,scaleY:r.height/c.height,width:c.width,height:c.height},"auto"==(a=u.opts.zoomOpacity)&&(a=.1<Math.abs(u.width/u.height-c.width/c.height)),a&&(c.opacity=0),m.fancybox.setTranslate(s,l),p(s),m.fancybox.animate(s,c,n,i)):o&&n?m.fancybox.animate(u.$slide.addClass("fancybox-slide--previous").removeClass("fancybox-slide--current"),"fancybox-animated fancybox-fx-"+o,n,i):!0===t?setTimeout(i,n):i(),!0))},cleanUp:function(t){var e,i,o,n=this.current.opts.$orig;this.current.$slide.trigger("onReset"),this.$refs.container.empty().remove(),this.trigger("afterClose",t),this.current.opts.backFocus&&(n&&n.length&&n.is(":visible")||(n=this.$trigger),n&&n.length&&(i=l.scrollX,o=l.scrollY,n.trigger("focus"),m("html, body").scrollTop(o).scrollLeft(i))),this.current=null,(e=m.fancybox.getInstance())?e.activate():(m("body").removeClass("fancybox-active compensate-for-scrollbar"),m("#fancybox-style-noscroll").remove())},trigger:function(t,e){var i,o=Array.prototype.slice.call(arguments,1),n=e&&e.opts?e:this.current;if(n?o.unshift(n):n=this,o.unshift(this),m.isFunction(n.opts[t])&&(i=n.opts[t].apply(n,o)),!1===i)return i;"afterClose"!==t&&this.$refs?this.$refs.container.trigger(t+".fb",o):r.trigger(t+".fb",o)},updateControls:function(){var t=this,e=t.current,i=e.index,o=t.$refs.container,n=t.$refs.caption,s=e.opts.caption;e.$slide.trigger("refresh"),s&&s.length?(t.$caption=n).children().eq(0).html(s):t.$caption=null,t.hasHiddenControls||t.isIdle||t.showControls(),o.find("[data-fancybox-count]").html(t.group.length),o.find("[data-fancybox-index]").html(i+1),o.find("[data-fancybox-prev]").prop("disabled",!e.opts.loop&&i<=0),o.find("[data-fancybox-next]").prop("disabled",!e.opts.loop&&i>=t.group.length-1),"image"===e.type?o.find("[data-fancybox-zoom]").show().end().find("[data-fancybox-download]").attr("href",e.opts.image.src||e.src).show():e.opts.toolbar&&o.find("[data-fancybox-download],[data-fancybox-zoom]").hide(),m(u.activeElement).is(":hidden,[disabled]")&&t.$refs.container.trigger("focus")},hideControls:function(t){var e=["infobar","toolbar","nav"];!t&&this.current.opts.preventCaptionOverlap||e.push("caption"),this.$refs.container.removeClass(e.map(function(t){return"fancybox-show-"+t}).join(" ")),this.hasHiddenControls=!0},showControls:function(){var t=this.current?this.current.opts:this.opts,e=this.$refs.container;this.hasHiddenControls=!1,this.idleSecondsCounter=0,e.toggleClass("fancybox-show-toolbar",!(!t.toolbar||!t.buttons)).toggleClass("fancybox-show-infobar",!!(t.infobar&&1<this.group.length)).toggleClass("fancybox-show-caption",!!this.$caption).toggleClass("fancybox-show-nav",!!(t.arrows&&1<this.group.length)).toggleClass("fancybox-is-modal",!!t.modal)},toggleControls:function(){this.hasHiddenControls?this.showControls():this.hideControls()}}),m.fancybox={version:"3.5.7",defaults:n,getInstance:function(t){var e=m('.fancybox-container:not(".fancybox-is-closing"):last').data("FancyBox"),i=Array.prototype.slice.call(arguments,1);return e instanceof v&&("string"===m.type(t)?e[t].apply(e,i):"function"===m.type(t)&&t.apply(e,i),e)},open:function(t,e,i){return new v(t,e,i)},close:function(t){var e=this.getInstance();e&&(e.close(),!0===t&&this.close(t))},destroy:function(){this.close(!0),r.add("body").off("click.fb-start","**")},isMobile:/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),use3d:(t=u.createElement("div"),l.getComputedStyle&&l.getComputedStyle(t)&&l.getComputedStyle(t).getPropertyValue("transform")&&!(u.documentMode&&u.documentMode<11)),getTranslate:function(t){var e;return!(!t||!t.length)&&{top:(e=t[0].getBoundingClientRect()).top||0,left:e.left||0,width:e.width,height:e.height,opacity:parseFloat(t.css("opacity"))}},setTranslate:function(t,e){var i="",o={};if(t&&e)return e.left===g&&e.top===g||(i=(e.left===g?t.position().left:e.left)+"px, "+(e.top===g?t.position().top:e.top)+"px",i=this.use3d?"translate3d("+i+", 0px)":"translate("+i+")"),e.scaleX!==g&&e.scaleY!==g?i+=" scale("+e.scaleX+", "+e.scaleY+")":e.scaleX!==g&&(i+=" scaleX("+e.scaleX+")"),i.length&&(o.transform=i),e.opacity!==g&&(o.opacity=e.opacity),e.width!==g&&(o.width=e.width),e.height!==g&&(o.height=e.height),t.css(o)},animate:function(e,i,o,n,s){var r,a=this;m.isFunction(o)&&(n=o,o=null),a.stop(e),r=a.getTranslate(e),e.on(d,function(t){t&&t.originalEvent&&(!e.is(t.originalEvent.target)||"z-index"==t.originalEvent.propertyName)||(a.stop(e),m.isNumeric(o)&&e.css("transition-duration",""),m.isPlainObject(i)?i.scaleX!==g&&i.scaleY!==g&&a.setTranslate(e,{top:i.top,left:i.left,width:r.width*i.scaleX,height:r.height*i.scaleY,scaleX:1,scaleY:1}):!0!==s&&e.removeClass(i),m.isFunction(n)&&n(t))}),m.isNumeric(o)&&e.css("transition-duration",o+"ms"),m.isPlainObject(i)?(i.scaleX!==g&&i.scaleY!==g&&(delete i.width,delete i.height,e.parent().hasClass("fancybox-slide--image")&&e.parent().addClass("fancybox-is-scaling")),m.fancybox.setTranslate(e,i)):e.addClass(i),e.data("timer",setTimeout(function(){e.trigger(d)},o+33))},stop:function(t,e){t&&t.length&&(clearTimeout(t.data("timer")),e&&t.trigger(d),t.off(d).css("transition-duration",""),t.parent().removeClass("fancybox-is-scaling"))}},m.fn.fancybox=function(t){var e;return(e=(t=t||{}).selector||!1)?m("body").off("click.fb-start",e).on("click.fb-start",e,{options:t},y):this.off("click.fb-start").on("click.fb-start",{items:this,options:t},y),this},r.on("click.fb-start","[data-fancybox]",y),r.on("click.fb-start","[data-fancybox-trigger]",function(t){m('[data-fancybox="'+m(this).attr("data-fancybox-trigger")+'"]').eq(m(this).attr("data-fancybox-index")||0).trigger("click.fb-start",{$trigger:m(this)})}),e=".fancybox-button",i="fancybox-focus",o=null,r.on("mousedown mouseup focus blur",e,function(t){switch(t.type){case"mousedown":o=m(this);break;case"mouseup":o=null;break;case"focusin":m(e).removeClass(i),m(this).is(o)||m(this).is("[disabled]")||m(this).addClass(i);break;case"focusout":m(e).removeClass(i)}})}function y(t,e){var i,o,n,s=[],r=0;t&&t.isDefaultPrevented()||(t.preventDefault(),e=e||{},t&&t.data&&(e=f(t.data.options,e)),i=e.$target||m(t.currentTarget).trigger("blur"),(n=m.fancybox.getInstance())&&n.$trigger&&n.$trigger.is(i)||(s=e.selector?m(e.selector):(o=i.attr("data-fancybox")||"")?(s=t.data?t.data.items:[]).length?s.filter('[data-fancybox="'+o+'"]'):m('[data-fancybox="'+o+'"]'):[i],(r=m(s).index(i))<0&&(r=0),(n=m.fancybox.open(s,e,r)).$trigger=i))}}(window,document,jQuery),function(p){"use strict";function f(i,t,e){if(i)return e=e||"","object"===p.type(e)&&(e=p.param(e,!0)),p.each(t,function(t,e){i=i.replace("$"+t,e||"")}),e.length&&(i+=(0<i.indexOf("?")?"&":"?")+e),i}var o={youtube:{matcher:/(youtube\.com|youtu\.be|youtube\-nocookie\.com)\/(watch\?(.*&)?v=|v\/|u\/|embed\/?)?(videoseries\?list=(.*)|[\w-]{11}|\?listType=(.*)&list=(.*))(.*)/i,params:{autoplay:1,autohide:1,fs:1,rel:0,hd:1,wmode:"transparent",enablejsapi:1,html5:1},paramPlace:8,type:"iframe",url:"https://www.youtube-nocookie.com/embed/$4",thumb:"https://img.youtube.com/vi/$4/hqdefault.jpg"},vimeo:{matcher:/^.+vimeo.com\/(.*\/)?([\d]+)(.*)?/,params:{autoplay:1,hd:1,show_title:1,show_byline:1,show_portrait:0,fullscreen:1},paramPlace:3,type:"iframe",url:"//player.vimeo.com/video/$2"},instagram:{matcher:/(instagr\.am|instagram\.com)\/p\/([a-zA-Z0-9_\-]+)\/?/i,type:"image",url:"//$1/p/$2/media/?size=l"},gmap_place:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(((maps\/(place\/(.*)\/)?\@(.*),(\d+.?\d+?)z))|(\?ll=))(.*)?/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/?ll="+(t[9]?t[9]+"&z="+Math.floor(t[10])+(t[12]?t[12].replace(/^\//,"&"):""):t[12]+"").replace(/\?/,"&")+"&output="+(t[12]&&0<t[12].indexOf("layer=c")?"svembed":"embed")}},gmap_search:{matcher:/(maps\.)?google\.([a-z]{2,3}(\.[a-z]{2})?)\/(maps\/search\/)(.*)/i,type:"iframe",url:function(t){return"//maps.google."+t[2]+"/maps?q="+t[5].replace("query=","q=").replace("api=1","")+"&output=embed"}}};p(document).on("objectNeedsType.fb",function(t,e,n){var i,s,r,a,l,c,d,u=n.src||"",h=!1;i=p.extend(!0,{},o,n.opts.media),p.each(i,function(t,e){if(r=u.match(e.matcher)){if(h=e.type,d=t,c={},e.paramPlace&&r[e.paramPlace]){"?"==(l=r[e.paramPlace])[0]&&(l=l.substring(1)),l=l.split("&");for(var i=0;i<l.length;++i){var o=l[i].split("=",2);2==o.length&&(c[o[0]]=decodeURIComponent(o[1].replace(/\+/g," ")))}}return a=p.extend(!0,{},e.params,n.opts[t],c),u="function"===p.type(e.url)?e.url.call(this,r,a,n):f(e.url,r,a),s="function"===p.type(e.thumb)?e.thumb.call(this,r,a,n):f(e.thumb,r),"youtube"===t?u=u.replace(/&t=((\d+)m)?(\d+)s/,function(t,e,i,o){return"&start="+((i?60*parseInt(i,10):0)+parseInt(o,10))}):"vimeo"===t&&(u=u.replace("&%23","#")),!1}}),h?(n.opts.thumb||n.opts.$thumb&&n.opts.$thumb.length||(n.opts.thumb=s),"iframe"===h&&(n.opts=p.extend(!0,n.opts,{iframe:{preload:!1,attr:{scrolling:"no"}}})),p.extend(n,{type:h,src:u,origSrc:n.src,contentSource:d,contentType:"image"===h?"image":"gmap_place"==d||"gmap_search"==d?"map":"video"})):u&&(n.type=n.opts.defaultType)});var n={youtube:{src:"https://www.youtube.com/iframe_api",class:"YT",loading:!1,loaded:!1},vimeo:{src:"https://player.vimeo.com/api/player.js",class:"Vimeo",loading:!1,loaded:!1},load:function(t){var e,i=this;this[t].loaded?setTimeout(function(){i.done(t)}):this[t].loading||(this[t].loading=!0,(e=document.createElement("script")).type="text/javascript",e.src=this[t].src,"youtube"===t?window.onYouTubeIframeAPIReady=function(){i[t].loaded=!0,i.done(t)}:e.onload=function(){i[t].loaded=!0,i.done(t)},document.body.appendChild(e))},done:function(t){var e,i;"youtube"===t&&delete window.onYouTubeIframeAPIReady,(e=p.fancybox.getInstance())&&(i=e.current.$content.find("iframe"),"youtube"===t&&void 0!==YT&&YT?new YT.Player(i.attr("id"),{events:{onStateChange:function(t){0==t.data&&e.next()}}}):"vimeo"===t&&void 0!==Vimeo&&Vimeo&&new Vimeo.Player(i).on("ended",function(){e.next()}))}};p(document).on({"afterShow.fb":function(t,e,i){1<e.group.length&&("youtube"===i.contentSource||"vimeo"===i.contentSource)&&n.load(i.contentSource)}})}(jQuery),function(m,l,g){"use strict";function d(t){var e=[];for(var i in t=(t=t.originalEvent||t||m.e).touches&&t.touches.length?t.touches:t.changedTouches&&t.changedTouches.length?t.changedTouches:[t])t[i].pageX?e.push({x:t[i].pageX,y:t[i].pageY}):t[i].clientX&&e.push({x:t[i].clientX,y:t[i].clientY});return e}function v(t,e,i){return e&&t?"x"===i?t.x-e.x:"y"===i?t.y-e.y:Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2)):0}function c(t){if(t.is('a,area,button,[role="button"],input,label,select,summary,textarea,video,audio,iframe')||g.isFunction(t.get(0).onclick)||t.data("selectable"))return 1;for(var e=0,i=t[0].attributes,o=i.length;e<o;e++)if("data-fancybox-"===i[e].nodeName.substr(0,14))return 1}function u(t){for(var e,i,o,n,s,r=!1;e=t.get(0),0,i=m.getComputedStyle(e)["overflow-y"],o=m.getComputedStyle(e)["overflow-x"],n=("scroll"===i||"auto"===i)&&e.scrollHeight>e.clientHeight,s=("scroll"===o||"auto"===o)&&e.scrollWidth>e.clientWidth,!(r=n||s)&&(t=t.parent()).length&&!t.hasClass("fancybox-stage")&&!t.is("body"););return r}function i(t){this.instance=t,this.$bg=t.$refs.bg,this.$stage=t.$refs.stage,this.$container=t.$refs.container,this.destroy(),this.$container.on("touchstart.fb.touch mousedown.fb.touch",g.proxy(this,"ontouchstart"))}var y=m.requestAnimationFrame||m.webkitRequestAnimationFrame||m.mozRequestAnimationFrame||m.oRequestAnimationFrame||function(t){return m.setTimeout(t,1e3/60)},b=m.cancelAnimationFrame||m.webkitCancelAnimationFrame||m.mozCancelAnimationFrame||m.oCancelAnimationFrame||function(t){m.clearTimeout(t)};i.prototype.destroy=function(){this.$container.off(".fb.touch"),g(l).off(".fb.touch"),this.requestId&&(b(this.requestId),this.requestId=null),this.tapped&&(clearTimeout(this.tapped),this.tapped=null)},i.prototype.ontouchstart=function(t){var e=this,i=g(t.target),o=e.instance,n=o.current,s=n.$slide,r=n.$content,a="touchstart"==t.type;if(a&&e.$container.off("mousedown.fb.touch"),(!t.originalEvent||2!=t.originalEvent.button)&&s.length&&i.length&&!c(i)&&!c(i.parent())&&(i.is("img")||!(t.originalEvent.clientX>i[0].clientWidth+i.offset().left))){if(!n||o.isAnimating||n.$slide.hasClass("fancybox-animated"))return t.stopPropagation(),void t.preventDefault();e.realPoints=e.startPoints=d(t),e.startPoints.length&&(n.touch&&t.stopPropagation(),e.startEvent=t,e.canTap=!0,e.$target=i,e.$content=r,e.opts=n.opts.touch,e.isPanning=!1,e.isSwiping=!1,e.isZooming=!1,e.isScrolling=!1,e.canPan=o.canPan(),e.startTime=(new Date).getTime(),e.distanceX=e.distanceY=e.distance=0,e.canvasWidth=Math.round(s[0].clientWidth),e.canvasHeight=Math.round(s[0].clientHeight),e.contentLastPos=null,e.contentStartPos=g.fancybox.getTranslate(e.$content)||{top:0,left:0},e.sliderStartPos=g.fancybox.getTranslate(s),e.stagePos=g.fancybox.getTranslate(o.$refs.stage),e.sliderStartPos.top-=e.stagePos.top,e.sliderStartPos.left-=e.stagePos.left,e.contentStartPos.top-=e.stagePos.top,e.contentStartPos.left-=e.stagePos.left,g(l).off(".fb.touch").on(a?"touchend.fb.touch touchcancel.fb.touch":"mouseup.fb.touch mouseleave.fb.touch",g.proxy(e,"ontouchend")).on(a?"touchmove.fb.touch":"mousemove.fb.touch",g.proxy(e,"ontouchmove")),g.fancybox.isMobile&&l.addEventListener("scroll",e.onscroll,!0),((e.opts||e.canPan)&&(i.is(e.$stage)||e.$stage.find(i).length)||(i.is(".fancybox-image")&&t.preventDefault(),g.fancybox.isMobile&&i.parents(".fancybox-caption").length))&&(e.isScrollable=u(i)||u(i.parent()),g.fancybox.isMobile&&e.isScrollable||t.preventDefault(),1!==e.startPoints.length&&!n.hasError||(e.canPan?(g.fancybox.stop(e.$content),e.isPanning=!0):e.isSwiping=!0,e.$container.addClass("fancybox-is-grabbing")),2===e.startPoints.length&&"image"===n.type&&(n.isLoaded||n.$ghost)&&(e.canTap=!1,e.isSwiping=!1,e.isPanning=!1,e.isZooming=!0,g.fancybox.stop(e.$content),e.centerPointStartX=.5*(e.startPoints[0].x+e.startPoints[1].x)-g(m).scrollLeft(),e.centerPointStartY=.5*(e.startPoints[0].y+e.startPoints[1].y)-g(m).scrollTop(),e.percentageOfImageAtPinchPointX=(e.centerPointStartX-e.contentStartPos.left)/e.contentStartPos.width,e.percentageOfImageAtPinchPointY=(e.centerPointStartY-e.contentStartPos.top)/e.contentStartPos.height,e.startDistanceBetweenFingers=v(e.startPoints[0],e.startPoints[1]))))}},i.prototype.onscroll=function(t){this.isScrolling=!0,l.removeEventListener("scroll",this.onscroll,!0)},i.prototype.ontouchmove=function(t){var e=this;void 0===t.originalEvent.buttons||0!==t.originalEvent.buttons?e.isScrolling?e.canTap=!1:(e.newPoints=d(t),(e.opts||e.canPan)&&e.newPoints.length&&e.newPoints.length&&(e.isSwiping&&!0===e.isSwiping||t.preventDefault(),e.distanceX=v(e.newPoints[0],e.startPoints[0],"x"),e.distanceY=v(e.newPoints[0],e.startPoints[0],"y"),e.distance=v(e.newPoints[0],e.startPoints[0]),0<e.distance&&(e.isSwiping?e.onSwipe(t):e.isPanning?e.onPan():e.isZooming&&e.onZoom()))):e.ontouchend(t)},i.prototype.onSwipe=function(t){var e,n=this,s=n.instance,i=n.isSwiping,o=n.sliderStartPos.left||0;if(!0!==i)"x"==i&&(0<n.distanceX&&(n.instance.group.length<2||0===n.instance.current.index&&!n.instance.current.opts.loop)?o+=Math.pow(n.distanceX,.8):n.distanceX<0&&(n.instance.group.length<2||n.instance.current.index===n.instance.group.length-1&&!n.instance.current.opts.loop)?o-=Math.pow(-n.distanceX,.8):o+=n.distanceX),n.sliderLastPos={top:"x"==i?0:n.sliderStartPos.top+n.distanceY,left:o},n.requestId&&(b(n.requestId),n.requestId=null),n.requestId=y(function(){n.sliderLastPos&&(g.each(n.instance.slides,function(t,e){var i=e.pos-n.instance.currPos;g.fancybox.setTranslate(e.$slide,{top:n.sliderLastPos.top,left:n.sliderLastPos.left+i*n.canvasWidth+i*e.opts.gutter})}),n.$container.addClass("fancybox-is-sliding"))});else if(10<Math.abs(n.distance)){if(n.canTap=!1,s.group.length<2&&n.opts.vertical?n.isSwiping="y":s.isDragging||!1===n.opts.vertical||"auto"===n.opts.vertical&&800<g(m).width()?n.isSwiping="x":(e=Math.abs(180*Math.atan2(n.distanceY,n.distanceX)/Math.PI),n.isSwiping=45<e&&e<135?"y":"x"),"y"===n.isSwiping&&g.fancybox.isMobile&&n.isScrollable)return void(n.isScrolling=!0);s.isDragging=n.isSwiping,n.startPoints=n.newPoints,g.each(s.slides,function(t,e){var i,o;g.fancybox.stop(e.$slide),i=g.fancybox.getTranslate(e.$slide),o=g.fancybox.getTranslate(s.$refs.stage),e.$slide.css({transform:"",opacity:"","transition-duration":""}).removeClass("fancybox-animated").removeClass(function(t,e){return(e.match(/(^|\s)fancybox-fx-\S+/g)||[]).join(" ")}),e.pos===s.current.pos&&(n.sliderStartPos.top=i.top-o.top,n.sliderStartPos.left=i.left-o.left),g.fancybox.setTranslate(e.$slide,{top:i.top-o.top,left:i.left-o.left})}),s.SlideShow&&s.SlideShow.isActive&&s.SlideShow.stop()}},i.prototype.onPan=function(){var t=this;v(t.newPoints[0],t.realPoints[0])<(g.fancybox.isMobile?10:5)?t.startPoints=t.newPoints:(t.canTap=!1,t.contentLastPos=t.limitMovement(),t.requestId&&b(t.requestId),t.requestId=y(function(){g.fancybox.setTranslate(t.$content,t.contentLastPos)}))},i.prototype.limitMovement=function(){var t,e,i,o,n,s,r=this.canvasWidth,a=this.canvasHeight,l=this.distanceX,c=this.distanceY,d=this.contentStartPos,u=d.left,h=d.top,p=d.width,f=d.height;return n=r<p?u+l:u,s=h+c,t=Math.max(0,.5*r-.5*p),e=Math.max(0,.5*a-.5*f),i=Math.min(r-p,.5*r-.5*p),o=Math.min(a-f,.5*a-.5*f),0<l&&t<n&&(n=t-1+Math.pow(-t+u+l,.8)||0),l<0&&n<i&&(n=i+1-Math.pow(i-u-l,.8)||0),0<c&&e<s&&(s=e-1+Math.pow(-e+h+c,.8)||0),c<0&&s<o&&(s=o+1-Math.pow(o-h-c,.8)||0),{top:s,left:n}},i.prototype.limitPosition=function(t,e,i,o){var n=this.canvasWidth,s=this.canvasHeight;return t=n<i?(t=0<t?0:t)<n-i?n-i:t:Math.max(0,n/2-i/2),{top:e=s<o?(e=0<e?0:e)<s-o?s-o:e:Math.max(0,s/2-o/2),left:t}},i.prototype.onZoom=function(){var t=this,e=t.contentStartPos,i=e.width,o=e.height,n=e.left,s=e.top,r=v(t.newPoints[0],t.newPoints[1])/t.startDistanceBetweenFingers,a=Math.floor(i*r),l=Math.floor(o*r),c=(i-a)*t.percentageOfImageAtPinchPointX,d=(o-l)*t.percentageOfImageAtPinchPointY,u=(t.newPoints[0].x+t.newPoints[1].x)/2-g(m).scrollLeft(),h=(t.newPoints[0].y+t.newPoints[1].y)/2-g(m).scrollTop(),p=u-t.centerPointStartX,f={top:s+(d+(h-t.centerPointStartY)),left:n+(c+p),scaleX:r,scaleY:r};t.canTap=!1,t.newWidth=a,t.newHeight=l,t.contentLastPos=f,t.requestId&&b(t.requestId),t.requestId=y(function(){g.fancybox.setTranslate(t.$content,t.contentLastPos)})},i.prototype.ontouchend=function(t){var e=this,i=e.isSwiping,o=e.isPanning,n=e.isZooming,s=e.isScrolling;if(e.endPoints=d(t),e.dMs=Math.max((new Date).getTime()-e.startTime,1),e.$container.removeClass("fancybox-is-grabbing"),g(l).off(".fb.touch"),l.removeEventListener("scroll",e.onscroll,!0),e.requestId&&(b(e.requestId),e.requestId=null),e.isSwiping=!1,e.isPanning=!1,e.isZooming=!1,e.isScrolling=!1,e.instance.isDragging=!1,e.canTap)return e.onTap(t);e.speed=100,e.velocityX=e.distanceX/e.dMs*.5,e.velocityY=e.distanceY/e.dMs*.5,o?e.endPanning():n?e.endZooming():e.endSwiping(i,s)},i.prototype.endSwiping=function(t,e){var i=this,o=!1,n=i.instance.group.length,s=Math.abs(i.distanceX),r="x"==t&&1<n&&(130<i.dMs&&10<s||50<s);i.sliderLastPos=null,"y"==t&&!e&&50<Math.abs(i.distanceY)?(g.fancybox.animate(i.instance.current.$slide,{top:i.sliderStartPos.top+i.distanceY+150*i.velocityY,opacity:0},200),o=i.instance.close(!0,250)):r&&0<i.distanceX?o=i.instance.previous(300):r&&i.distanceX<0&&(o=i.instance.next(300)),!1!==o||"x"!=t&&"y"!=t||i.instance.centerSlide(200),i.$container.removeClass("fancybox-is-sliding")},i.prototype.endPanning=function(){var t,e,i,o=this;o.contentLastPos&&(e=!1===o.opts.momentum||350<o.dMs?(t=o.contentLastPos.left,o.contentLastPos.top):(t=o.contentLastPos.left+500*o.velocityX,o.contentLastPos.top+500*o.velocityY),(i=o.limitPosition(t,e,o.contentStartPos.width,o.contentStartPos.height)).width=o.contentStartPos.width,i.height=o.contentStartPos.height,g.fancybox.animate(o.$content,i,366))},i.prototype.endZooming=function(){var t,e,i,o,n=this,s=n.instance.current,r=n.newWidth,a=n.newHeight;n.contentLastPos&&(t=n.contentLastPos.left,o={top:e=n.contentLastPos.top,left:t,width:r,height:a,scaleX:1,scaleY:1},g.fancybox.setTranslate(n.$content,o),r<n.canvasWidth&&a<n.canvasHeight?n.instance.scaleToFit(150):r>s.width||a>s.height?n.instance.scaleToActual(n.centerPointStartX,n.centerPointStartY,150):(i=n.limitPosition(t,e,r,a),g.fancybox.animate(n.$content,i,150)))},i.prototype.onTap=function(i){function t(t){var e=r.opts[t];if(g.isFunction(e)&&(e=e.apply(s,[r,i])),e)switch(e){case"close":s.close(o.startEvent);break;case"toggleControls":s.toggleControls();break;case"next":s.next();break;case"nextOrClose":1<s.group.length?s.next():s.close(o.startEvent);break;case"zoom":"image"==r.type&&(r.isLoaded||r.$ghost)&&(s.canPan()?s.scaleToFit():s.isScaledDown()?s.scaleToActual(l,c):s.group.length<2&&s.close(o.startEvent))}}var e,o=this,n=g(i.target),s=o.instance,r=s.current,a=i&&d(i)||o.startPoints,l=a[0]?a[0].x-g(m).scrollLeft()-o.stagePos.left:0,c=a[0]?a[0].y-g(m).scrollTop()-o.stagePos.top:0;if((!i.originalEvent||2!=i.originalEvent.button)&&(n.is("img")||!(l>n[0].clientWidth+n.offset().left))){if(n.is(".fancybox-bg,.fancybox-inner,.fancybox-outer,.fancybox-container"))e="Outside";else if(n.is(".fancybox-slide"))e="Slide";else{if(!s.current.$content||!s.current.$content.find(n).addBack().filter(n).length)return;e="Content"}if(o.tapped){if(clearTimeout(o.tapped),o.tapped=null,50<Math.abs(l-o.tapX)||50<Math.abs(c-o.tapY))return this;t("dblclick"+e)}else o.tapX=l,o.tapY=c,r.opts["dblclick"+e]&&r.opts["dblclick"+e]!==r.opts["click"+e]?o.tapped=setTimeout(function(){o.tapped=null,s.isAnimating||t("click"+e)},500):t("click"+e);return this}},g(l).on("onActivate.fb",function(t,e){e&&!e.Guestures&&(e.Guestures=new i(e))}).on("beforeClose.fb",function(t,e){e&&e.Guestures&&e.Guestures.destroy()})}(window,document,jQuery),function(r,a){"use strict";a.extend(!0,a.fancybox.defaults,{btnTpl:{slideShow:'<button data-fancybox-play class="fancybox-button fancybox-button--play" title="{{PLAY_START}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M6.5 5.4v13.2l11-6.6z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M8.33 5.75h2.2v12.5h-2.2V5.75zm5.15 0h2.2v12.5h-2.2V5.75z"/></svg></button>'},slideShow:{autoStart:!1,speed:3e3,progress:!0}});function i(t){this.instance=t,this.init()}a.extend(i.prototype,{timer:null,isActive:!1,$button:null,init:function(){var t=this,e=t.instance,i=e.group[e.currIndex].opts.slideShow;t.$button=e.$refs.toolbar.find("[data-fancybox-play]").on("click",function(){t.toggle()}),e.group.length<2||!i?t.$button.hide():i.progress&&(t.$progress=a('<div class="fancybox-progress"></div>').appendTo(e.$refs.inner))},set:function(t){var e=this.instance,i=e.current;i&&(!0===t||i.opts.loop||e.currIndex<e.group.length-1)?this.isActive&&"video"!==i.contentType&&(this.$progress&&a.fancybox.animate(this.$progress.show(),{scaleX:1},i.opts.slideShow.speed),this.timer=setTimeout(function(){e.current.opts.loop||e.current.index!=e.group.length-1?e.next():e.jumpTo(0)},i.opts.slideShow.speed)):(this.stop(),e.idleSecondsCounter=0,e.showControls())},clear:function(){clearTimeout(this.timer),this.timer=null,this.$progress&&this.$progress.removeAttr("style").hide()},start:function(){var t=this.instance.current;t&&(this.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_STOP).removeClass("fancybox-button--play").addClass("fancybox-button--pause"),this.isActive=!0,t.isComplete&&this.set(!0),this.instance.trigger("onSlideShowChange",!0))},stop:function(){var t=this.instance.current;this.clear(),this.$button.attr("title",(t.opts.i18n[t.opts.lang]||t.opts.i18n.en).PLAY_START).removeClass("fancybox-button--pause").addClass("fancybox-button--play"),this.isActive=!1,this.instance.trigger("onSlideShowChange",!1),this.$progress&&this.$progress.removeAttr("style").hide()},toggle:function(){this.isActive?this.stop():this.start()}}),a(r).on({"onInit.fb":function(t,e){e&&!e.SlideShow&&(e.SlideShow=new i(e))},"beforeShow.fb":function(t,e,i,o){var n=e&&e.SlideShow;o?n&&i.opts.slideShow.autoStart&&n.start():n&&n.isActive&&n.clear()},"afterShow.fb":function(t,e,i){var o=e&&e.SlideShow;o&&o.isActive&&o.set()},"afterKeydown.fb":function(t,e,i,o,n){var s=e&&e.SlideShow;!s||!i.opts.slideShow||80!==n&&32!==n||a(r.activeElement).is("button,a,input")||(o.preventDefault(),s.toggle())},"beforeClose.fb onDeactivate.fb":function(t,e){var i=e&&e.SlideShow;i&&i.stop()}}),a(r).on("visibilitychange",function(){var t=a.fancybox.getInstance(),e=t&&t.SlideShow;e&&e.isActive&&(r.hidden?e.clear():e.set())})}(document,jQuery),function(s,i){"use strict";var o=function(){for(var t=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],e={},i=0;i<t.length;i++){var o=t[i];if(o&&o[1]in s){for(var n=0;n<o.length;n++)e[t[0][n]]=o[n];return e}}return!1}();if(o){var n={request:function(t){(t=t||s.documentElement)[o.requestFullscreen](t.ALLOW_KEYBOARD_INPUT)},exit:function(){s[o.exitFullscreen]()},toggle:function(t){t=t||s.documentElement,this.isFullscreen()?this.exit():this.request(t)},isFullscreen:function(){return Boolean(s[o.fullscreenElement])},enabled:function(){return Boolean(s[o.fullscreenEnabled])}};i.extend(!0,i.fancybox.defaults,{btnTpl:{fullScreen:'<button data-fancybox-fullscreen class="fancybox-button fancybox-button--fsenter" title="{{FULL_SCREEN}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z"/></svg><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M5 16h3v3h2v-5H5zm3-8H5v2h5V5H8zm6 11h2v-3h3v-2h-5zm2-11V5h-2v5h5V8z"/></svg></button>'},fullScreen:{autoStart:!1}}),i(s).on(o.fullscreenchange,function(){var t=n.isFullscreen(),e=i.fancybox.getInstance();e&&(e.current&&"image"===e.current.type&&e.isAnimating&&(e.isAnimating=!1,e.update(!0,!0,0),e.isComplete||e.complete()),e.trigger("onFullscreenChange",t),e.$refs.container.toggleClass("fancybox-is-fullscreen",t),e.$refs.toolbar.find("[data-fancybox-fullscreen]").toggleClass("fancybox-button--fsenter",!t).toggleClass("fancybox-button--fsexit",t))})}i(s).on({"onInit.fb":function(t,e){o?e&&e.group[e.currIndex].opts.fullScreen?(e.$refs.container.on("click.fb-fullscreen","[data-fancybox-fullscreen]",function(t){t.stopPropagation(),t.preventDefault(),n.toggle()}),e.opts.fullScreen&&!0===e.opts.fullScreen.autoStart&&n.request(),e.FullScreen=n):e&&e.$refs.toolbar.find("[data-fancybox-fullscreen]").hide():e.$refs.toolbar.find("[data-fancybox-fullscreen]").remove()},"afterKeydown.fb":function(t,e,i,o,n){e&&e.FullScreen&&70===n&&(o.preventDefault(),e.FullScreen.toggle())},"beforeClose.fb":function(t,e){e&&e.FullScreen&&e.$refs.container.hasClass("fancybox-is-fullscreen")&&n.exit()}})}(document,jQuery),function(t,s){"use strict";var r="fancybox-thumbs",a=r+"-active";s.fancybox.defaults=s.extend(!0,{btnTpl:{thumbs:'<button data-fancybox-thumbs class="fancybox-button fancybox-button--thumbs" title="{{THUMBS}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M14.59 14.59h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76h-3.76v-3.76zm-4.47 0h3.76v3.76H5.65v-3.76zm8.94-4.47h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76h-3.76V5.65zm-4.47 0h3.76v3.76H5.65V5.65z"/></svg></button>'},thumbs:{autoStart:!1,hideOnClose:!0,parentEl:".fancybox-container",axis:"y"}},s.fancybox.defaults);function o(t){this.init(t)}s.extend(o.prototype,{$button:null,$grid:null,$list:null,isVisible:!1,isActive:!1,init:function(t){var e=this,i=t.group,o=0;e.instance=t,e.opts=i[t.currIndex].opts.thumbs,(t.Thumbs=e).$button=t.$refs.toolbar.find("[data-fancybox-thumbs]");for(var n=0,s=i.length;n<s&&(i[n].thumb&&o++,!(1<o));n++);1<o&&e.opts?(e.$button.removeAttr("style").on("click",function(){e.toggle()}),e.isActive=!0):e.$button.hide()},create:function(){var i,t=this,e=t.instance,o=t.opts.parentEl,n=[];t.$grid||(t.$grid=s('<div class="'+r+" "+r+"-"+t.opts.axis+'"></div>').appendTo(e.$refs.container.find(o).addBack().filter(o)),t.$grid.on("click","a",function(){e.jumpTo(s(this).attr("data-index"))})),t.$list||(t.$list=s('<div class="'+r+'__list">').appendTo(t.$grid)),s.each(e.group,function(t,e){(i=e.thumb)||"image"!==e.type||(i=e.src),n.push('<a href="javascript:;" tabindex="0" data-index="'+t+'"'+(i&&i.length?' style="background-image:url('+i+')"':'class="fancybox-thumbs-missing"')+"></a>")}),t.$list[0].innerHTML=n.join(""),"x"===t.opts.axis&&t.$list.width(parseInt(t.$grid.css("padding-right"),10)+e.group.length*t.$list.children().eq(0).outerWidth(!0))},focus:function(t){var e,i,o=this.$list,n=this.$grid;this.instance.current&&(i=(e=o.children().removeClass(a).filter('[data-index="'+this.instance.current.index+'"]').addClass(a)).position(),"y"===this.opts.axis&&(i.top<0||i.top>o.height()-e.outerHeight())?o.stop().animate({scrollTop:o.scrollTop()+i.top},t):"x"===this.opts.axis&&(i.left<n.scrollLeft()||i.left>n.scrollLeft()+(n.width()-e.outerWidth()))&&o.parent().stop().animate({scrollLeft:i.left},t))},update:function(){this.instance.$refs.container.toggleClass("fancybox-show-thumbs",this.isVisible),this.isVisible?(this.$grid||this.create(),this.instance.trigger("onThumbsShow"),this.focus(0)):this.$grid&&this.instance.trigger("onThumbsHide"),this.instance.update()},hide:function(){this.isVisible=!1,this.update()},show:function(){this.isVisible=!0,this.update()},toggle:function(){this.isVisible=!this.isVisible,this.update()}}),s(t).on({"onInit.fb":function(t,e){var i;e&&!e.Thumbs&&(i=new o(e)).isActive&&!0===i.opts.autoStart&&i.show()},"beforeShow.fb":function(t,e,i,o){var n=e&&e.Thumbs;n&&n.isVisible&&n.focus(o?0:250)},"afterKeydown.fb":function(t,e,i,o,n){var s=e&&e.Thumbs;s&&s.isActive&&71===n&&(o.preventDefault(),s.toggle())},"beforeClose.fb":function(t,e){var i=e&&e.Thumbs;i&&i.isVisible&&!1!==i.opts.hideOnClose&&i.$grid.hide()}})}(document,jQuery),function(t,s){"use strict";s.extend(!0,s.fancybox.defaults,{btnTpl:{share:'<button data-fancybox-share class="fancybox-button fancybox-button--share" title="{{SHARE}}"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M2.55 19c1.4-8.4 9.1-9.8 11.9-9.8V5l7 7-7 6.3v-3.5c-2.8 0-10.5 2.1-11.9 4.2z"/></svg></button>'},share:{url:function(t,e){return!t.currentHash&&"inline"!==e.type&&"html"!==e.type&&(e.origSrc||e.src)||window.location},tpl:'<div class="fancybox-share"><h1>{{SHARE}}</h1><p><a class="fancybox-share__button fancybox-share__button--fb" href="https://www.facebook.com/sharer/sharer.php?u={{url}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m287 456v-299c0-21 6-35 35-35h38v-63c-7-1-29-3-55-3-54 0-91 33-91 94v306m143-254h-205v72h196" /></svg><span>Facebook</span></a><a class="fancybox-share__button fancybox-share__button--tw" href="https://twitter.com/intent/tweet?url={{url}}&text={{descr}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m456 133c-14 7-31 11-47 13 17-10 30-27 37-46-15 10-34 16-52 20-61-62-157-7-141 75-68-3-129-35-169-85-22 37-11 86 26 109-13 0-26-4-37-9 0 39 28 72 65 80-12 3-25 4-37 2 10 33 41 57 77 57-42 30-77 38-122 34 170 111 378-32 359-208 16-11 30-25 41-42z" /></svg><span>Twitter</span></a><a class="fancybox-share__button fancybox-share__button--pt" href="https://www.pinterest.com/pin/create/button/?url={{url}}&description={{descr}}&media={{media}}"><svg viewBox="0 0 512 512" xmlns="http://www.w3.org/2000/svg"><path d="m265 56c-109 0-164 78-164 144 0 39 15 74 47 87 5 2 10 0 12-5l4-19c2-6 1-8-3-13-9-11-15-25-15-45 0-58 43-110 113-110 62 0 96 38 96 88 0 67-30 122-73 122-24 0-42-19-36-44 6-29 20-60 20-81 0-19-10-35-31-35-25 0-44 26-44 60 0 21 7 36 7 36l-30 125c-8 37-1 83 0 87 0 3 4 4 5 2 2-3 32-39 42-75l16-64c8 16 31 29 56 29 74 0 124-67 124-157 0-69-58-132-146-132z" fill="#fff"/></svg><span>Pinterest</span></a></p><p><input class="fancybox-share__input" type="text" value="{{url_raw}}" onclick="select()" /></p></div>'}}),s(t).on("click","[data-fancybox-share]",function(){var t,e,i,o=s.fancybox.getInstance(),n=o.current||null;n&&("function"===s.type(n.opts.share.url)&&(t=n.opts.share.url.apply(n,[o,n])),e=n.opts.share.tpl.replace(/\{\{media\}\}/g,"image"===n.type?encodeURIComponent(n.src):"").replace(/\{\{url\}\}/g,encodeURIComponent(t)).replace(/\{\{url_raw\}\}/g,(i={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;","`":"&#x60;","=":"&#x3D;"},String(t).replace(/[&<>"'`=\/]/g,function(t){return i[t]}))).replace(/\{\{descr\}\}/g,o.$caption?encodeURIComponent(o.$caption.text()):""),s.fancybox.open({src:o.translate(o,e),type:"html",opts:{touch:!1,animationEffect:!1,afterLoad:function(t,e){o.$refs.container.one("beforeClose.fb",function(){t.close(null,0)}),e.$content.find(".fancybox-share__button").click(function(){return window.open(this.href,"Share","width=550, height=450"),!1})},mobile:{autoFocus:!1}}}))})}(document,jQuery),function(s,r,n){"use strict";function a(){var t=s.location.hash.substr(1),e=t.split("-"),i=1<e.length&&/^\+?\d+$/.test(e[e.length-1])&&parseInt(e.pop(-1),10)||1;return{hash:t,index:i<1?1:i,gallery:e.join("-")}}function e(t){""!==t.gallery&&n("[data-fancybox='"+n.escapeSelector(t.gallery)+"']").eq(t.index-1).focus().trigger("click.fb-start")}function l(t){var e,i;return!!t&&(""!==(i=(e=t.current?t.current.opts:t.opts).hash||(e.$orig?e.$orig.data("fancybox")||e.$orig.data("fancybox-trigger"):""))&&i)}n.escapeSelector||(n.escapeSelector=function(t){return(t+"").replace(/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g,function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t})}),n(function(){!1!==n.fancybox.defaults.hash&&(n(r).on({"onInit.fb":function(t,e){var i,o;!1!==e.group[e.currIndex].opts.hash&&(i=a(),(o=l(e))&&i.gallery&&o==i.gallery&&(e.currIndex=i.index-1))},"beforeShow.fb":function(t,e,i,o){var n;i&&!1!==i.opts.hash&&(n=l(e))&&(e.currentHash=n+(1<e.group.length?"-"+(i.index+1):""),s.location.hash!=="#"+e.currentHash&&(o&&!e.origHash&&(e.origHash=s.location.hash),e.hashTimer&&clearTimeout(e.hashTimer),e.hashTimer=setTimeout(function(){"replaceState"in s.history?(s.history[o?"pushState":"replaceState"]({},r.title,s.location.pathname+s.location.search+"#"+e.currentHash),o&&(e.hasCreatedHistory=!0)):s.location.hash=e.currentHash,e.hashTimer=null},300)))},"beforeClose.fb":function(t,e,i){i&&!1!==i.opts.hash&&(clearTimeout(e.hashTimer),e.currentHash&&e.hasCreatedHistory?s.history.back():e.currentHash&&("replaceState"in s.history?s.history.replaceState({},r.title,s.location.pathname+s.location.search+(e.origHash||"")):s.location.hash=e.origHash),e.currentHash=null)}}),n(s).on("hashchange.fb",function(){var t=a(),o=null;n.each(n(".fancybox-container").get().reverse(),function(t,e){var i=n(e).data("FancyBox");if(i&&i.currentHash)return o=i,!1}),o?o.currentHash===t.gallery+"-"+t.index||1===t.index&&o.currentHash==t.gallery||(o.currentHash=null,o.close()):""!==t.gallery&&e(t)}),setTimeout(function(){n.fancybox.getInstance()||e(a())},50))})}(window,document,jQuery),function(t,e){"use strict";var n=(new Date).getTime();e(t).on({"onInit.fb":function(t,o,e){o.$refs.stage.on("mousewheel DOMMouseScroll wheel MozMousePixelScroll",function(t){var e=o.current,i=(new Date).getTime();o.group.length<2||!1===e.opts.wheel||"auto"===e.opts.wheel&&"image"!==e.type||(t.preventDefault(),t.stopPropagation(),e.$slide.hasClass("fancybox-animated")||(t=t.originalEvent||t,i-n<250||(n=i,o[(-t.deltaY||-t.deltaX||t.wheelDelta||-t.detail)<0?"next":"previous"]())))})}})}(document,jQuery),function(t){"function"==typeof define&&define.amd?define(["jquery"],t):"object"==typeof exports?module.exports=t($||require("jquery")):t(jQuery)}(function(N){"use strict";var n="styler",o={idSuffix:"-styler",filePlaceholder:"Ð¤Ð°Ð¹Ð» Ð½Ðµ Ð²ÑÐ±ÑÐ°Ð½",fileBrowse:"ÐÐ±Ð·Ð¾Ñ...",fileNumber:"ÐÑÐ±ÑÐ°Ð½Ð¾ ÑÐ°Ð¹Ð»Ð¾Ð²: %s",selectPlaceholder:"ÐÑÐ±ÐµÑÐ¸ÑÐµ...",selectSearch:!1,selectSearchLimit:10,selectSearchNotFound:"Ð¡Ð¾Ð²Ð¿Ð°Ð´ÐµÐ½Ð¸Ð¹ Ð½Ðµ Ð½Ð°Ð¹Ð´ÐµÐ½Ð¾",selectSearchPlaceholder:"ÐÐ¾Ð¸ÑÐº...",selectVisibleOptions:0,selectSmartPositioning:!0,locale:"ru",locales:{en:{filePlaceholder:"No file selected",fileBrowse:"Browse...",fileNumber:"Selected files: %s",selectPlaceholder:"Select...",selectSearchNotFound:"No matches found",selectSearchPlaceholder:"Search..."}},onSelectOpened:function(){},onSelectClosed:function(){},onFormStyled:function(){}};function s(t,e){this.element=t,this.options=N.extend({},o,e);var i=this.options.locale;void 0!==this.options.locales[i]&&N.extend(this.options,this.options.locales[i]),this.init()}function j(t){if(!N(t.target).parents().hasClass("jq-selectbox")&&"OPTION"!=t.target.nodeName&&N("div.jq-selectbox.opened").length){var e=N("div.jq-selectbox.opened"),i=N("div.jq-selectbox__search input",e),o=N("div.jq-selectbox__dropdown",e);e.find("select").data("_"+n).options.onSelectClosed.call(e),i.length&&i.val("").keyup(),o.hide().find("li.sel").addClass("selected"),e.removeClass("focused opened dropup dropdown")}}s.prototype={init:function(){var D=N(this.element),O=this.options,F=!(!navigator.userAgent.match(/(iPad|iPhone|iPod)/i)||navigator.userAgent.match(/(Windows\sPhone)/i)),t=!(!navigator.userAgent.match(/Android/i)||navigator.userAgent.match(/(Windows\sPhone)/i));function M(){void 0!==D.attr("id")&&""!==D.attr("id")&&(this.id=D.attr("id")+O.idSuffix),this.title=D.attr("title"),this.classes=D.attr("class"),this.data=D.data()}if(D.is(":checkbox")){var e=function(){var t=new M,e=N('<div class="jq-checkbox"><div class="jq-checkbox__div"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);D.after(e).prependTo(e),D.is(":checked")&&e.addClass("checked"),D.is(":disabled")&&e.addClass("disabled"),e.click(function(t){t.preventDefault(),D.triggerHandler("click"),e.is(".disabled")||(D.is(":checked")?(D.prop("checked",!1),e.removeClass("checked")):(D.prop("checked",!0),e.addClass("checked")),D.focus().change())}),D.closest("label").add('label[for="'+D.attr("id")+'"]').on("click.styler",function(t){N(t.target).is("a")||N(t.target).closest(e).length||(e.triggerHandler("click"),t.preventDefault())}),D.on("change.styler",function(){D.is(":checked")?e.addClass("checked"):e.removeClass("checked")}).on("keydown.styler",function(t){32==t.which&&e.click()}).on("focus.styler",function(){e.is(".disabled")||e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")})};e(),D.on("refresh",function(){D.closest("label").add('label[for="'+D.attr("id")+'"]').off(".styler"),D.off(".styler").parent().before(D).remove(),e()})}else if(D.is(":radio")){var i=function(){var t=new M,i=N('<div class="jq-radio"><div class="jq-radio__div"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);D.after(i).prependTo(i),D.is(":checked")&&i.addClass("checked"),D.is(":disabled")&&i.addClass("disabled"),N.fn.commonParents=function(){var t=this;return t.first().parents().filter(function(){return N(this).find(t).length===t.length})},N.fn.commonParent=function(){return N(this).commonParents().first()},i.click(function(t){if(t.preventDefault(),D.triggerHandler("click"),!i.is(".disabled")){var e=N('input[name="'+D.attr("name")+'"]');e.commonParent().find(e).prop("checked",!1).parent().removeClass("checked"),D.prop("checked",!0).parent().addClass("checked"),D.focus().change()}}),D.closest("label").add('label[for="'+D.attr("id")+'"]').on("click.styler",function(t){N(t.target).is("a")||N(t.target).closest(i).length||(i.triggerHandler("click"),t.preventDefault())}),D.on("change.styler",function(){D.parent().addClass("checked")}).on("focus.styler",function(){i.is(".disabled")||i.addClass("focused")}).on("blur.styler",function(){i.removeClass("focused")})};i(),D.on("refresh",function(){D.closest("label").add('label[for="'+D.attr("id")+'"]').off(".styler"),D.off(".styler").parent().before(D).remove(),i()})}else if(D.is(":file")){var o=function(){var t=new M,o=D.data("placeholder");void 0===o&&(o=O.filePlaceholder);var e=D.data("browse");void 0!==e&&""!==e||(e=O.fileBrowse);var n=N('<div class="jq-file"><div class="jq-file__name">'+o+'</div><div class="jq-file__browse">'+e+"</div></div>").attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);D.after(n).appendTo(n),D.is(":disabled")&&n.addClass("disabled");var i=D.val(),s=N("div.jq-file__name",n);i&&s.text(i.replace(/.+[\\\/]/,"")),D.on("change.styler",function(){var t=D.val();if(D.is("[multiple]")){t="";var e=D[0].files.length;if(0<e){var i=D.data("number");void 0===i&&(i=O.fileNumber),t=i=i.replace("%s",e)}}s.text(t.replace(/.+[\\\/]/,"")),""===t?(s.text(o),n.removeClass("changed")):n.addClass("changed")}).on("focus.styler",function(){n.addClass("focused")}).on("blur.styler",function(){n.removeClass("focused")}).on("click.styler",function(){n.removeClass("focused")})};o(),D.on("refresh",function(){D.off(".styler").parent().before(D).remove(),o()})}else if(D.is('input[type="number"]')){var n=function(){var t=new M,e=N('<div class="jq-number"><div class="jq-number__spin minus"></div><div class="jq-number__spin plus"></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);D.after(e).prependTo(e).wrap('<div class="jq-number__field"></div>'),D.is(":disabled")&&e.addClass("disabled");var s,r,a,i=null,o=null;void 0!==D.attr("min")&&(s=D.attr("min")),void 0!==D.attr("max")&&(r=D.attr("max")),a=void 0!==D.attr("step")&&N.isNumeric(D.attr("step"))?Number(D.attr("step")):Number(1);function n(t){var e,i=D.val();N.isNumeric(i)||(i=0,D.val("0")),t.is(".minus")?e=Number(i)-a:t.is(".plus")&&(e=Number(i)+a);var o=(a.toString().split(".")[1]||[]).length;if(0<o){for(var n="1";n.length<=o;)n+="0";e=Math.round(e*n)/n}N.isNumeric(s)&&N.isNumeric(r)?s<=e&&e<=r&&D.val(e):N.isNumeric(s)&&!N.isNumeric(r)?s<=e&&D.val(e):!N.isNumeric(s)&&N.isNumeric(r)?e<=r&&D.val(e):D.val(e)}e.is(".disabled")||(e.on("mousedown","div.jq-number__spin",function(){var t=N(this);n(t),i=setTimeout(function(){o=setInterval(function(){n(t)},40)},350)}).on("mouseup mouseout","div.jq-number__spin",function(){clearTimeout(i),clearInterval(o)}).on("mouseup","div.jq-number__spin",function(){D.change().trigger("input")}),D.on("focus.styler",function(){e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")}))};n(),D.on("refresh",function(){D.off(".styler").closest(".jq-number").before(D).remove(),n()})}else if(D.is("select")){var s=function(){function $(e){var i=e.prop("scrollHeight")-e.outerHeight(),o=null,n=null;e.off("mousewheel DOMMouseScroll").on("mousewheel DOMMouseScroll",function(t){o=t.originalEvent.detail<0||0<t.originalEvent.wheelDelta?1:-1,n=e.scrollTop(),(i<=n&&o<0||n<=0&&0<o)&&(t.stopPropagation(),t.preventDefault())})}var E=N("option",D),P="";function I(){for(var t=0;t<E.length;t++){var e=E.eq(t),i="",o="",n="",s="",r="",a="",l="",c="",d="";e.prop("selected")&&(o="selected sel"),e.is(":disabled")&&(o="disabled"),e.is(":selected:disabled")&&(o="selected sel disabled"),void 0!==e.attr("id")&&""!==e.attr("id")&&(s=' id="'+e.attr("id")+O.idSuffix+'"'),void 0!==e.attr("title")&&""!==E.attr("title")&&(r=' title="'+e.attr("title")+'"'),void 0!==e.attr("class")&&(l=" "+e.attr("class"),d=' data-jqfs-class="'+e.attr("class")+'"');var u=e.data();for(var h in u)""!==u[h]&&(a+=" data-"+h+'="'+u[h]+'"');o+l!==""&&(n=' class="'+o+l+'"'),i="<li"+d+a+n+r+s+">"+e.html()+"</li>",e.parent().is("optgroup")&&(void 0!==e.parent().attr("class")&&(c=" "+e.parent().attr("class")),i="<li"+d+a+' class="'+o+l+" option"+c+'"'+r+s+">"+e.html()+"</li>",e.is(":first-child")&&(i='<li class="optgroup'+c+'">'+e.parent().attr("label")+"</li>"+i)),P+=i}}if(D.is("[multiple]")){if(t||F)return;!function(){var t=new M,e=N('<div class="jq-select-multiple jqselect"></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);D.after(e),I(),e.append("<ul>"+P+"</ul>");var i=N("ul",e),n=N("li",e),o=D.attr("size"),s=i.outerHeight(),r=n.outerHeight();void 0!==o&&0<o?i.css({height:r*o}):i.css({height:4*r}),s>e.height()&&(i.css("overflowY","scroll"),$(i),n.filter(".selected").length&&i.scrollTop(i.scrollTop()+n.filter(".selected").position().top)),D.prependTo(e),D.is(":disabled")?(e.addClass("disabled"),E.each(function(){N(this).is(":selected")&&n.eq(N(this).index()).addClass("selected")})):(n.filter(":not(.disabled):not(.optgroup)").click(function(t){D.focus();var e=N(this);if(t.ctrlKey||t.metaKey||e.addClass("selected"),t.shiftKey||e.addClass("first"),t.ctrlKey||t.metaKey||t.shiftKey||e.siblings().removeClass("selected first"),(t.ctrlKey||t.metaKey)&&(e.is(".selected")?e.removeClass("selected first"):e.addClass("selected first"),e.siblings().removeClass("first")),t.shiftKey){var i=!1,o=!1;e.siblings().removeClass("selected").siblings(".first").addClass("selected"),e.prevAll().each(function(){N(this).is(".first")&&(i=!0)}),e.nextAll().each(function(){N(this).is(".first")&&(o=!0)}),i&&e.prevAll().each(function(){if(N(this).is(".selected"))return!1;N(this).not(".disabled, .optgroup").addClass("selected")}),o&&e.nextAll().each(function(){if(N(this).is(".selected"))return!1;N(this).not(".disabled, .optgroup").addClass("selected")}),1==n.filter(".selected").length&&e.addClass("first")}E.prop("selected",!1),n.filter(".selected").each(function(){var t=N(this),e=t.index();t.is(".option")&&(e-=t.prevAll(".optgroup").length),E.eq(e).prop("selected",!0)}),D.change()}),E.each(function(t){N(this).data("optionIndex",t)}),D.on("change.styler",function(){n.removeClass("selected");var e=[];E.filter(":selected").each(function(){e.push(N(this).data("optionIndex"))}),n.not(".optgroup").filter(function(t){return-1<N.inArray(t,e)}).addClass("selected")}).on("focus.styler",function(){e.addClass("focused")}).on("blur.styler",function(){e.removeClass("focused")}),s>e.height()&&D.on("keydown.styler",function(t){38!=t.which&&37!=t.which&&33!=t.which||i.scrollTop(i.scrollTop()+n.filter(".selected").position().top-r),40!=t.which&&39!=t.which&&34!=t.which||i.scrollTop(i.scrollTop()+n.filter(".selected:last").position().top-i.innerHeight()+2*r)}))}()}else!function(){var t=new M,e="",i=D.data("placeholder"),o=D.data("search"),n=D.data("search-limit"),s=D.data("search-not-found"),r=D.data("search-placeholder"),l=D.data("smart-positioning");void 0===i&&(i=O.selectPlaceholder),void 0!==o&&""!==o||(o=O.selectSearch),void 0!==n&&""!==n||(n=O.selectSearchLimit),void 0!==s&&""!==s||(s=O.selectSearchNotFound),void 0===r&&(r=O.selectSearchPlaceholder),void 0!==l&&""!==l||(l=O.selectSmartPositioning);var c=N('<div class="jq-selectbox jqselect"><div class="jq-selectbox__select"><div class="jq-selectbox__select-text"></div><div class="jq-selectbox__trigger"><div class="jq-selectbox__trigger-arrow"></div></div></div></div>').attr({id:t.id,title:t.title}).addClass(t.classes).data(t.data);D.after(c).prependTo(c);var d=c.css("z-index");d=0<d?d:1;var a=N("div.jq-selectbox__select",c),u=N("div.jq-selectbox__select-text",c),h=E.filter(":selected");I(),o&&(e='<div class="jq-selectbox__search"><input type="search" autocomplete="off" placeholder="'+r+'"></div><div class="jq-selectbox__not-found">'+s+"</div>");var p=N('<div class="jq-selectbox__dropdown">'+e+"<ul>"+P+"</ul></div>");c.append(p);var f=N("ul",p),m=N("li",p),g=N("input",p),v=N("div.jq-selectbox__not-found",p).hide();m.length<n&&g.parent().hide(),""===E.first().text()&&E.first().is(":selected")&&!1!==i?u.text(i).addClass("placeholder"):u.text(h.text());var y=0,b=0;if(m.css({display:"inline-block"}),m.each(function(){var t=N(this);t.innerWidth()>y&&(y=t.innerWidth(),b=t.width())}),m.css({display:""}),u.is(".placeholder")&&u.width()>y)u.width(u.width());else{var x=c.clone().appendTo("body").width("auto"),w=x.outerWidth();x.remove(),w==c.outerWidth()&&u.width(b)}y>c.width()&&p.width(y),""===E.first().text()&&""!==D.data("placeholder")&&m.first().hide();var C=c.outerHeight(!0),_=g.parent().outerHeight(!0)||0,S=f.css("max-height"),T=m.filter(".selected");if(T.length<1&&m.first().addClass("selected sel"),void 0===m.data("li-height")){var k=m.outerHeight();!1!==i&&(k=m.eq(1).outerHeight()),m.data("li-height",k)}var A=p.css("top");if("auto"==p.css("left")&&p.css({left:0}),"auto"==p.css("top")&&(p.css({top:C}),A=C),p.hide(),T.length&&(E.first().text()!=h.text()&&c.addClass("changed"),c.data("jqfs-class",T.data("jqfs-class")),c.addClass(T.data("jqfs-class"))),D.is(":disabled"))c.addClass("disabled");else{a.click(function(){if(N("div.jq-selectbox").filter(".opened").length&&O.onSelectClosed.call(N("div.jq-selectbox").filter(".opened")),D.focus(),!F){var e=N(window),i=m.data("li-height"),o=c.offset().top,n=e.height()-C-(o-e.scrollTop()),t=D.data("visible-options");void 0!==t&&""!==t||(t=O.selectVisibleOptions);var s=5*i,r=i*t;0<t&&t<6&&(s=r),0===t&&(r="auto");var a=function(){p.height("auto").css({bottom:"auto",top:A});function t(){f.css("max-height",Math.floor((n-20-_)/i)*i)}t(),f.css("max-height",r),"none"!=S&&f.css("max-height",S),n<p.outerHeight()+20&&t()};!0===l||1===l?s+_+20<n?(a(),c.removeClass("dropup").addClass("dropdown")):(function(){p.height("auto").css({top:"auto",bottom:A});function t(){f.css("max-height",Math.floor((o-e.scrollTop()-20-_)/i)*i)}t(),f.css("max-height",r),"none"!=S&&f.css("max-height",S),o-e.scrollTop()-20<p.outerHeight()+20&&t()}(),c.removeClass("dropdown").addClass("dropup")):!1===l||0===l?s+_+20<n&&(a(),c.removeClass("dropup").addClass("dropdown")):(p.height("auto").css({bottom:"auto",top:A}),f.css("max-height",r),"none"!=S&&f.css("max-height",S)),c.offset().left+p.outerWidth()>e.width()&&p.css({left:"auto",right:0}),N("div.jqselect").css({zIndex:d-1}).removeClass("opened"),c.css({zIndex:d}),p.is(":hidden")?(N("div.jq-selectbox__dropdown:visible").hide(),p.show(),c.addClass("opened focused"),O.onSelectOpened.call(c)):(p.hide(),c.removeClass("opened dropup dropdown"),N("div.jq-selectbox").filter(".opened").length&&O.onSelectClosed.call(c)),g.length&&(g.val("").keyup(),v.hide(),g.keyup(function(){var t=N(this).val();m.each(function(){N(this).html().match(new RegExp(".*?"+t+".*?","i"))?N(this).show():N(this).hide()}),""===E.first().text()&&""!==D.data("placeholder")&&m.first().hide(),m.filter(":visible").length<1?v.show():v.hide()})),m.filter(".selected").length&&(""===D.val()?f.scrollTop(0):(f.innerHeight()/i%2!=0&&(i/=2),f.scrollTop(f.scrollTop()+m.filter(".selected").position().top-f.innerHeight()/2+i))),$(f)}}),m.hover(function(){N(this).siblings().removeClass("selected")});m.filter(".selected").text();m.filter(":not(.disabled):not(.optgroup)").click(function(){D.focus();var t=N(this),e=t.text();if(!t.is(".selected")){var i=t.index();i-=t.prevAll(".optgroup").length,t.addClass("selected sel").siblings().removeClass("selected sel"),E.prop("selected",!1).eq(i).prop("selected",!0),u.text(e),c.data("jqfs-class")&&c.removeClass(c.data("jqfs-class")),c.data("jqfs-class",t.data("jqfs-class")),c.addClass(t.data("jqfs-class")),D.change()}p.hide(),c.removeClass("opened dropup dropdown"),O.onSelectClosed.call(c)}),p.mouseout(function(){N("li.sel",p).addClass("selected")}),D.on("change.styler",function(){u.text(E.filter(":selected").text()).removeClass("placeholder"),m.removeClass("selected sel").not(".optgroup").eq(D[0].selectedIndex).addClass("selected sel"),E.first().text()!=m.filter(".selected").text()?c.addClass("changed"):c.removeClass("changed")}).on("focus.styler",function(){c.addClass("focused"),N("div.jqselect").not(".focused").removeClass("opened dropup dropdown").find("div.jq-selectbox__dropdown").hide()}).on("blur.styler",function(){c.removeClass("focused")}).on("keydown.styler keyup.styler",function(t){var e=m.data("li-height");""===D.val()?u.text(i).addClass("placeholder"):u.text(E.filter(":selected").text()),m.removeClass("selected sel").not(".optgroup").eq(D[0].selectedIndex).addClass("selected sel"),38!=t.which&&37!=t.which&&33!=t.which&&36!=t.which||(""===D.val()?f.scrollTop(0):f.scrollTop(f.scrollTop()+m.filter(".selected").position().top)),40!=t.which&&39!=t.which&&34!=t.which&&35!=t.which||f.scrollTop(f.scrollTop()+m.filter(".selected").position().top-f.innerHeight()+e),13==t.which&&(t.preventDefault(),p.hide(),c.removeClass("opened dropup dropdown"),O.onSelectClosed.call(c))}).on("keydown.styler",function(t){32==t.which&&(t.preventDefault(),a.click())}),j.registered||(N(document).on("click",j),j.registered=!0)}}()};s(),D.on("refresh",function(){D.off(".styler").parent().before(D).remove(),s()})}else D.is(":reset")&&D.on("click",function(){setTimeout(function(){D.closest("form").find("input, select").trigger("refresh")},1)})},destroy:function(){var t=N(this.element);t.is(":checkbox")||t.is(":radio")?(t.removeData("_"+n).off(".styler refresh").removeAttr("style").parent().before(t).remove(),t.closest("label").add('label[for="'+t.attr("id")+'"]').off(".styler")):t.is('input[type="number"]')?t.removeData("_"+n).off(".styler refresh").closest(".jq-number").before(t).remove():(t.is(":file")||t.is("select"))&&t.removeData("_"+n).off(".styler refresh").removeAttr("style").parent().before(t).remove()}},N.fn[n]=function(e){var i,o=arguments;return void 0===e||"object"==typeof e?(this.each(function(){N.data(this,"_"+n)||N.data(this,"_"+n,new s(this,e))}).promise().done(function(){var t=N(this[0]).data("_"+n);t&&t.options.onFormStyled.call()}),this):"string"==typeof e&&"_"!==e[0]&&"init"!==e?(this.each(function(){var t=N.data(this,"_"+n);t instanceof s&&"function"==typeof t[e]&&(i=t[e].apply(t,Array.prototype.slice.call(o,1)))}),void 0!==i?i:this):void 0},j.registered=!1});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
